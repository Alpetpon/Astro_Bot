from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from typing import List, Optional


def get_start_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ú® –ü–µ—Ä–µ–π—Ç–∏ –≤ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    return keyboard


def get_main_menu_keyboard() -> InlineKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üë§ –û–±–æ –º–Ω–µ", callback_data="about_me")],
        [InlineKeyboardButton(text="üíï –ì–∞–π–¥—ã", callback_data="guides_list")],
        [InlineKeyboardButton(text="üîÆ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏", callback_data="consultations")],
        [InlineKeyboardButton(text="üìö –ö—É—Ä—Å—ã", callback_data="courses")],
        [InlineKeyboardButton(text="üè† –ú–æ–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="my_cabinet")]
    ])
    return keyboard


def get_back_keyboard(callback: str = "main_menu", text: str = "‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é") -> InlineKeyboardMarkup:
    """–ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=text, callback_data=callback)]
    ])
    return keyboard


def get_about_me_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ –û–±–æ –º–Ω–µ —Å —Å–æ—Ü. —Å–µ—Ç—è–º–∏"""
    from config import config
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì∑ Instagram", url=config.INSTAGRAM_URL)],
        [InlineKeyboardButton(text="üé• YouTube", url=config.YOUTUBE_URL)],
        [InlineKeyboardButton(text="üíô –í–ö–æ–Ω—Ç–∞–∫—Ç–µ", url=config.VK_URL)],
        [InlineKeyboardButton(text="‚úàÔ∏è Telegram –∫–∞–Ω–∞–ª", url=config.TELEGRAM_CHANNEL_URL)],
        [InlineKeyboardButton(text="üì∞ –î–∑–µ–Ω", url=config.DZEN_URL)],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    return keyboard


def get_guides_list_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–ø–∏—Å–∫–∞ –≥–∞–π–¥–æ–≤"""
    from config import config
    
    buttons = []
    
    for guide in config.GUIDES:
        buttons.append([InlineKeyboardButton(
            text=f"{guide['emoji']} {guide['name']}",
            callback_data=f"guide_{guide['id']}"
        )])
    
    buttons.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard


def get_guide_keyboard(guide_id: str, has_file: bool = False) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≥–∞–π–¥–∞"""
    buttons = []
    
    if has_file:
        buttons.append([InlineKeyboardButton(text="üì• –°–∫–∞—á–∞—Ç—å –≥–∞–π–¥", callback_data=f"download_guide_{guide_id}")])
    else:
        buttons.append([InlineKeyboardButton(text="üí≥ –ö—É–ø–∏—Ç—å –≥–∞–π–¥", callback_data=f"buy_guide_{guide_id}")])
    
    buttons.append([
        InlineKeyboardButton(text="‚óÄÔ∏è –ö –≥–∞–π–¥–∞–º", callback_data="guides_list"),
        InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="main_menu")
    ])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard


def get_courses_keyboard(courses: List) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ –∫—É—Ä—Å–æ–≤"""
    buttons = []
    
    for course in courses:
        buttons.append([InlineKeyboardButton(
            text=course.name,
            callback_data=f"course_{course.slug}"
        )])
    
    buttons.append([InlineKeyboardButton(text="‚óÄÔ∏è –í –º–µ–Ω—é", callback_data="main_menu")])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard


def get_course_detail_keyboard(course_slug: str, show_navigation: bool = True) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ –∫—É—Ä—Å–∞"""
    buttons = []
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –º–µ–∂–¥—É —Ä–∞–∑–¥–µ–ª–∞–º–∏
    if show_navigation:
        buttons.append([
            InlineKeyboardButton(text="üìñ –û –∫—É—Ä—Å–µ", callback_data=f"course_about_{course_slug}"),
            InlineKeyboardButton(text="üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å", callback_data=f"course_price_{course_slug}")
        ])
    
    # –ö–Ω–æ–ø–∫–∞ –∑–∞–ø–∏—Å–∏
    buttons.append([
        InlineKeyboardButton(text="‚úÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data=f"course_register_{course_slug}")
    ])
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞–∑–∞–¥
    buttons.append([
        InlineKeyboardButton(text="‚óÄÔ∏è –ö –∫—É—Ä—Å–∞–º", callback_data="courses"),
        InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="main_menu")
    ])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard


def get_tariff_keyboard(course_slug: str, tariffs: List) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞"""
    buttons = []
    
    for tariff in tariffs:
        support_emoji = "üë®‚Äçüè´" if tariff.with_support else "üìö"
        buttons.append([InlineKeyboardButton(
            text=f"{support_emoji} {tariff.name} - {tariff.price} ‚ÇΩ",
            callback_data=f"tariff_{tariff.id}"
        )])
    
    buttons.append([
        InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∫—É—Ä—Å—É", callback_data=f"course_{course_slug}")
    ])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard


def get_payment_keyboard(payment_url: str, payment_id: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ–ø–ª–∞—Ç—ã"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=payment_url)],
        [InlineKeyboardButton(text="‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª(–∞)", callback_data=f"check_payment_{payment_id}")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="courses")]
    ])
    return keyboard


def get_my_cabinet_keyboard(has_courses: bool = False) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞"""
    buttons = []
    
    if has_courses:
        buttons.append([InlineKeyboardButton(text="üìö –ú–æ–∏ –∫—É—Ä—Å—ã", callback_data="my_courses")])
    
    buttons.append([InlineKeyboardButton(text="‚óÄÔ∏è –í –º–µ–Ω—é", callback_data="main_menu")])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard


def get_my_courses_keyboard(user_courses: List) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–ø–∏—Å–∫–∞ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –∫—É—Ä—Å–æ–≤"""
    buttons = []
    
    for course_id, course_name in user_courses:
        buttons.append([InlineKeyboardButton(
            text=f"üìñ {course_name}",
            callback_data=f"my_course_{course_id}"
        )])
    
    buttons.append([InlineKeyboardButton(text="‚óÄÔ∏è –ú–æ–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="my_cabinet")])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard


def get_course_progress_keyboard(course_id: int, lessons: List) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ –∫—É—Ä—Å—É"""
    buttons = []
    
    current_module = None
    
    for lesson in lessons:
        if current_module != lesson['module_number']:
            current_module = lesson['module_number']
            buttons.append([InlineKeyboardButton(
                text=f"üìÇ –ú–æ–¥—É–ª—å {current_module}",
                callback_data=f"module_{course_id}_{current_module}"
            )])
        
        status = "‚úÖ" if lesson['is_completed'] else "üîì" if lesson['is_available'] else "üîí"
        buttons.append([InlineKeyboardButton(
            text=f"{status} –£—Ä–æ–∫ {lesson['lesson_number']}: {lesson['title'][:30]}...",
            callback_data=f"lesson_{lesson['id']}"
        )])
    
    buttons.append([InlineKeyboardButton(text="‚óÄÔ∏è –ú–æ–∏ –∫—É—Ä—Å—ã", callback_data="my_courses")])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard


def get_lesson_keyboard(lesson_id: int, course_id: int, has_materials: bool = False) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É—Ä–æ–∫–∞"""
    buttons = []
    
    if has_materials:
        buttons.append([InlineKeyboardButton(
            text="üìé –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã",
            callback_data=f"lesson_materials_{lesson_id}"
        )])
    
    buttons.append([
        InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —É—Ä–æ–∫", callback_data=f"complete_lesson_{lesson_id}")
    ])
    
    buttons.append([
        InlineKeyboardButton(text="‚óÄÔ∏è –ö –∫—É—Ä—Å—É", callback_data=f"my_course_{course_id}")
    ])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard


def get_consultations_keyboard(consultations: List) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π"""
    buttons = []
    
    for consultation in consultations:
        emoji = consultation.emoji if consultation.emoji else "üîÆ"
        buttons.append([InlineKeyboardButton(
            text=f"{emoji} {consultation.name}",
            callback_data=f"consultation_{consultation.slug}"
        )])
    
    buttons.append([InlineKeyboardButton(text="‚óÄÔ∏è –í –º–µ–Ω—é", callback_data="main_menu")])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard


def get_consultation_detail_keyboard(consultation_slug: str, show_navigation: bool = True) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏"""
    buttons = []
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –º–µ–∂–¥—É —Ä–∞–∑–¥–µ–ª–∞–º–∏
    if show_navigation:
        buttons.append([
            InlineKeyboardButton(text="‚ÑπÔ∏è –ò–Ω—Ñ–æ", callback_data=f"consultation_info_{consultation_slug}"),
            InlineKeyboardButton(text="üìã –ß—Ç–æ –≤—Ö–æ–¥–∏—Ç", callback_data=f"consultation_details_{consultation_slug}"),
            InlineKeyboardButton(text="üí∞ –¶–µ–Ω—ã", callback_data=f"consultation_price_{consultation_slug}")
        ])
    
    # –ö–Ω–æ–ø–∫–∞ –∑–∞–ø–∏—Å–∏
    buttons.append([
        InlineKeyboardButton(text="‚úÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data=f"consultation_book_{consultation_slug}")
    ])
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞–∑–∞–¥
    buttons.append([
        InlineKeyboardButton(text="‚óÄÔ∏è –ö –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è–º", callback_data="consultations"),
        InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="main_menu")
    ])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard


def get_consultation_options_keyboard(consultation_slug: str, options: List) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏"""
    buttons = []
    
    for option in options:
        duration_text = f" ({option.duration})" if option.duration else ""
        buttons.append([InlineKeyboardButton(
            text=f"{option.name}{duration_text} - {option.price:,.0f} ‚ÇΩ",
            callback_data=f"consultation_option_{option.id}"
        )])
    
    buttons.append([
        InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"consultation_{consultation_slug}")
    ])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard


def get_admin_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users")],
        [InlineKeyboardButton(text="üì¶ –ü–æ–∫—É–ø–∫–∏", callback_data="admin_purchases")],
        [InlineKeyboardButton(text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    return keyboard


def get_back_to_admin_keyboard() -> InlineKeyboardMarkup:
    """–ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]
    ])
    return keyboard

