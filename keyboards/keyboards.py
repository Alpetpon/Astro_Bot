from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from typing import List, Optional
from urllib.parse import quote


def get_start_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üë§ –ú–æ–π –ø—É—Ç—å", callback_data="about_me")],
        [InlineKeyboardButton(text="‚ú® –ü–µ—Ä–µ–π—Ç–∏ –≤ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    return keyboard


def get_main_menu_keyboard() -> InlineKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üë§ –ú–æ–π –ø—É—Ç—å", callback_data="about_me")],
        [InlineKeyboardButton(text="üíï –ì–∞–π–¥—ã", callback_data="guides_list")],
        [InlineKeyboardButton(text="üåå –ú–∏–Ω–∏-–∫—É—Ä—Å", callback_data="mini_course")],
        [InlineKeyboardButton(text="üìö –ö—É—Ä—Å—ã", callback_data="courses")],
        [InlineKeyboardButton(text="üé• –í–µ–±–∏–Ω–∞—Ä", callback_data="webinar")],
        [InlineKeyboardButton(text="üí´ –í—Å—Ç—É–ø–∏—Ç—å –≤ –∑–∞–∫—Ä—ã—Ç—ã–π –∫–ª—É–±", callback_data="subscription_channel")],
        [InlineKeyboardButton(text="üîÆ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏", callback_data="consultations")],
        [InlineKeyboardButton(text="üè† –ú–æ–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="my_cabinet")],
        [InlineKeyboardButton(text="‚≠êÔ∏è –û—Ç–∑—ã–≤—ã", callback_data="reviews")]
    ])
    return keyboard


def get_back_keyboard(callback: str = "main_menu", text: str = "‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é") -> InlineKeyboardMarkup:
    """–ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=text, callback_data=callback)]
    ])
    return keyboard


def get_about_me_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ –ú–æ–π –ø—É—Ç—å —Å —Å–æ—Ü. —Å–µ—Ç—è–º–∏"""
    from config import config
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="Telegram –∫–∞–Ω–∞–ª", url=config.TELEGRAM_CHANNEL_URL)],
        [InlineKeyboardButton(text="YouTube", url=config.YOUTUBE_URL)],
        [InlineKeyboardButton(text="Instagram", url=config.INSTAGRAM_URL)],
        [InlineKeyboardButton(text="–ß–∏—Ç–∞—Ç—å –Ω–∞ Sponsr", url=config.VK_URL)],
        [InlineKeyboardButton(text="–î–∑–µ–Ω", url=config.DZEN_URL)],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_navigation")]
    ])
    return keyboard


def get_guides_list_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–ø–∏—Å–∫–∞ –≥–∞–π–¥–æ–≤ (—Ä–∞–±–æ—Ç–∞–µ—Ç —Å JSON)"""
    from data import get_active_guides
    
    buttons = []
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –≥–∞–π–¥—ã –∏–∑ JSON
    guides = get_active_guides()
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø–æ—Ä—è–¥–∫—É
    guides_sorted = sorted(guides, key=lambda g: g.get('order', 0))
    
    for guide in guides_sorted:
        buttons.append([InlineKeyboardButton(
            text=f"{guide.get('emoji') or 'üíù'} {guide['name']}",
            callback_data=f"guide_{guide['id']}"
        )])
    
    buttons.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_navigation")])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard


def get_guide_keyboard(guide_id: str, has_file: bool = False, related_course_slug: str = None) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≥–∞–π–¥–∞"""
    buttons = []
    
    # –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è (–≥–∞–π–¥—ã —Ç–µ–ø–µ—Ä—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ)
    if has_file:
        buttons.append([InlineKeyboardButton(text="üì• –°–∫–∞—á–∞—Ç—å PDF", callback_data=f"download_guide_{guide_id}")])
    else:
        buttons.append([InlineKeyboardButton(text="üì• –°–∫–∞—á–∞—Ç—å PDF", callback_data=f"download_guide_{guide_id}")])
    
    buttons.append([
        InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_navigation"),
        InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="main_menu")
    ])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard


def get_courses_keyboard(courses: List) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ –∫—É—Ä—Å–æ–≤ (—Ä–∞–±–æ—Ç–∞–µ—Ç —Å JSON dict)"""
    buttons = []
    
    for course in courses:
        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∫–∞–∫ –æ–±—ä–µ–∫—Ç—ã –ë–î, —Ç–∞–∫ –∏ —Å–ª–æ–≤–∞—Ä–∏
        name = course.get('name') if isinstance(course, dict) else course.name
        slug = course.get('slug') if isinstance(course, dict) else course.slug
        emoji = course.get('emoji', 'üìö') if isinstance(course, dict) else getattr(course, 'emoji', 'üìö')
        
        buttons.append([InlineKeyboardButton(
            text=f"{emoji} {name}",
            callback_data=f"course_{slug}"
        )])
    
    buttons.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_navigation")])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard


def get_course_detail_keyboard(course_slug: str, show_navigation: bool = True) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ –∫—É—Ä—Å–∞"""
    buttons = []
    
    # –ö–Ω–æ–ø–∫–∏: –°—Ç–æ–∏–º–æ—Å—Ç—å –∏ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è
    buttons.append([
        InlineKeyboardButton(text="üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å", callback_data=f"course_price_{course_slug}")
    ])
    buttons.append([
        InlineKeyboardButton(text="‚úÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data=f"course_register_{course_slug}")
    ])
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞–∑–∞–¥
    buttons.append([
        InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_navigation"),
        InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="main_menu")
    ])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard


def get_tariff_keyboard(course_slug: str, tariffs: List) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞ (—Ä–∞–±–æ—Ç–∞–µ—Ç —Å JSON dict)"""
    buttons = []
    
    for tariff in tariffs:
        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∫–∞–∫ –æ–±—ä–µ–∫—Ç—ã –ë–î, —Ç–∞–∫ –∏ —Å–ª–æ–≤–∞—Ä–∏
        if isinstance(tariff, dict):
            with_support = tariff.get('with_support', False)
            name = tariff.get('name', '')
            price = tariff.get('price', 0)
            tariff_id = tariff.get('id', '')
        else:
            with_support = tariff.with_support
            name = tariff.name
            price = tariff.price
            tariff_id = tariff.id
        
        support_emoji = "üë®‚Äçüè´" if with_support else "üìö"
        buttons.append([InlineKeyboardButton(
            text=f"{support_emoji} {name} - {price} ‚ÇΩ",
            callback_data=f"tariff_{course_slug}_{tariff_id}"
        )])
    
    buttons.append([
        InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_navigation")
    ])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard


def get_payment_keyboard(payment_url: str, payment_id: int, back_callback: str = "back_navigation") -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ–ø–ª–∞—Ç—ã"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=payment_url)],
        [InlineKeyboardButton(text="‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª(–∞)", callback_data=f"check_payment_{payment_id}")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=back_callback)]
    ])
    return keyboard


def get_my_cabinet_keyboard(has_courses: bool = False) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞"""
    buttons = []
    
    if has_courses:
        buttons.append([InlineKeyboardButton(text="üìö –ú–æ–∏ –∫—É—Ä—Å—ã", callback_data="my_courses")])
    
    buttons.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_navigation")])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard


def get_my_courses_keyboard(user_courses: List) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–ø–∏—Å–∫–∞ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –∫—É—Ä—Å–æ–≤"""
    buttons = []
    
    for course_id, course_name in user_courses:
        buttons.append([InlineKeyboardButton(
            text=f"üìñ {course_name}",
            callback_data=f"my_course_{course_id}"
        )])
    
    buttons.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_navigation")])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard


def get_course_progress_keyboard(course_id: int, lessons: List) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ –∫—É—Ä—Å—É"""
    buttons = []
    
    current_module = None
    
    for lesson in lessons:
        if current_module != lesson['module_number']:
            current_module = lesson['module_number']
            buttons.append([InlineKeyboardButton(
                text=f"üìÇ –ú–æ–¥—É–ª—å {current_module}",
                callback_data=f"module_{course_id}_{current_module}"
            )])
        
        status = "‚úÖ" if lesson['is_completed'] else "üîì" if lesson['is_available'] else "üîí"
        buttons.append([InlineKeyboardButton(
            text=f"{status} –£—Ä–æ–∫ {lesson['lesson_number']}: {lesson['title'][:30]}...",
            callback_data=f"lesson_{lesson['id']}"
        )])
    
    buttons.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_navigation")])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard


def get_lesson_keyboard(lesson_id: int, course_id: int, has_materials: bool = False) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É—Ä–æ–∫–∞"""
    buttons = []
    
    if has_materials:
        buttons.append([InlineKeyboardButton(
            text="üìé –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã",
            callback_data=f"lesson_materials_{lesson_id}"
        )])
    
    buttons.append([
        InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —É—Ä–æ–∫", callback_data=f"complete_lesson_{lesson_id}")
    ])
    
    buttons.append([
        InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_navigation")
    ])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard


def get_consultations_keyboard(consultations: List) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π (—Ä–∞–±–æ—Ç–∞–µ—Ç —Å JSON dict)"""
    buttons = []
    
    for consultation in consultations:
        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∫–∞–∫ –æ–±—ä–µ–∫—Ç—ã –ë–î, —Ç–∞–∫ –∏ —Å–ª–æ–≤–∞—Ä–∏
        if isinstance(consultation, dict):
            emoji = consultation.get('emoji', 'üîÆ')
            name = consultation.get('name', '')
            slug = consultation.get('slug', '')
        else:
            emoji = consultation.emoji if consultation.emoji else "üîÆ"
            name = consultation.name
            slug = consultation.slug
        
        buttons.append([InlineKeyboardButton(
            text=f"{emoji} {name}",
            callback_data=f"consultation_{slug}"
        )])
    
    buttons.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_navigation")])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard


def get_consultation_detail_keyboard(consultation_slug: str, consultation_name: str = "", show_navigation: bool = True) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏"""
    from config import config
    
    buttons = []
    
    # –ó–∞–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
    if consultation_name:
        message_text = f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –•–æ—á—É –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é: {consultation_name}"
    else:
        message_text = "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –•–æ—á—É –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é."
    encoded_text = quote(message_text)
    
    # –ö–Ω–æ–ø–∫–∞ –∑–∞–ø–∏—Å–∏ - –≤–µ–¥–µ—Ç –≤ Telegram –∫ –∞—Å—Ç—Ä–æ–ª–æ–≥—É —Å –∑–∞–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    buttons.append([
        InlineKeyboardButton(
            text="‚úÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é", 
            url=f"https://t.me/{config.CONSULTATION_TELEGRAM}?text={encoded_text}"
        )
    ])
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞–∑–∞–¥
    buttons.append([
        InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_navigation"),
        InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="main_menu")
    ])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard


def get_consultation_options_keyboard(consultation_slug: str, options: List) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ (—Ä–∞–±–æ—Ç–∞–µ—Ç —Å JSON dict)"""
    buttons = []
    
    for option in options:
        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∫–∞–∫ –æ–±—ä–µ–∫—Ç—ã –ë–î, —Ç–∞–∫ –∏ —Å–ª–æ–≤–∞—Ä–∏
        if isinstance(option, dict):
            name = option.get('name', '')
            duration = option.get('duration')
            price = option.get('price', 0)
            option_id = option.get('id', '')
        else:
            name = option.name
            duration = option.duration
            price = option.price
            option_id = option.id
        
        duration_text = f" ({duration})" if duration else ""
        buttons.append([InlineKeyboardButton(
            text=f"{name}{duration_text} - {price:,.0f} ‚ÇΩ",
            callback_data=f"consultation_option_{consultation_slug}_{option_id}"
        )])
    
    buttons.append([
        InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"consultation_{consultation_slug}")
    ])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard


def get_admin_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton(text="üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data="admin_users")],
        [InlineKeyboardButton(text="üí≥ –°–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É", callback_data="admin_create_payment_link")],
        [InlineKeyboardButton(text="ü§ñ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º", callback_data="admin_bot_management")],
        [InlineKeyboardButton(text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    return keyboard


def get_bot_management_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥–º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üåå –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∏–Ω–∏-–∫—É—Ä—Å–æ–º", callback_data="admin_mini_course")],
        [InlineKeyboardButton(text="üìö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞–º–∏", callback_data="admin_courses")],
        [InlineKeyboardButton(text="üîÆ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è–º–∏", callback_data="admin_consultations")],
        [InlineKeyboardButton(text="üíï –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–∞–π–¥–∞–º–∏", callback_data="admin_guides")],
        [InlineKeyboardButton(text="‚≠êÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞–º–∏", callback_data="admin_reviews")],
        [InlineKeyboardButton(text="üí´ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏", callback_data="admin_subscriptions")],
        [InlineKeyboardButton(text="üé• –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∏–¥–µ–æ", callback_data="admin_video_settings")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]
    ])
    return keyboard


def get_admin_subscriptions_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫", callback_data="admin_subscriptions_stats")],
        [InlineKeyboardButton(text="üóë –û—á–∏—Å—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="admin_subscriptions_clear")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_bot_management")]
    ])
    return keyboard


def get_back_to_admin_keyboard() -> InlineKeyboardMarkup:
    """–ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]
    ])
    return keyboard


def get_back_to_free_course_keyboard() -> InlineKeyboardMarkup:
    """–ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º –∫—É—Ä—Å–æ–º"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–º—É –∫—É—Ä—Å—É", callback_data="manage_free_course")]
    ])
    return keyboard


def get_video_settings_keyboard(has_welcome_video: bool = False, has_step3_photos: bool = False, has_step3_video: bool = False, has_final_message: bool = False) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤–∏–¥–µ–æ"""
    buttons = []
    
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤–∏–¥–µ–æ
    if has_welcome_video:
        buttons.append([
            InlineKeyboardButton(text="üîÑ –ó–∞–º–µ–Ω–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤–∏–¥–µ–æ", callback_data="video_welcome_upload")
        ])
        buttons.append([
            InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤–∏–¥–µ–æ", callback_data="video_welcome_delete")
        ])
    else:
        buttons.append([
            InlineKeyboardButton(text="‚ûï –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤–∏–¥–µ–æ", callback_data="video_welcome_upload")
        ])
    
    # –§–æ—Ç–æ –¥–ª—è —à–∞–≥–∞ 3 (–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è Sotis)
    if has_step3_photos:
        buttons.append([
            InlineKeyboardButton(text="üîÑ –ó–∞–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ –®–∞–≥–∞ 3", callback_data="video_step3_photos_upload")
        ])
        buttons.append([
            InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ –®–∞–≥–∞ 3", callback_data="video_step3_photos_delete")
        ])
    else:
        buttons.append([
            InlineKeyboardButton(text="‚ûï –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ –®–∞–≥–∞ 3", callback_data="video_step3_photos_upload")
        ])
    
    # –í–∏–¥–µ–æ –¥–ª—è —à–∞–≥–∞ 3
    if has_step3_video:
        buttons.append([
            InlineKeyboardButton(text="üîÑ –ó–∞–º–µ–Ω–∏—Ç—å –≤–∏–¥–µ–æ –®–∞–≥–∞ 3", callback_data="video_step3_video_upload")
        ])
        buttons.append([
            InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –≤–∏–¥–µ–æ –®–∞–≥–∞ 3", callback_data="video_step3_video_delete")
        ])
    else:
        buttons.append([
            InlineKeyboardButton(text="‚ûï –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ –®–∞–≥–∞ 3", callback_data="video_step3_video_upload")
        ])
    
    # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if has_final_message:
        buttons.append([
            InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="free_course_final_message_edit")
        ])
        buttons.append([
            InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="free_course_final_message_delete")
        ])
    else:
        buttons.append([
            InlineKeyboardButton(text="‚úèÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="free_course_final_message_edit")
        ])
    
    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    buttons.append([
        InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")
    ])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard


def get_reviews_navigation_keyboard(page: int = 0, total_pages: int = 1) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –æ—Ç–∑—ã–≤–∞–º —Å —Ñ–æ—Ç–æ"""
    buttons = []
    
    # –ï—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
    if total_pages > 1:
        nav_buttons = []
        
        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        if page > 0:
            nav_buttons.append(InlineKeyboardButton(
                text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
                callback_data=f"reviews_page_{page - 1}"
            ))
        
        # –ö–Ω–æ–ø–∫–∞ "–î–∞–ª–µ–µ"
        if page < total_pages - 1:
            nav_buttons.append(InlineKeyboardButton(
                text="–î–∞–ª–µ–µ ‚ñ∂Ô∏è",
                callback_data=f"reviews_page_{page + 1}"
            ))
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞
        if nav_buttons:
            buttons.append(nav_buttons)
    
    # –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –∫—É—Ä—Å–∞–º
    buttons.append([InlineKeyboardButton(text="üìö –ö—É—Ä—Å—ã", callback_data="courses")])
    
    # –ö–Ω–æ–ø–∫–∞ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    buttons.append([InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard


def get_mini_course_keyboard(show_navigation: bool = True) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –º–∏–Ω–∏-–∫—É—Ä—Å–∞"""
    buttons = []
    
    # –ö–Ω–æ–ø–∫–∏: –°—Ç–æ–∏–º–æ—Å—Ç—å –∏ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è
    buttons.append([
        InlineKeyboardButton(text="üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å", callback_data="mini_course_price")
    ])
    buttons.append([
        InlineKeyboardButton(text="‚úÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –º–∏–Ω–∏-–∫—É—Ä—Å", callback_data="mini_course_register")
    ])
    
    # –ù–∞–∑–∞–¥
    buttons.append([
        InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_navigation")
    ])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard


def get_mini_course_tariff_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞ –º–∏–Ω–∏-–∫—É—Ä—Å–∞"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìö –°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–µ –∏–∑—É—á–µ–Ω–∏–µ ‚Äî 5000 ‚ÇΩ", callback_data="tariff_mini_course_mini-solo")],
        [InlineKeyboardButton(text="üë®‚Äçüè´ –° —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ–º ‚Äî 10000 ‚ÇΩ", callback_data="tariff_mini_course_mini-support")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_navigation")]
    ])
    return keyboard


def get_subscription_channel_keyboard(has_active_subscription: bool = False) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞ —Å –ø–æ–¥–ø–∏—Å–∫–æ–π"""
    buttons = []
    
    if has_active_subscription:
        buttons.append([InlineKeyboardButton(text="üìä –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="subscription_status")])
    else:
        buttons.append([InlineKeyboardButton(text="üí≥ –ö—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data="subscription_buy")])
    
    buttons.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_navigation")])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard


def get_subscription_payment_keyboard(payment_url: str, payment_id: str) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=payment_url)],
        [InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"subscription_check_payment_{payment_id}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="subscription_channel")]
    ])
    return keyboard


def get_subscription_status_keyboard(can_renew: bool = False) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏"""
    buttons = []
    
    if can_renew:
        buttons.append([InlineKeyboardButton(text="üîÑ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="subscription_buy")])
    
    buttons.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_navigation")])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard

