import asyncio
import logging
from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.storage.memory import MemoryStorage

from config import config
from database import mongodb
from handlers.learning_handlers import learning_router

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —É—á–µ–±–Ω–æ–≥–æ –±–æ—Ç–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞ —É—á–µ–±–Ω–æ–≥–æ –±–æ—Ç–∞
    if not config.LEARNING_BOT_TOKEN:
        logger.error("‚ùå LEARNING_BOT_TOKEN –Ω–µ —É–∫–∞–∑–∞–Ω –≤ .env")
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MongoDB (–æ–±—â–∞—è –ë–î —Å –æ—Å–Ω–æ–≤–Ω—ã–º –±–æ—Ç–æ–º)
    logger.info(f"Connecting to MongoDB: {config.MONGODB_URL}")
    await mongodb.connect(config.MONGODB_URL, config.MONGODB_DB_NAME)
    
    # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    from data import get_all_courses, get_mini_course
    
    courses = get_all_courses()
    mini_course = get_mini_course()
    
    mini_course_status = "loaded" if mini_course else "not found"
    logger.info(f"Data loaded: {len(courses)} courses, mini-course: {mini_course_status}")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ —Å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º –¥–ª—è FSM
    bot = Bot(
        token=config.LEARNING_BOT_TOKEN,
        default=DefaultBotProperties(parse_mode=ParseMode.HTML)
    )
    storage = MemoryStorage()
    dp = Dispatcher(storage=storage)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–∞ —É—á–µ–±–Ω–æ–≥–æ –±–æ—Ç–∞
    dp.include_router(learning_router)
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("üéì Learning bot started successfully!")
    try:
        await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())
    finally:
        await mongodb.close()
        await bot.session.close()


if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("Learning bot stopped by user")

