"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–ª–∞—Ç–µ–∂–∞–º–∏ –ø–æ–¥–ø–∏—Å–æ–∫ —á–µ—Ä–µ–∑ YooKassa
"""
import uuid
import logging
from typing import Dict, Any, Optional
from datetime import datetime
from yookassa import Configuration, Payment

from config import config

logger = logging.getLogger(__name__)


class SubscriptionPaymentService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–ª–∞—Ç–µ–∂–∞–º–∏ –ø–æ–¥–ø–∏—Å–æ–∫ —á–µ—Ä–µ–∑ YooKassa"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞"""
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ YooKassa
        Configuration.account_id = config.YOOKASSA_SHOP_ID
        Configuration.secret_key = config.YOOKASSA_SECRET_KEY
        
        self.price = config.SUBSCRIPTION_PRICE
        self.currency = config.SUBSCRIPTION_CURRENCY
        self.days = config.SUBSCRIPTION_DAYS
        
        logger.info(f"SubscriptionPaymentService initialized: {self.price} {self.currency} for {self.days} days")
    
    def create_payment(self, user_id: int, return_url: str = None, customer_email: str = None) -> Dict[str, Any]:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª
        
        Args:
            user_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            return_url: URL –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã
            customer_email: Email –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –¥–ª—è —á–µ–∫–∞
            
        Returns:
            Dict —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–ª–∞—Ç–µ–∂–µ
        """
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
            idempotence_key = str(uuid.uuid4())
            
            # URL –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            if not return_url:
                return_url = "https://t.me/your_bot"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞
            payment_data = {
                "amount": {
                    "value": f"{self.price:.2f}",
                    "currency": self.currency
                },
                "confirmation": {
                    "type": "redirect",
                    "return_url": return_url
                },
                "capture": True,
                "description": f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª –Ω–∞ {self.days} –¥–Ω–µ–π",
                "metadata": {
                    "user_id": str(user_id),
                    "product_type": "channel_subscription"
                },
                "receipt": {
                    "customer": {
                        "email": customer_email or config.RECEIPT_EMAIL
                    },
                    "items": [
                        {
                            "description": f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª –Ω–∞ {self.days} –¥–Ω–µ–π",
                            "quantity": "1.00",
                            "amount": {
                                "value": f"{self.price:.2f}",
                                "currency": self.currency
                            },
                            "vat_code": 1,  # –ù–î–° –Ω–µ –æ–±–ª–∞–≥–∞–µ—Ç—Å—è
                            "payment_mode": "full_payment",
                            "payment_subject": "service"
                        }
                    ]
                }
            }
            
            # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
            payment = Payment.create(payment_data, idempotence_key)
            
            logger.info(f"Payment created: {payment.id} for user {user_id}, email: {customer_email or config.RECEIPT_EMAIL}")
            
            return {
                "payment_id": payment.id,
                "confirmation_url": payment.confirmation.confirmation_url,
                "status": payment.status,
                "amount": float(payment.amount.value),
                "currency": payment.amount.currency
            }
            
        except Exception as e:
            logger.error(f"Error creating payment: {e}")
            raise
    
    def check_payment(self, payment_id: str) -> Dict[str, Any]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
        
        Args:
            payment_id: ID –ø–ª–∞—Ç–µ–∂–∞ –≤ YooKassa
            
        Returns:
            Dict —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç–∞—Ç—É—Å–µ –ø–ª–∞—Ç–µ–∂–∞
        """
        try:
            payment = Payment.find_one(payment_id)
            
            return {
                "payment_id": payment.id,
                "status": payment.status,
                "paid": payment.paid,
                "amount": float(payment.amount.value),
                "currency": payment.amount.currency,
                "created_at": payment.created_at,
                "captured_at": getattr(payment, 'captured_at', None)
            }
            
        except Exception as e:
            logger.error(f"Error checking payment {payment_id}: {e}")
            raise
    
    def get_payment_status_message(self, status: str, paid: bool) -> str:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            status: –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –∏–∑ YooKassa
            paid: –û–ø–ª–∞—á–µ–Ω –ª–∏ –ø–ª–∞—Ç–µ–∂
            
        Returns:
            –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        if status == "succeeded" and paid:
            return "‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
        
        elif status == "pending":
            return """‚è≥ –ü–ª–∞—Ç–µ–∂ –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω

üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:
‚Ä¢ –í—ã –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –æ–ø–ª–∞—Ç—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ YooKassa
‚Ä¢ –ü–ª–∞—Ç–µ–∂ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ

üìå –ß—Ç–æ –¥–µ–ª–∞—Ç—å:
1. –ó–∞–≤–µ—Ä—à–∏—Ç–µ –æ–ø–ª–∞—Ç—É, –µ—Å–ª–∏ –Ω–µ —Å–¥–µ–ª–∞–ª–∏ —ç—Ç–æ–≥–æ
2. –ü–æ–¥–æ–∂–¥–∏—Ç–µ 1-2 –º–∏–Ω—É—Ç—ã
3. –ù–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É' —Å–Ω–æ–≤–∞"""
        
        elif status == "waiting_for_capture":
            return """‚è≥ –ü–ª–∞—Ç–µ–∂ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É' —Å–Ω–æ–≤–∞."""
        
        elif status == "canceled":
            return """‚ùå –ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω

–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É '–ö—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø'."""
        
        else:
            return f"‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞: {status}"

