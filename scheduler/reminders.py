from datetime import datetime, timedelta
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from aiogram import Bot
from sqlalchemy import and_
from sqlalchemy.orm import Session

from config import config
from database import get_db, User, UserProgress, Payment


async def check_inactive_users(bot: Bot):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    db: Session = get_db()
    
    try:
        # –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—É –æ—Ç—Å–µ—á–µ–Ω–∏—è (3 –¥–Ω—è –Ω–∞–∑–∞–¥)
        cutoff_date = datetime.utcnow() - timedelta(days=config.INACTIVITY_DAYS)
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã –±–æ–ª–µ–µ 3 –¥–Ω–µ–π –Ω–∞–∑–∞–¥
        inactive_users = db.query(User).filter(
            and_(
                User.last_activity < cutoff_date,
                User.is_active == True
            )
        ).all()
        
        for user in inactive_users:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫—É–ø–ª–µ–Ω–Ω—ã–µ –∫—É—Ä—Å—ã
            has_courses = db.query(Payment).filter(
                Payment.user_id == user.id,
                Payment.status == 'succeeded'
            ).count() > 0
            
            if not has_courses:
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —É—Ä–æ–∫–∏
            has_incomplete = db.query(UserProgress).filter(
                and_(
                    UserProgress.user_id == user.id,
                    UserProgress.is_available == True,
                    UserProgress.is_completed == False
                )
            ).count() > 0
            
            if has_incomplete:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
                try:
                    message = (
                        "üëã –ü—Ä–∏–≤–µ—Ç!\n\n"
                        "–ó–∞–º–µ—Ç–∏–ª–∏, —á—Ç–æ –≤—ã –¥–∞–≤–Ω–æ –Ω–µ –∑–∞—Ö–æ–¥–∏–ª–∏ –Ω–∞ –∫—É—Ä—Å.\n"
                        "–£ –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —É—Ä–æ–∫–∏ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è! üìö\n\n"
                        "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ–±—É—á–µ–Ω–∏–µ, —á—Ç–æ–±—ã –¥–æ—Å—Ç–∏—á—å –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤! ‚ú®\n\n"
                        "–ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –±–æ—Ç."
                    )
                    
                    await bot.send_message(user.telegram_id, message)
                    print(f"Reminder sent to user {user.telegram_id}")
                
                except Exception as e:
                    print(f"Error sending reminder to user {user.telegram_id}: {e}")
    
    except Exception as e:
        print(f"Error in check_inactive_users: {e}")
    
    finally:
        db.close()


def setup_scheduler(bot: Bot) -> AsyncIOScheduler:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á"""
    scheduler = AsyncIOScheduler(timezone="Europe/Moscow")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 12:00
    scheduler.add_job(
        check_inactive_users,
        'cron',
        hour=12,
        minute=0,
        args=[bot]
    )
    
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –∑–∞–¥–∞—á–∏
    # –ù–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –≤–µ–±–∏–Ω–∞—Ä–∞—Ö –∏ —Ç.–¥.
    
    return scheduler

