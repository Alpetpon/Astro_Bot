"""
–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –¥–ª—è –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –∫–∞–Ω–∞–ª
"""
import logging
from datetime import datetime
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from aiogram import Bot

logger = logging.getLogger(__name__)


async def check_expired_subscriptions(bot: Bot, subscription_service):
    """
    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏—Å—Ç–µ–∫—à–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
    
    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        subscription_service: –°–µ—Ä–≤–∏—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
    """
    try:
        logger.info("Checking expired subscriptions...")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–µ–∫—à–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
        expired_subscriptions = await subscription_service.get_expired_subscriptions()
        
        for subscription in expired_subscriptions:
            user_id = subscription['user_id']
            end_date_str = subscription['end_date'].strftime('%d.%m.%Y %H:%M')
            
            logger.info(f"Processing expired subscription for user {user_id}")
            
            # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–∞–Ω–∞–ª–∞
            kicked = await subscription_service.kick_user_from_channel(user_id)
            
            # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
            deactivated = await subscription_service.deactivate_subscription(subscription['_id'])
            
            if kicked and deactivated:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                try:
                    text = f"""‚è∞ **–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞**

üìÖ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {end_date_str}

–í—ã –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –∫–∞–Ω–∞–ª–∞.
–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –ø—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É!"""
                    
                    await bot.send_message(
                        chat_id=user_id,
                        text=text,
                        parse_mode="Markdown"
                    )
                    
                    logger.info(f"Notification sent to user {user_id}")
                    
                except Exception as e:
                    logger.error(f"Error sending notification to user {user_id}: {e}")
        
        logger.info(f"Processed {len(expired_subscriptions)} expired subscriptions")
        
    except Exception as e:
        logger.error(f"Error checking expired subscriptions: {e}")


async def notify_expiring_3_days(bot: Bot, subscription_service):
    """
    –£–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ 3 –¥–Ω—è –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
    
    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        subscription_service: –°–µ—Ä–≤–∏—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
    """
    try:
        logger.info("Checking subscriptions expiring in 3 days...")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏, –∏—Å—Ç–µ–∫–∞—é—â–∏–µ —á–µ—Ä–µ–∑ 3 –¥–Ω—è
        expiring_subscriptions = await subscription_service.get_expiring_subscriptions(days_before=3)
        
        for subscription in expiring_subscriptions:
            user_id = subscription['user_id']
            end_date_str = subscription['end_date'].strftime('%d.%m.%Y %H:%M')
            
            logger.info(f"Sending 3-day notification to user {user_id}")
            
            try:
                text = f"""‚ö†Ô∏è **–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø–æ–¥–ø–∏—Å–∫–µ**

–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç —Å–∫–æ—Ä–æ!

üìÖ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {end_date_str}
‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: 3 –¥–Ω—è

–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –¥–æ—Å—Ç—É–ø!"""
                
                await bot.send_message(
                    chat_id=user_id,
                    text=text,
                    parse_mode="Markdown"
                )
                
                # –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
                await subscription_service.mark_notification_sent(
                    subscription['_id'],
                    days_before=3
                )
                
                logger.info(f"3-day notification sent to user {user_id}")
                
            except Exception as e:
                logger.error(f"Error sending 3-day notification to user {user_id}: {e}")
        
        logger.info(f"Sent {len(expiring_subscriptions)} 3-day notifications")
        
    except Exception as e:
        logger.error(f"Error notifying expiring subscriptions (3 days): {e}")


async def notify_expiring_1_day(bot: Bot, subscription_service):
    """
    –£–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ 1 –¥–µ–Ω—å –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
    
    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        subscription_service: –°–µ—Ä–≤–∏—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
    """
    try:
        logger.info("Checking subscriptions expiring in 1 day...")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏, –∏—Å—Ç–µ–∫–∞—é—â–∏–µ —á–µ—Ä–µ–∑ 1 –¥–µ–Ω—å
        expiring_subscriptions = await subscription_service.get_expiring_subscriptions(days_before=1)
        
        for subscription in expiring_subscriptions:
            user_id = subscription['user_id']
            end_date_str = subscription['end_date'].strftime('%d.%m.%Y %H:%M')
            
            logger.info(f"Sending 1-day notification to user {user_id}")
            
            try:
                text = f"""üî¥ **–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø–æ–¥–ø–∏—Å–∫–µ**

–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç –∑–∞–≤—Ç—Ä–∞!

üìÖ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {end_date_str}
‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: 1 –¥–µ–Ω—å

–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –¥–æ—Å—Ç—É–ø!"""
                
                await bot.send_message(
                    chat_id=user_id,
                    text=text,
                    parse_mode="Markdown"
                )
                
                # –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
                await subscription_service.mark_notification_sent(
                    subscription['_id'],
                    days_before=1
                )
                
                logger.info(f"1-day notification sent to user {user_id}")
                
            except Exception as e:
                logger.error(f"Error sending 1-day notification to user {user_id}: {e}")
        
        logger.info(f"Sent {len(expiring_subscriptions)} 1-day notifications")
        
    except Exception as e:
        logger.error(f"Error notifying expiring subscriptions (1 day): {e}")


def setup_subscription_scheduler(bot: Bot, subscription_service) -> AsyncIOScheduler:
    """
    –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –¥–ª—è –ø–æ–¥–ø–∏—Å–æ–∫
    
    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        subscription_service: –°–µ—Ä–≤–∏—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
        
    Returns:
        –≠–∫–∑–µ–º–ø–ª—è—Ä –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    """
    scheduler = AsyncIOScheduler(timezone="UTC")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫ - –∫–∞–∂–¥—ã–π —á–∞—Å
    scheduler.add_job(
        check_expired_subscriptions,
        "interval",
        hours=1,
        args=[bot, subscription_service],
        id="check_expired_subscriptions",
        replace_existing=True
    )
    logger.info("‚úÖ Scheduled: check_expired_subscriptions (every hour)")
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞ 3 –¥–Ω—è - –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤
    scheduler.add_job(
        notify_expiring_3_days,
        "interval",
        hours=6,
        args=[bot, subscription_service],
        id="notify_expiring_3_days",
        replace_existing=True
    )
    logger.info("‚úÖ Scheduled: notify_expiring_3_days (every 6 hours)")
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞ 1 –¥–µ–Ω—å - –∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞
    scheduler.add_job(
        notify_expiring_1_day,
        "interval",
        hours=3,
        args=[bot, subscription_service],
        id="notify_expiring_1_day",
        replace_existing=True
    )
    logger.info("‚úÖ Scheduled: notify_expiring_1_day (every 3 hours)")
    
    return scheduler

