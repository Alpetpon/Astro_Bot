"""
–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –¥–ª—è –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –∫–∞–Ω–∞–ª
"""
import logging
from datetime import datetime
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from aiogram import Bot
from config import config

logger = logging.getLogger(__name__)


async def check_expired_subscriptions(bot: Bot, subscription_service):
    """
    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏—Å—Ç–µ–∫—à–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
    
    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        subscription_service: –°–µ—Ä–≤–∏—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
    """
    try:
        logger.info("Checking expired subscriptions...")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–µ–∫—à–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
        expired_subscriptions = await subscription_service.get_expired_subscriptions()
        
        for subscription in expired_subscriptions:
            user_id = subscription['user_id']
            end_date_str = subscription['end_date'].strftime('%d.%m.%Y %H:%M')
            
            logger.info(f"Processing expired subscription for user {user_id}")
            
            # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–∞–Ω–∞–ª–∞
            kicked = await subscription_service.kick_user_from_channel(user_id)
            
            # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
            deactivated = await subscription_service.deactivate_subscription(subscription['_id'])
            
            if kicked and deactivated:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                try:
                    text = f"""‚è∞ **–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞**

üìÖ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {end_date_str}

–í—ã –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –∫–∞–Ω–∞–ª–∞.
–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –ø—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É!"""
                    
                    await bot.send_message(
                        chat_id=user_id,
                        text=text,
                        parse_mode="Markdown"
                    )
                    
                    logger.info(f"Notification sent to user {user_id}")
                    
                except Exception as e:
                    logger.error(f"Error sending notification to user {user_id}: {e}")
        
        logger.info(f"Processed {len(expired_subscriptions)} expired subscriptions")
        
    except Exception as e:
        logger.error(f"Error checking expired subscriptions: {e}")


async def notify_expiring_3_days(bot: Bot, subscription_service):
    """
    –£–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ 3 –¥–Ω—è –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
    
    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        subscription_service: –°–µ—Ä–≤–∏—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
    """
    try:
        logger.info("Checking subscriptions expiring in 3 days...")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏, –∏—Å—Ç–µ–∫–∞—é—â–∏–µ —á–µ—Ä–µ–∑ 3 –¥–Ω—è
        expiring_subscriptions = await subscription_service.get_expiring_subscriptions(days_before=3)
        
        for subscription in expiring_subscriptions:
            user_id = subscription['user_id']
            end_date_str = subscription['end_date'].strftime('%d.%m.%Y %H:%M')
            
            logger.info(f"Sending 3-day notification to user {user_id}")
            
            try:
                text = f"""‚ö†Ô∏è **–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø–æ–¥–ø–∏—Å–∫–µ**

–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç —Å–∫–æ—Ä–æ!

üìÖ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {end_date_str}
‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: 3 –¥–Ω—è

–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –¥–æ—Å—Ç—É–ø!"""
                
                await bot.send_message(
                    chat_id=user_id,
                    text=text,
                    parse_mode="Markdown"
                )
                
                # –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
                await subscription_service.mark_notification_sent(
                    subscription['_id'],
                    days_before=3
                )
                
                logger.info(f"3-day notification sent to user {user_id}")
                
            except Exception as e:
                logger.error(f"Error sending 3-day notification to user {user_id}: {e}")
        
        logger.info(f"Sent {len(expiring_subscriptions)} 3-day notifications")
        
    except Exception as e:
        logger.error(f"Error notifying expiring subscriptions (3 days): {e}")


async def notify_expiring_1_day(bot: Bot, subscription_service):
    """
    –£–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ 1 –¥–µ–Ω—å –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
    
    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        subscription_service: –°–µ—Ä–≤–∏—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
    """
    try:
        logger.info("Checking subscriptions expiring in 1 day...")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏, –∏—Å—Ç–µ–∫–∞—é—â–∏–µ —á–µ—Ä–µ–∑ 1 –¥–µ–Ω—å
        expiring_subscriptions = await subscription_service.get_expiring_subscriptions(days_before=1)
        
        for subscription in expiring_subscriptions:
            user_id = subscription['user_id']
            end_date_str = subscription['end_date'].strftime('%d.%m.%Y %H:%M')
            auto_renew = subscription.get('auto_renew', False)
            
            logger.info(f"Sending 1-day notification to user {user_id}, auto_renew={auto_renew}")
            
            try:
                if auto_renew:
                    text = f"""üîÑ **–ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏**

–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ —Å–∫–æ—Ä–æ –ø—Ä–æ–¥–ª–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!

üìÖ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞: {end_date_str}
üí≥ –ó–∞–≤—Ç—Ä–∞ –±—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–æ —Å–ø–∏—Å–∞–Ω–∏–µ {config.SUBSCRIPTION_PRICE:.0f}‚ÇΩ

–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π."""
                else:
                    text = f"""üî¥ **–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø–æ–¥–ø–∏—Å–∫–µ**

–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç –∑–∞–≤—Ç—Ä–∞!

üìÖ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {end_date_str}
‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: 1 –¥–µ–Ω—å

–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –¥–æ—Å—Ç—É–ø!"""
                
                await bot.send_message(
                    chat_id=user_id,
                    text=text,
                    parse_mode="Markdown"
                )
                
                # –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
                await subscription_service.mark_notification_sent(
                    subscription['_id'],
                    days_before=1
                )
                
                logger.info(f"1-day notification sent to user {user_id}")
                
            except Exception as e:
                logger.error(f"Error sending 1-day notification to user {user_id}: {e}")
        
        logger.info(f"Sent {len(expiring_subscriptions)} 1-day notifications")
        
    except Exception as e:
        logger.error(f"Error notifying expiring subscriptions (1 day): {e}")


async def auto_renew_subscriptions(bot: Bot, subscription_service, yookassa_payment):
    """
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–æ–∫ —Å —Ä–µ–∫—É—Ä—Ä–µ–Ω—Ç–Ω—ã–º–∏ –ø–ª–∞—Ç–µ–∂–∞–º–∏
    
    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        subscription_service: –°–µ—Ä–≤–∏—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
        yookassa_payment: –°–µ—Ä–≤–∏—Å YooKassa –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π
    """
    try:
        logger.info("Checking subscriptions for auto-renewal...")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è
        subscriptions_to_renew = await subscription_service.get_subscriptions_to_renew()
        
        for subscription in subscriptions_to_renew:
            user_id = subscription['user_id']
            subscription_id = subscription['_id']
            payment_method_id = subscription.get('payment_method_id')
            
            logger.info(f"Attempting auto-renewal for user {user_id}, subscription {subscription_id}")
            
            # –ü–æ–º–µ—á–∞–µ–º –ø–æ–ø—ã—Ç–∫—É –ø—Ä–æ–¥–ª–µ–Ω–∏—è
            await subscription_service.mark_renewal_attempted(subscription_id)
            
            try:
                # –°–æ–∑–¥–∞–µ–º —Ä–µ–∫—É—Ä—Ä–µ–Ω—Ç–Ω—ã–π –ø–ª–∞—Ç–µ–∂
                payment_result = yookassa_payment.create_recurrent_payment(
                    amount=config.SUBSCRIPTION_PRICE,
                    description="–ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª",
                    payment_method_id=payment_method_id,
                    metadata={
                        "user_id": user_id,
                        "subscription_id": str(subscription_id),
                        "auto_renewal": True
                    }
                )
                
                if payment_result and payment_result['status'] == 'succeeded':
                    # –ü–ª–∞—Ç–µ–∂ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ - –ø—Ä–æ–¥–ª–µ–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
                    extended = await subscription_service.extend_subscription(
                        subscription_id, 
                        payment_result['id']
                    )
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –ë–î
                    await subscription_service.save_payment(
                        user_id=user_id,
                        payment_id=payment_result['id'],
                        amount=payment_result['amount'],
                        status='succeeded'
                    )
                    
                    if extended:
                        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø—Ä–æ–¥–ª–µ–Ω–∏–∏
                        new_end_date = subscription['end_date']
                        from datetime import timedelta
                        new_end_date = new_end_date + timedelta(days=config.SUBSCRIPTION_DAYS)
                        
                        text = f"""‚úÖ **–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–ª–µ–Ω–∞!**

üí≥ –°–ø–∏—Å–∞–Ω–æ: {config.SUBSCRIPTION_PRICE:.0f}‚ÇΩ
üìÖ –ü–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {new_end_date.strftime('%d.%m.%Y')}

–°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–æ, —á—Ç–æ –æ—Å—Ç–∞–µ—Ç–µ—Å—å —Å –Ω–∞–º–∏! üåü"""
                        
                        await bot.send_message(
                            chat_id=user_id,
                            text=text,
                            parse_mode="Markdown"
                        )
                        
                        logger.info(f"Successfully renewed subscription for user {user_id}")
                    
                else:
                    # –ü–ª–∞—Ç–µ–∂ –Ω–µ –ø—Ä–æ—à–µ–ª - —É–¥–∞–ª—è–µ–º –∏–∑ –∫–∞–Ω–∞–ª–∞ –∏ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º
                    logger.warning(f"Auto-renewal payment failed for user {user_id}")
                    
                    # –£–¥–∞–ª—è–µ–º –∏–∑ –∫–∞–Ω–∞–ª–∞
                    await subscription_service.kick_user_from_channel(user_id)
                    
                    # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
                    await subscription_service.deactivate_subscription(subscription_id)
                    
                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    text = f"""‚ùå **–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É**

–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –ø—Ä–æ—à–ª–æ.

üí≥ –°—É–º–º–∞: {config.SUBSCRIPTION_PRICE:.0f}‚ÇΩ

–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:
‚Ä¢ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –∫–∞—Ä—Ç–µ
‚Ä¢ –ö–∞—Ä—Ç–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞
‚Ä¢ –ò—Å—Ç–µ–∫ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–∞—Ä—Ç—ã

–í—ã –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –∫–∞–Ω–∞–ª–∞. –ß—Ç–æ–±—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø, –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –∑–∞–Ω–æ–≤–æ."""
                    
                    await bot.send_message(
                        chat_id=user_id,
                        text=text,
                        parse_mode="Markdown"
                    )
                    
                    logger.info(f"User {user_id} removed from channel due to failed payment")
                    
            except Exception as e:
                logger.error(f"Error processing auto-renewal for user {user_id}: {e}")
                
                # –ü—Ä–∏ –æ—à–∏–±–∫–µ —É–¥–∞–ª—è–µ–º –∏–∑ –∫–∞–Ω–∞–ª–∞
                await subscription_service.kick_user_from_channel(user_id)
                await subscription_service.deactivate_subscription(subscription_id)
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—à–∏–±–∫–µ
                try:
                    text = "‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏**\n\n–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –ø—Ä–æ–¥–ª–µ–Ω–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –∑–∞–Ω–æ–≤–æ."
                    await bot.send_message(
                        chat_id=user_id,
                        text=text,
                        parse_mode="Markdown"
                    )
                except:
                    pass
        
        logger.info(f"Processed {len(subscriptions_to_renew)} subscriptions for auto-renewal")
        
    except Exception as e:
        logger.error(f"Error in auto_renew_subscriptions: {e}")


def setup_subscription_scheduler(bot: Bot, subscription_service, yookassa_payment=None) -> AsyncIOScheduler:
    """
    –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –¥–ª—è –ø–æ–¥–ø–∏—Å–æ–∫
    
    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        subscription_service: –°–µ—Ä–≤–∏—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
        yookassa_payment: –°–µ—Ä–≤–∏—Å YooKassa (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –¥–ª—è –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è)
        
    Returns:
        –≠–∫–∑–µ–º–ø–ª—è—Ä –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    """
    scheduler = AsyncIOScheduler(timezone="UTC")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫ - –∫–∞–∂–¥—ã–π —á–∞—Å
    scheduler.add_job(
        check_expired_subscriptions,
        "interval",
        hours=1,
        args=[bot, subscription_service],
        id="check_expired_subscriptions",
        replace_existing=True
    )
    logger.info("‚úÖ Scheduled: check_expired_subscriptions (every hour)")
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞ 3 –¥–Ω—è - –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤
    scheduler.add_job(
        notify_expiring_3_days,
        "interval",
        hours=6,
        args=[bot, subscription_service],
        id="notify_expiring_3_days",
        replace_existing=True
    )
    logger.info("‚úÖ Scheduled: notify_expiring_3_days (every 6 hours)")
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞ 1 –¥–µ–Ω—å - –∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞
    scheduler.add_job(
        notify_expiring_1_day,
        "interval",
        hours=3,
        args=[bot, subscription_service],
        id="notify_expiring_1_day",
        replace_existing=True
    )
    logger.info("‚úÖ Scheduled: notify_expiring_1_day (every 3 hours)")
    
    # –ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–æ–∫ - –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞
    if yookassa_payment:
        scheduler.add_job(
            auto_renew_subscriptions,
            "interval",
            hours=2,
            args=[bot, subscription_service, yookassa_payment],
            id="auto_renew_subscriptions",
            replace_existing=True
        )
        logger.info("‚úÖ Scheduled: auto_renew_subscriptions (every 2 hours)")
    
    return scheduler

