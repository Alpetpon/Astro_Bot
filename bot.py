import asyncio
import logging
from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.storage.memory import MemoryStorage

from config import config
from database import mongodb
from handlers import (
    start_router,
    menu_router,
    courses_router,
    consultations_router,
    cabinet_router,
    payments_router,
    reviews_router,
    admin_router,
    admin_guides_router,
    admin_reviews_router,
    admin_video_router,
    admin_mini_course_router,
    subscription_router,
    admin_subscriptions_router
)
from handlers.learning_handlers import learning_router
from middlewares import NavigationMiddleware
from scheduler.payment_checker import start_payment_checker, stop_payment_checker


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


async def run_sales_bot():
    """–§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞ (–≤–æ—Ä–æ–Ω–∫–∞ –ø—Ä–æ–¥–∞–∂)"""
    logger.info("Initializing sales bot...")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ —Å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º –¥–ª—è FSM
    bot = Bot(
        token=config.BOT_TOKEN,
        default=DefaultBotProperties(parse_mode=ParseMode.HTML)
    )
    storage = MemoryStorage()
    dp = Dispatcher(storage=storage)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è middleware –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    dp.callback_query.middleware(NavigationMiddleware())
    logger.info("Navigation middleware registered")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤ –ø–æ–¥–ø–∏—Å–æ–∫
    logger.info("Initializing subscription services...")
    from services.subscription_service import SubscriptionService
    from services.subscription_payment_service import SubscriptionPaymentService
    from handlers import subscription_handlers, admin_subscriptions
    
    subscription_service = SubscriptionService(bot)
    payment_service = SubscriptionPaymentService()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö
    subscription_handlers.init_services(subscription_service, payment_service)
    admin_subscriptions.init_service(subscription_service)
    
    logger.info("‚úÖ Subscription services initialized")
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–æ–≤
    dp.include_router(start_router)
    dp.include_router(admin_router)
    dp.include_router(admin_guides_router)
    dp.include_router(admin_reviews_router)
    dp.include_router(admin_video_router)
    dp.include_router(admin_mini_course_router)
    dp.include_router(admin_subscriptions_router)
    dp.include_router(subscription_router)
    dp.include_router(menu_router)
    dp.include_router(courses_router)
    dp.include_router(consultations_router)
    dp.include_router(reviews_router)
    dp.include_router(payments_router)
    dp.include_router(cabinet_router)
    
    # –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
    logger.info("Starting payment checker...")
    payment_checker = await start_payment_checker(bot, check_interval=60)
    logger.info("‚úÖ –ü–ª–∞—Ç–µ–∂–∏ –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è—Ç—å—Å—è –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥")
    
    # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–æ–∫
    logger.info("Starting subscription scheduler...")
    from scheduler.subscription_tasks import setup_subscription_scheduler
    subscription_scheduler = setup_subscription_scheduler(bot, subscription_service)
    subscription_scheduler.start()
    logger.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø–æ–¥–ø–∏—Å–æ–∫ –∑–∞–ø—É—â–µ–Ω")
    
    # –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞ (–≤–æ—Ä–æ–Ω–∫–∞ –ø—Ä–æ–¥–∞–∂)
    logger.info("üíº Sales bot started successfully!")
    try:
        await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())
    finally:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–ª–∞—Ç–µ–∂–µ–π
        await stop_payment_checker()
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø–æ–¥–ø–∏—Å–æ–∫
        if subscription_scheduler.running:
            subscription_scheduler.shutdown()
            logger.info("Subscription scheduler stopped")
        
        await bot.session.close()


async def run_learning_bot():
    """–§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —É—á–µ–±–Ω–æ–≥–æ –±–æ—Ç–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞ —É—á–µ–±–Ω–æ–≥–æ –±–æ—Ç–∞
    if not config.LEARNING_BOT_TOKEN:
        logger.error("‚ùå LEARNING_BOT_TOKEN –Ω–µ —É–∫–∞–∑–∞–Ω –≤ .env - —É—á–µ–±–Ω—ã–π –±–æ—Ç –Ω–µ –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω")
        return
    
    logger.info("Initializing learning bot...")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —É—á–µ–±–Ω–æ–≥–æ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
    learning_bot = Bot(
        token=config.LEARNING_BOT_TOKEN,
        default=DefaultBotProperties(parse_mode=ParseMode.HTML)
    )
    learning_storage = MemoryStorage()
    learning_dp = Dispatcher(storage=learning_storage)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–∞ —É—á–µ–±–Ω–æ–≥–æ –±–æ—Ç–∞
    learning_dp.include_router(learning_router)
    
    # –ó–∞–ø—É—Å–∫ —É—á–µ–±–Ω–æ–≥–æ –±–æ—Ç–∞
    logger.info("üéì Learning bot started successfully!")
    try:
        await learning_dp.start_polling(learning_bot, allowed_updates=learning_dp.resolve_used_update_types())
    finally:
        await learning_bot.session.close()


async def fix_mongodb_index():
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ payment_id –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º"""
    try:
        db = mongodb.get_database()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–Ω–¥–µ–∫—Å–æ–≤
        indexes = await db.payments.index_information()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–µ–∫—Å payment_id_1
        if 'payment_id_1' in indexes:
            index_info = indexes['payment_id_1']
            
            # –ï—Å–ª–∏ –∏–Ω–¥–µ–∫—Å –Ω–µ sparse - —É–¥–∞–ª—è–µ–º –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º
            if not index_info.get('sparse', False):
                logger.info("=" * 60)
                logger.info("üîß –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±–Ω–∞—Ä—É–∂–µ–Ω —Å—Ç–∞—Ä—ã–π non-sparse –∏–Ω–¥–µ–∫—Å payment_id")
                logger.info("üîß –£–¥–∞–ª—è–µ–º –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å...")
                logger.info("=" * 60)
                
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∏–Ω–¥–µ–∫—Å
                await db.payments.drop_index('payment_id_1')
                logger.info("‚úÖ –°—Ç–∞—Ä—ã–π –∏–Ω–¥–µ–∫—Å payment_id —É–¥–∞–ª–µ–Ω")
                
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π sparse –∏–Ω–¥–µ–∫—Å
                await db.payments.create_index("payment_id", unique=True, sparse=True)
                logger.info("‚úÖ –ù–æ–≤—ã–π sparse –∏–Ω–¥–µ–∫—Å payment_id —Å–æ–∑–¥–∞–Ω")
                logger.info("=" * 60)
            else:
                logger.info("‚úì –ò–Ω–¥–µ–∫—Å payment_id –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π (sparse), –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
        else:
            logger.info("‚ö†Ô∏è –ò–Ω–¥–µ–∫—Å payment_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –∏–Ω–¥–µ–∫—Å–∞ payment_id: {e}")
        raise


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - –∑–∞–ø—É—Å–∫–∞–µ—Ç –æ–±–∞ –±–æ—Ç–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ"""
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MongoDB (–æ–±—â–∞—è –¥–ª—è –æ–±–æ–∏—Ö –±–æ—Ç–æ–≤)
        logger.info(f"Connecting to MongoDB: {config.MONGODB_URL}")
        await mongodb.connect(config.MONGODB_URL, config.MONGODB_DB_NAME)
        
        # –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
        logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ MongoDB...")
        await fix_mongodb_index()
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        from data import get_all_courses, get_all_consultations, get_all_guides, get_mini_course
        
        courses = get_all_courses()
        consultations = get_all_consultations()
        guides = get_all_guides()
        mini_course = get_mini_course()
        
        mini_course_status = "loaded" if mini_course else "not found"
        logger.info(f"Data loaded: {len(courses)} courses, {len(consultations)} consultations, {len(guides)} guides, mini-course: {mini_course_status}")
        
        logger.info("=" * 60)
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –æ–±–æ–∏—Ö –±–æ—Ç–æ–≤...")
        logger.info("=" * 60)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–∞ –±–æ—Ç–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        await asyncio.gather(
            run_sales_bot(),
            run_learning_bot()
        )
    finally:
        await mongodb.close()
        logger.info("MongoDB connection closed")


if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("Bots stopped by user")

