"""
MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ —É—Ç–∏–ª–∏—Ç—ã
"""
from motor.motor_asyncio import AsyncIOMotorClient, AsyncIOMotorDatabase
from typing import Optional
import logging

logger = logging.getLogger(__name__)


class MongoDB:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å MongoDB"""
    
    client: Optional[AsyncIOMotorClient] = None
    db: Optional[AsyncIOMotorDatabase] = None
    
    @classmethod
    async def connect(cls, connection_string: str, database_name: str = "astro_bot"):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB"""
        try:
            cls.client = AsyncIOMotorClient(connection_string)
            cls.db = cls.client[database_name]
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            await cls.client.admin.command('ping')
            logger.info(f"‚úÖ MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∞: {database_name}")
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤
            await cls._create_indexes()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB: {e}")
            raise
    
    @classmethod
    async def _create_indexes(cls):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–π"""
        if cls.db is None:
            return
        
        try:
            # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ payment_id (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
            await cls._fix_payment_id_index()
            
            # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è users
            await cls.db.users.create_index("telegram_id", unique=True)
            await cls.db.users.create_index("username")
            await cls.db.users.create_index("last_activity")
            
            # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è payments
            await cls.db.payments.create_index("user_id")
            await cls.db.payments.create_index("payment_id", unique=True, sparse=True)
            await cls.db.payments.create_index("status")
            await cls.db.payments.create_index("created_at")
            
            # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è subscriptions (–ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª)
            await cls.db.subscriptions.create_index("user_id")
            await cls.db.subscriptions.create_index("is_active")
            await cls.db.subscriptions.create_index("end_date")
            await cls.db.subscriptions.create_index([("user_id", 1), ("is_active", 1)])
            
            # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è subscription_payments (–ø–ª–∞—Ç–µ–∂–∏ –∑–∞ –ø–æ–¥–ø–∏—Å–∫–∏)
            await cls.db.subscription_payments.create_index("payment_id", unique=True)
            await cls.db.subscription_payments.create_index("user_id")
            await cls.db.subscription_payments.create_index("status")
            
            # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è bot_settings
            await cls.db.bot_settings.create_index("setting_key", unique=True)
            
            logger.info("‚úÖ –ò–Ω–¥–µ–∫—Å—ã —Å–æ–∑–¥–∞–Ω—ã")
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤: {e}")
    
    @classmethod
    async def _fix_payment_id_index(cls):
        """
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ payment_id
        –£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–π non-sparse –∏–Ω–¥–µ–∫—Å –∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π sparse –∏–Ω–¥–µ–∫—Å
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–Ω–¥–µ–∫—Å–æ–≤
            indexes = await cls.db.payments.index_information()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–µ–∫—Å payment_id_1
            if 'payment_id_1' in indexes:
                index_info = indexes['payment_id_1']
                
                # –ï—Å–ª–∏ –∏–Ω–¥–µ–∫—Å –Ω–µ sparse - —É–¥–∞–ª—è–µ–º –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º
                if not index_info.get('sparse', False):
                    logger.info("üîß –û–±–Ω–∞—Ä—É–∂–µ–Ω —Å—Ç–∞—Ä—ã–π non-sparse –∏–Ω–¥–µ–∫—Å payment_id. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º...")
                    
                    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∏–Ω–¥–µ–∫—Å
                    await cls.db.payments.drop_index('payment_id_1')
                    logger.info("‚úÖ –°—Ç–∞—Ä—ã–π –∏–Ω–¥–µ–∫—Å payment_id —É–¥–∞–ª–µ–Ω")
                    
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π sparse –∏–Ω–¥–µ–∫—Å
                    await cls.db.payments.create_index("payment_id", unique=True, sparse=True)
                    logger.info("‚úÖ –ù–æ–≤—ã–π sparse –∏–Ω–¥–µ–∫—Å payment_id —Å–æ–∑–¥–∞–Ω")
                else:
                    logger.debug("‚úì –ò–Ω–¥–µ–∫—Å payment_id —É–∂–µ sparse, –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –∏–Ω–¥–µ–∫—Å–∞ payment_id: {e}")
    
    @classmethod
    async def close(cls):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        if cls.client:
            cls.client.close()
            logger.info("MongoDB –æ—Ç–∫–ª—é—á–µ–Ω–∞")
    
    @classmethod
    def get_database(cls) -> AsyncIOMotorDatabase:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        if cls.db is None:
            raise RuntimeError("MongoDB –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞. –í—ã–∑–æ–≤–∏—Ç–µ connect() —Å–Ω–∞—á–∞–ª–∞.")
        return cls.db


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
mongodb = MongoDB()


async def get_db() -> AsyncIOMotorDatabase:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º)"""
    return mongodb.get_database()

