from datetime import datetime
from aiogram import Router, F
from aiogram.types import CallbackQuery
from sqlalchemy.orm import Session

from database import (
    get_db, User, Course, Tariff, Payment, 
    UserProgress, Lesson, Consultation, ConsultationOption
)
from keyboards import get_payment_keyboard, get_back_keyboard
from payments import YooKassaPayment

router = Router()
yookassa = YooKassaPayment()


@router.callback_query(F.data.startswith("tariff_"))
async def process_tariff_selection(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞"""
    tariff_id = int(callback.data.replace("tariff_", ""))
    
    db: Session = get_db()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–∞—Ä–∏—Ñ –∏ –∫—É—Ä—Å
        tariff = db.query(Tariff).filter(Tariff.id == tariff_id).first()
        
        if not tariff:
            await callback.answer("–¢–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        course = db.query(Course).filter(Course.id == tariff.course_id).first()
        user = db.query(User).filter(User.telegram_id == callback.from_user.id).first()
        
        if not course or not user:
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞", show_alert=True)
            return
        
        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –±–∞–∑–µ
        payment = Payment(
            user_id=user.id,
            course_id=course.id,
            tariff_id=tariff.id,
            amount=tariff.price,
            status='pending'
        )
        db.add(payment)
        db.commit()
        db.refresh(payment)
        
        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –ÆKassa
        description = f"–û–ø–ª–∞—Ç–∞ –∫—É—Ä—Å–∞ ¬´{course.name}¬ª - {tariff.name}"
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ –¥–ª—è return_url
        bot_info = await callback.bot.get_me()
        return_url = f"https://t.me/{bot_info.username}" if bot_info.username else "https://t.me"
        
        payment_result = yookassa.create_payment(
            amount=tariff.price,
            description=description,
            return_url=return_url
        )
        
        if not payment_result:
            payment.status = 'failed'
            db.commit()
            await callback.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_back_keyboard("courses")
            )
            await callback.answer()
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–ª–∞—Ç–µ–∂ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –ÆKassa
        payment.payment_id = payment_result['id']
        payment.confirmation_url = payment_result['confirmation_url']
        db.commit()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ
        support_text = "‚úÖ –° —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ–º –∫—É—Ä–∞—Ç–æ—Ä–∞" if tariff.with_support else "üìö –°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ"
        
        text = f"üí≥ **–û–ø–ª–∞—Ç–∞ –∫—É—Ä—Å–∞**\n\n"
        text += f"**–ö—É—Ä—Å:** {course.name}\n"
        text += f"**–¢–∞—Ä–∏—Ñ:** {tariff.name}\n"
        text += f"**–§–æ—Ä–º–∞—Ç:** {support_text}\n"
        text += f"**–°—Ç–æ–∏–º–æ—Å—Ç—å:** {tariff.price} ‚ÇΩ\n\n"
        text += "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–û–ø–ª–∞—Ç–∏—Ç—å¬ª –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–ø–ª–∞—Ç—ã.\n"
        text += "–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –¥–æ—Å—Ç—É–ø –∫ –∫—É—Ä—Å—É –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!"
        
        await callback.message.edit_text(
            text,
            reply_markup=get_payment_keyboard(payment_result['confirmation_url'], payment.id),
            parse_mode="Markdown"
        )
        await callback.answer()
    
    except Exception as e:
        print(f"Error in process_tariff_selection: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
    
    finally:
        db.close()


@router.callback_query(F.data.startswith("consultation_option_"))
async def process_consultation_option_selection(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞"""
    option_id = int(callback.data.replace("consultation_option_", ""))
    
    db: Session = get_db()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
        option = db.query(ConsultationOption).filter(ConsultationOption.id == option_id).first()
        
        if not option:
            await callback.answer("–í–∞—Ä–∏–∞–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        consultation = db.query(Consultation).filter(Consultation.id == option.consultation_id).first()
        user = db.query(User).filter(User.telegram_id == callback.from_user.id).first()
        
        if not consultation or not user:
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞", show_alert=True)
            return
        
        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –±–∞–∑–µ
        payment = Payment(
            user_id=user.id,
            consultation_id=consultation.id,
            consultation_option_id=option.id,
            amount=option.price,
            status='pending',
            product_type='consultation'
        )
        db.add(payment)
        db.commit()
        db.refresh(payment)
        
        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –ÆKassa
        description = f"–û–ø–ª–∞—Ç–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ ¬´{consultation.name}¬ª - {option.name}"
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ –¥–ª—è return_url
        bot_info = await callback.bot.get_me()
        return_url = f"https://t.me/{bot_info.username}" if bot_info.username else "https://t.me"
        
        payment_result = yookassa.create_payment(
            amount=option.price,
            description=description,
            return_url=return_url
        )
        
        if not payment_result:
            payment.status = 'failed'
            db.commit()
            await callback.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_back_keyboard("consultations")
            )
            await callback.answer()
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–ª–∞—Ç–µ–∂ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –ÆKassa
        payment.payment_id = payment_result['id']
        payment.confirmation_url = payment_result['confirmation_url']
        db.commit()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ
        text = f"üí≥ **–û–ø–ª–∞—Ç–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏**\n\n"
        text += f"**–£—Å–ª—É–≥–∞:** {consultation.name}\n"
        text += f"**–í–∞—Ä–∏–∞–Ω—Ç:** {option.name}\n"
        if option.duration:
            text += f"**–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** {option.duration}\n"
        text += f"**–°—Ç–æ–∏–º–æ—Å—Ç—å:** {option.price:,.0f} ‚ÇΩ\n\n"
        text += "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–û–ø–ª–∞—Ç–∏—Ç—å¬ª –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–ø–ª–∞—Ç—ã.\n"
        text += "–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –∞—Å—Ç—Ä–æ–ª–æ–≥ –¥–ª—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤—Å—Ç—Ä–µ—á–∏!"
        
        await callback.message.edit_text(
            text,
            reply_markup=get_payment_keyboard(payment_result['confirmation_url'], payment.id),
            parse_mode="Markdown"
        )
        await callback.answer()
    
    except Exception as e:
        print(f"Error in process_consultation_option_selection: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
    
    finally:
        db.close()


@router.callback_query(F.data.startswith("check_payment_"))
async def check_payment_status(callback: CallbackQuery):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞"""
    payment_id = int(callback.data.replace("check_payment_", ""))
    
    db: Session = get_db()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞—Ç–µ–∂ –∏–∑ –±–∞–∑—ã
        payment = db.query(Payment).filter(Payment.id == payment_id).first()
        
        if not payment:
            await callback.answer("–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ —É–∂–µ —É—Å–ø–µ—à–µ–Ω
        if payment.status == 'succeeded':
            await callback.answer("‚úÖ –ü–ª–∞—Ç–µ–∂ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ÆKassa
        if payment.payment_id:
            payment_status = yookassa.get_payment_status(payment.payment_id)
            
            if payment_status and payment_status['status'] == 'succeeded':
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–ª–∞—Ç–µ–∂
                payment.status = 'succeeded'
                payment.paid_at = datetime.utcnow()
                db.commit()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –ø—Ä–æ–¥—É–∫—Ç–∞
                if payment.product_type == 'guide':
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–∞–π–¥
                    await send_guide_to_user(callback, payment)
                elif payment.product_type == 'consultation':
                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –æ–ø–ª–∞—Ç–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
                    consultation = db.query(Consultation).filter(Consultation.id == payment.consultation_id).first()
                    
                    success_text = "‚úÖ **–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–∞!**\n\n"
                    success_text += f"{consultation.emoji} –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è ¬´{consultation.name}¬ª –æ–ø–ª–∞—á–µ–Ω–∞!\n\n"
                    success_text += "üìû –í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –∞—Å—Ç—Ä–æ–ª–æ–≥ –¥–ª—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤—Å—Ç—Ä–µ—á–∏.\n\n"
                    success_text += "–°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–≤–µ—Ä–∏–µ! üåü"
                    
                    await callback.message.edit_text(
                        success_text,
                        reply_markup=get_back_keyboard("main_menu", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
                        parse_mode="Markdown"
                    )
                    await callback.answer("‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!", show_alert=True)
                else:
                    # –í—ã–¥–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫—É—Ä—Å—É
                    await grant_course_access(db, payment)
                    
                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    course = db.query(Course).filter(Course.id == payment.course_id).first()
                    tariff = db.query(Tariff).filter(Tariff.id == payment.tariff_id).first()
                    
                    success_text = "‚úÖ **–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–∞!**\n\n"
                    success_text += f"–í–∞–º –æ—Ç–∫—Ä—ã—Ç –¥–æ—Å—Ç—É–ø –∫ –∫—É—Ä—Å—É ¬´{course.name}¬ª\n\n"
                    
                    if tariff.with_support:
                        success_text += "üë®‚Äçüè´ –í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –∫—É—Ä–∞—Ç–æ—Ä.\n\n"
                    
                    success_text += "üìö –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ ¬´–ú–æ–π –∫–∞–±–∏–Ω–µ—Ç¬ª –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—É—á–µ–Ω–∏—è!"
                    
                    await callback.message.edit_text(
                        success_text,
                        reply_markup=get_back_keyboard("my_cabinet", "üè† –ú–æ–π –∫–∞–±–∏–Ω–µ—Ç"),
                        parse_mode="Markdown"
                    )
                    await callback.answer("‚úÖ –î–æ—Å—Ç—É–ø –æ—Ç–∫—Ä—ã—Ç!", show_alert=True)
            else:
                await callback.answer("‚è≥ –ü–ª–∞—Ç–µ–∂ –µ—â–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.", show_alert=True)
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞", show_alert=True)
    
    except Exception as e:
        print(f"Error in check_payment_status: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞", show_alert=True)
    
    finally:
        db.close()


async def send_guide_to_user(callback: CallbackQuery, payment: Payment):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –≥–∞–π–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã"""
    from config import config
    from aiogram.types import FSInputFile
    import os
    
    try:
        # –ù–∞—Ö–æ–¥–∏–º –≥–∞–π–¥ –ø–æ product_id
        guide_id = payment.product_id
        guide = next((g for g in config.GUIDES if g['id'] == guide_id), None)
        
        if not guide:
            await callback.message.answer(
                "‚úÖ **–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–∞!**\n\n"
                "–ì–∞–π–¥ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤–∞–º –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–∏–Ω—É—Ç.\n"
                "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.",
                parse_mode="Markdown"
            )
            return
        
        guide_file = guide.get('file_id', '')
        
        if not guide_file:
            await callback.message.answer(
                "‚úÖ **–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–∞!**\n\n"
                "–ì–∞–π–¥ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤–∞–º –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–∏–Ω—É—Ç.\n"
                "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.",
                parse_mode="Markdown"
            )
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≥–∞–π–¥–∞
        if os.path.exists(guide_file):
            # –ï—Å–ª–∏ —ç—Ç–æ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
            document = FSInputFile(guide_file)
            await callback.message.answer_document(
                document=document,
                caption=f"‚úÖ **–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–∞!**\n\n{guide['emoji']} –í–∞—à {guide['name']} –≥–æ—Ç–æ–≤!\n\n–ñ–µ–ª–∞–µ–º –≤–∞–º –≥–∞—Ä–º–æ–Ω–∏—á–Ω—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π! üåü",
                parse_mode="Markdown"
            )
            await callback.message.answer(
                "–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∏–∑—É—á–µ–Ω–∏—è! üìñ",
                reply_markup=get_back_keyboard("main_menu", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            )
        else:
            # –ï—Å–ª–∏ file_id Telegram
            await callback.message.answer_document(
                document=guide_file,
                caption=f"‚úÖ **–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–∞!**\n\n{guide['emoji']} –í–∞—à {guide['name']} –≥–æ—Ç–æ–≤!\n\n–ñ–µ–ª–∞–µ–º –≤–∞–º –≥–∞—Ä–º–æ–Ω–∏—á–Ω—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π! üåü",
                parse_mode="Markdown"
            )
            await callback.message.answer(
                "–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∏–∑—É—á–µ–Ω–∏—è! üìñ",
                reply_markup=get_back_keyboard("main_menu", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            )
        
        await callback.answer("‚úÖ –ì–∞–π–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!", show_alert=True)
        
    except Exception as e:
        print(f"Error sending guide: {e}")
        await callback.message.answer(
            "‚úÖ **–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–∞!**\n\n"
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.",
            parse_mode="Markdown",
            reply_markup=get_back_keyboard("main_menu", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        )


async def grant_course_access(db: Session, payment: Payment):
    """–í—ã–¥–∞—á–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫—É—Ä—Å—É –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É—Ä–æ–∫–∏ –∫—É—Ä—Å–∞
        lessons = db.query(Lesson).filter(
            Lesson.course_id == payment.course_id
        ).order_by(Lesson.module_number, Lesson.lesson_number).all()
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è –≤—Å–µ—Ö —É—Ä–æ–∫–æ–≤
        for idx, lesson in enumerate(lessons):
            # –ü–µ—Ä–≤—ã–π —É—Ä–æ–∫ –ø–µ—Ä–≤–æ–≥–æ –º–æ–¥—É–ª—è –¥–æ—Å—Ç—É–ø–µ–Ω —Å—Ä–∞–∑—É
            is_available = (idx == 0)
            
            progress = UserProgress(
                user_id=payment.user_id,
                lesson_id=lesson.id,
                course_id=payment.course_id,
                is_available=is_available,
                is_completed=False
            )
            db.add(progress)
        
        db.commit()
        print(f"Access granted for user {payment.user_id} to course {payment.course_id}")
    
    except Exception as e:
        print(f"Error in grant_course_access: {e}")
        db.rollback()

