import logging
from datetime import datetime
from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from bson import ObjectId

from database import get_db, User, Payment, UserRepository, PaymentRepository
from data import get_course_by_slug, get_tariff_by_id, get_consultation_by_slug, get_consultation_option, get_guide_by_id, get_mini_course, get_mini_course_tariff
from keyboards import get_payment_keyboard, get_back_keyboard
from payments import YooKassaPayment

logger = logging.getLogger(__name__)
router = Router()
yookassa = YooKassaPayment()


@router.callback_query(F.data.startswith("tariff_"))
async def process_tariff_selection(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞"""
    logger.info(f"User {callback.from_user.id} selecting tariff: {callback.data}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –º–∏–Ω–∏-–∫—É—Ä—Å –∏–ª–∏ –æ–±—ã—á–Ω—ã–π –∫—É—Ä—Å
    if callback.data.startswith("tariff_mini_course_"):
        # –§–æ—Ä–º–∞—Ç: tariff_mini_course_{tariff_id}
        course_slug = "mini_course"
        tariff_id = callback.data.replace("tariff_mini_course_", "")
    else:
        # –§–æ—Ä–º–∞—Ç: tariff_{course_slug}_{tariff_id}
        parts = callback.data.split("_", 2)
        if len(parts) < 3:
            logger.warning(f"Invalid tariff callback data format: {callback.data}")
            await callback.answer("–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
            return
        
        course_slug = parts[1]
        tariff_id = parts[2]
    
    db = await get_db()
    user_repo = UserRepository(db)
    payment_repo = PaymentRepository(db)
    
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —ç—Ç–æ –º–∏–Ω–∏-–∫—É—Ä—Å –∏–ª–∏ –æ–±—ã—á–Ω—ã–π –∫—É—Ä—Å
        if course_slug == "mini_course":
            # –ü–æ–ª—É—á–∞–µ–º –º–∏–Ω–∏-–∫—É—Ä—Å –∏ —Ç–∞—Ä–∏—Ñ
            mini_course = get_mini_course()
            if not mini_course or not mini_course.get('is_active', False):
                logger.warning("Mini course not found or inactive")
                await callback.answer("–ú–∏–Ω–∏-–∫—É—Ä—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
                return
            
            tariff = get_mini_course_tariff(tariff_id)
            if not tariff:
                logger.warning(f"Mini course tariff not found: {tariff_id}")
                await callback.answer("–¢–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return
            
            product_name = f"{mini_course.get('title', '–ú–∏–Ω–∏-–∫—É—Ä—Å')} {mini_course.get('subtitle', '')}"
            product_type = 'mini_course'
        else:
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—ã—á–Ω—ã–π –∫—É—Ä—Å –∏ —Ç–∞—Ä–∏—Ñ –∏–∑ JSON
            course = get_course_by_slug(course_slug)
            if not course:
                logger.warning(f"Course not found: {course_slug}")
                await callback.answer("–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return
            
            tariff = get_tariff_by_id(course_slug, tariff_id)
            if not tariff:
                logger.warning(f"Tariff not found: {tariff_id} for course {course_slug}")
                await callback.answer("–¢–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return
            
            product_name = course['name']
            product_type = 'course'
        
        user = await user_repo.get_by_telegram_id(callback.from_user.id)
        if not user:
            logger.error(f"User not found in database: {callback.from_user.id}")
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞", show_alert=True)
            return
        
        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –±–∞–∑–µ
        payment = Payment(
            user_id=user.id,
            course_slug=course_slug,
            tariff_id=tariff_id,
            amount=tariff['price'],
            status='pending',
            product_type=product_type
        )
        payment = await payment_repo.create(payment)
        
        logger.info(f"Payment created in DB: {payment.id} for user {user.id}")
        
        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –ÆKassa
        description = f"–û–ø–ª–∞—Ç–∞: ¬´{product_name}¬ª - {tariff['name']}"
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ –¥–ª—è return_url
        bot_info = await callback.bot.get_me()
        return_url = f"https://t.me/{bot_info.username}" if bot_info.username else "https://t.me"
        
        payment_result = yookassa.create_payment(
            amount=tariff['price'],
            description=description,
            return_url=return_url
        )
        
        if not payment_result:
            await payment_repo.update(payment.id, {"status": "failed"})
            logger.error(f"Failed to create payment in YooKassa for payment {payment.id}")
            back_callback = "mini_course" if product_type == 'mini_course' else "courses"
            await callback.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_back_keyboard(back_callback)
            )
            await callback.answer()
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–ª–∞—Ç–µ–∂ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –ÆKassa
        await payment_repo.update(payment.id, {
            "payment_id": payment_result['id'],
            "confirmation_url": payment_result['confirmation_url']
        })
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ
        support_text = "‚úÖ –° —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ–º –∫—É—Ä–∞—Ç–æ—Ä–∞" if tariff.get('with_support') else "üìö –°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ"
        
        product_label = "–ú–∏–Ω–∏-–∫—É—Ä—Å" if product_type == 'mini_course' else "–ö—É—Ä—Å"
        text = f"üí≥ **–û–ø–ª–∞—Ç–∞ {product_label.lower()}–∞**\n\n"
        text += f"**{product_label}:** {product_name}\n"
        text += f"**–¢–∞—Ä–∏—Ñ:** {tariff['name']}\n"
        text += f"**–§–æ—Ä–º–∞—Ç:** {support_text}\n"
        text += f"**–°—Ç–æ–∏–º–æ—Å—Ç—å:** {tariff['price']} ‚ÇΩ\n\n"
        text += "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–û–ø–ª–∞—Ç–∏—Ç—å¬ª –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–ø–ª–∞—Ç—ã.\n"
        text += f"–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –¥–æ—Å—Ç—É–ø –∫ {product_label.lower()}—É –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!"
        
        await callback.message.edit_text(
            text,
            reply_markup=get_payment_keyboard(payment_result['confirmation_url'], str(payment.id)),
            parse_mode="Markdown"
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º chat_id –∏ message_id –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await payment_repo.update(payment.id, {
            "chat_id": callback.message.chat.id,
            "message_id": callback.message.message_id
        })
        
        await callback.answer()
    
    except Exception as e:
        logger.error(f"Error in process_tariff_selection: {e}", exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)


@router.callback_query(F.data.startswith("check_payment_"))
async def check_payment_status(callback: CallbackQuery):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞"""
    payment_id_str = callback.data.replace("check_payment_", "")
    
    try:
        payment_id = ObjectId(payment_id_str)
    except Exception:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–ª–∞—Ç–µ–∂–∞", show_alert=True)
        return
    
    logger.info(f"User {callback.from_user.id} checking payment status: {payment_id}")
    
    db = await get_db()
    payment_repo = PaymentRepository(db)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞—Ç–µ–∂ –∏–∑ –±–∞–∑—ã
        payment = await payment_repo.get_by_id(payment_id)
        
        if not payment:
            logger.warning(f"Payment {payment_id} not found in database")
            await callback.answer("–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ —É–∂–µ —É—Å–ø–µ—à–µ–Ω
        if payment.status == 'succeeded':
            logger.info(f"Payment {payment_id} already succeeded")
            await callback.answer("‚úÖ –ü–ª–∞—Ç–µ–∂ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ÆKassa
        if payment.payment_id:
            payment_status = yookassa.get_payment_status(payment.payment_id)
            
            if payment_status and payment_status['status'] == 'succeeded':
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–ª–∞—Ç–µ–∂
                await payment_repo.update(payment.id, {
                    "status": "succeeded",
                    "paid_at": datetime.utcnow()
                })
                
                logger.info(f"Payment {payment_id} status updated to succeeded")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –ø—Ä–æ–¥—É–∫—Ç–∞
                if payment.product_type == 'guide':
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–∞–π–¥
                    await send_guide_to_user(callback, payment)
                elif payment.product_type == 'consultation':
                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –æ–ø–ª–∞—Ç–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
                    consultation = get_consultation_by_slug(payment.consultation_slug)
                    
                    if consultation:
                        success_text = "‚úÖ **–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–∞!**\n\n"
                        success_text += f"{consultation.get('emoji', 'üîÆ')} –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è ¬´{consultation['name']}¬ª –æ–ø–ª–∞—á–µ–Ω–∞!\n\n"
                        success_text += "üìû –í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –∞—Å—Ç—Ä–æ–ª–æ–≥ –¥–ª—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤—Å—Ç—Ä–µ—á–∏.\n\n"
                        success_text += "–°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–≤–µ—Ä–∏–µ! üåü"
                        
                        await callback.message.edit_text(
                            success_text,
                            reply_markup=get_back_keyboard("main_menu", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
                            parse_mode="Markdown"
                        )
                        await callback.answer("‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!", show_alert=True)
                    else:
                        await callback.answer("‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!", show_alert=True)
                else:
                    # –ö—É—Ä—Å –∏–ª–∏ –º–∏–Ω–∏-–∫—É—Ä—Å –æ–ø–ª–∞—á–µ–Ω
                    if payment.course_slug == "mini_course":
                        # –ú–∏–Ω–∏-–∫—É—Ä—Å
                        mini_course = get_mini_course()
                        tariff = get_mini_course_tariff(payment.tariff_id) if mini_course else None
                        
                        if mini_course:
                            success_text = f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–∫—É–ø–∫–æ–π!\n\n"
                            success_text += f"–í–∞–º –æ—Ç–∫—Ä—ã—Ç –¥–æ—Å—Ç—É–ø –∫ –º–∏–Ω–∏-–∫—É—Ä—Å—É ¬´{mini_course.get('title', '–ú–∏–Ω–∏-–∫—É—Ä—Å')}¬ª\n\n"
                            
                            if tariff and tariff.get('with_support'):
                                success_text += "üë®‚Äçüè´ –í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –∫—É—Ä–∞—Ç–æ—Ä.\n\n"
                            
                            success_text += "üìö –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –∫—É—Ä—Å–∞ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –≤–∞—à–µ–º –∫–∞–±–∏–Ω–µ—Ç–µ!"
                            
                            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–ú–æ–∏ –∫—É—Ä—Å—ã"
                            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                                [InlineKeyboardButton(text="üìö –ú–æ–∏ –∫—É—Ä—Å—ã", callback_data="my_courses")]
                            ])
                            
                            await callback.message.edit_text(
                                success_text,
                                reply_markup=keyboard,
                                parse_mode="HTML"
                            )
                            await callback.answer("‚úÖ –î–æ—Å—Ç—É–ø –æ—Ç–∫—Ä—ã—Ç!", show_alert=True)
                        else:
                            await callback.answer("‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!", show_alert=True)
                    else:
                        # –û–±—ã—á–Ω—ã–π –∫—É—Ä—Å
                        course = get_course_by_slug(payment.course_slug)
                        tariff = get_tariff_by_id(payment.course_slug, payment.tariff_id) if course else None
                        
                        if course:
                            success_text = f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–∫—É–ø–∫–æ–π!\n\n"
                            success_text += f"–í–∞–º –æ—Ç–∫—Ä—ã—Ç –¥–æ—Å—Ç—É–ø –∫ –∫—É—Ä—Å—É ¬´{course['name']}¬ª\n\n"
                            
                            if tariff and tariff.get('with_support'):
                                success_text += "üë®‚Äçüè´ –í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –∫—É—Ä–∞—Ç–æ—Ä.\n\n"
                            
                            success_text += "üìö –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –∫—É—Ä—Å–∞ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –≤–∞—à–µ–º –∫–∞–±–∏–Ω–µ—Ç–µ!"
                            
                            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–ú–æ–∏ –∫—É—Ä—Å—ã"
                            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                                [InlineKeyboardButton(text="üìö –ú–æ–∏ –∫—É—Ä—Å—ã", callback_data="my_courses")]
                            ])
                            
                            await callback.message.edit_text(
                                success_text,
                                reply_markup=keyboard,
                                parse_mode="HTML"
                            )
                            await callback.answer("‚úÖ –î–æ—Å—Ç—É–ø –æ—Ç–∫—Ä—ã—Ç!", show_alert=True)
                        else:
                            await callback.answer("‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!", show_alert=True)
            else:
                await callback.answer("‚è≥ –ü–ª–∞—Ç–µ–∂ –µ—â–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.", show_alert=True)
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞", show_alert=True)
    
    except Exception as e:
        logger.error(f"Error in check_payment_status: {e}", exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞", show_alert=True)


async def send_guide_to_user(callback: CallbackQuery, payment: Payment):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –≥–∞–π–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã"""
    try:
        # –ù–∞—Ö–æ–¥–∏–º –≥–∞–π–¥ –ø–æ product_id (guide_id) –∏–∑ JSON
        guide_id = payment.product_id
        guide = get_guide_by_id(guide_id)
        
        if not guide:
            await callback.message.answer(
                "‚úÖ **–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–∞!**\n\n"
                "–ì–∞–π–¥ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤–∞–º –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–∏–Ω—É—Ç.\n"
                "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.",
                parse_mode="Markdown"
            )
            return
        
        file_id = guide.get('file_id')
        
        if not file_id:
            await callback.message.answer(
                "‚úÖ **–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–∞!**\n\n"
                "–ì–∞–π–¥ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤–∞–º –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–∏–Ω—É—Ç.\n"
                "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.",
                parse_mode="Markdown"
            )
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≥–∞–π–¥–∞
        await callback.message.answer_document(
            document=file_id,
            caption=f"‚úÖ **–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–∞!**\n\n{guide.get('emoji') or 'üíù'} –í–∞—à {guide['name']} –≥–æ—Ç–æ–≤!\n\n–ñ–µ–ª–∞–µ–º –≤–∞–º —É—Å–ø–µ—Ö–æ–≤ –≤ –∏–∑—É—á–µ–Ω–∏–∏! üåü",
            parse_mode="Markdown"
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
        buttons = []
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–≤—è–∑–∞–Ω–Ω—ã–π –∫—É—Ä—Å, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ—Ö–æ–¥–∞
        if guide.get('related_course_slug'):
            buttons.append([InlineKeyboardButton(
                text="üìö –ü–µ—Ä–µ–π—Ç–∏ –∫ –∫—É—Ä—Å—É",
                callback_data=f"course_{guide['related_course_slug']}"
            )])
        
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        buttons.append([
            InlineKeyboardButton(text="‚óÄÔ∏è –ö –≥–∞–π–¥–∞–º", callback_data="guides_list"),
            InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="main_menu")
        ])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        await callback.message.answer(
            "–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∏–∑—É—á–µ–Ω–∏—è! üìñ\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard
        )
        
        await callback.answer("‚úÖ –ì–∞–π–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!", show_alert=True)
        
    except Exception as e:
        logger.error(f"Error sending guide: {e}", exc_info=True)
        await callback.message.answer(
            "‚úÖ **–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–∞!**\n\n"
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.",
            parse_mode="Markdown",
            reply_markup=get_back_keyboard("main_menu", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        )
