import logging
from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from bson import ObjectId

from database import get_db, UserRepository, PaymentRepository
from keyboards import get_back_keyboard
from data import (
    get_course_by_slug, 
    get_consultation_by_slug,
    get_course_modules,
    get_module_by_id,
    get_lesson_by_id
)

logger = logging.getLogger(__name__)
router = Router()


@router.callback_query(F.data == "my_cabinet")
async def show_my_cabinet(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫—É–ø–æ–∫"""
    from config import config as bot_config
    
    db = await get_db()
    user_repo = UserRepository(db)
    payment_repo = PaymentRepository(db)
    
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        user = await user_repo.get_by_telegram_id(callback.from_user.id)
        if user:
            await user_repo.update_activity(callback.from_user.id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞—Ç–µ–∂–∏
        payments = await payment_repo.get_user_payments(user.id)
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —É—Å–ø–µ—à–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏
        payments = [p for p in payments if p.status == 'succeeded']
        
        # –°—á–∏—Ç–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        courses_count = len([p for p in payments if p.product_type in ['course', 'mini_course']])
        consultations_count = len([p for p in payments if p.product_type == 'consultation'])
        guides_count = len([p for p in payments if p.product_type == 'guide'])
        total_spent = sum(p.amount for p in payments)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        text = "<b>üíº –ú–æ–π –∫–∞–±–∏–Ω–µ—Ç</b>\n\n"
        
        text += "<b>üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        text += f"‚Ä¢ –ö—É—Ä—Å–æ–≤: {courses_count}\n"
        text += f"‚Ä¢ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π: {consultations_count}\n"
        text += f"‚Ä¢ –ì–∞–π–¥–æ–≤: {guides_count}\n\n"
        text += f"üí∞ –í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ: {total_spent:,.0f} ‚ÇΩ\n\n"
        
        # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        buttons = []
        
        if payments:
            text += "<b>üõç –ú–æ–∏ –ø–æ–∫—É–ø–∫–∏:</b>\n\n"
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ–∫—É–ø–∫–∏ –ø–æ —Ç–∏–ø—É
            courses = [p for p in payments if p.product_type in ['course', 'mini_course']]
            consultations = [p for p in payments if p.product_type == 'consultation']
            
            if courses:
                text += "<b>üìö –ö—É—Ä—Å—ã:</b>\n"
                for payment in courses:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –º–∏–Ω–∏-–∫—É—Ä—Å –∏–ª–∏ –æ–±—ã—á–Ω—ã–π –∫—É—Ä—Å
                    if payment.course_slug == "mini_course":
                        from data import get_mini_course
                        mini_course = get_mini_course()
                        if mini_course:
                            course_name = mini_course.get('title', '–ú–∏–Ω–∏-–∫—É—Ä—Å')
                            emoji = mini_course.get('emoji', 'üåå')
                            paid_date = payment.paid_at.strftime('%d.%m.%Y') if payment.paid_at else "–Ω–µ–¥–∞–≤–Ω–æ"
                            text += f"‚Ä¢ {emoji} {course_name}\n"
                            text += f"  –ö—É–ø–ª–µ–Ω–æ: {paid_date}\n"
                    else:
                        course = get_course_by_slug(payment.course_slug)
                        if course:
                            course_name = course.get('name', payment.course_slug)
                            emoji = course.get('emoji', 'üìö')
                            paid_date = payment.paid_at.strftime('%d.%m.%Y') if payment.paid_at else "–Ω–µ–¥–∞–≤–Ω–æ"
                            text += f"‚Ä¢ {emoji} {course_name}\n"
                            text += f"  –ö—É–ø–ª–µ–Ω–æ: {paid_date}\n"
                
                text += "\nüéì <b>–î–ª—è –∏–∑—É—á–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:</b>\n\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ —É—á–µ–±–Ω—ã–π –±–æ—Ç
                buttons.append([InlineKeyboardButton(
                    text="üéì –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–±—É—á–µ–Ω–∏—é",
                    url=f"https://t.me/{bot_config.LEARNING_BOT_USERNAME}"
                )])
            
            if consultations:
                text += "<b>üîÆ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:</b>\n"
                for payment in consultations:
                    consultation = get_consultation_by_slug(payment.consultation_slug)
                    if consultation:
                        consultation_name = consultation.get('name', payment.consultation_slug)
                        emoji = consultation.get('emoji', 'üîÆ')
                        text += f"‚Ä¢ {emoji} {consultation_name}\n"
                        paid_date = payment.paid_at.strftime('%d.%m.%Y') if payment.paid_at else "–Ω–µ–¥–∞–≤–Ω–æ"
                        text += f"  –û–ø–ª–∞—á–µ–Ω–æ: {paid_date}\n"
                text += "\n"
        else:
            text += "üìö –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –∫—É—Ä—Å–æ–≤ –∏–ª–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π.\n\n"
            text += "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∫–∞—Ç–∞–ª–æ–≥, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∫—É—Ä—Å!"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –∫–∞—Ç–∞–ª–æ–≥–∞–º
            buttons.append([InlineKeyboardButton(text="üìö –ö–∞—Ç–∞–ª–æ–≥ –∫—É—Ä—Å–æ–≤", callback_data="courses")])
            buttons.append([InlineKeyboardButton(text="üîÆ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏", callback_data="consultations")])
            buttons.append([InlineKeyboardButton(text="üíï –ì–∞–π–¥—ã", callback_data="guides_list")])
        
        # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
        buttons.append([InlineKeyboardButton(text="‚óÄÔ∏è –í –º–µ–Ω—é", callback_data="main_menu")])
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        
        try:
            # –ï—Å–ª–∏ —ç—Ç–æ –≤–∏–¥–µ–æ - —É–¥–∞–ª—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if callback.message.video:
                await callback.message.delete()
                await callback.bot.send_message(
                    chat_id=callback.message.chat.id,
                    text=text,
                    reply_markup=keyboard
                )
            else:
                # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç - —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º
                await callback.message.edit_text(
                    text,
                    reply_markup=keyboard
                )
        except Exception as edit_error:
            # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å - —É–¥–∞–ª—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            try:
                await callback.message.delete()
            except Exception:
                pass
            
            await callback.bot.send_message(
                chat_id=callback.message.chat.id,
                text=text,
                reply_markup=keyboard
            )
        
        await callback.answer()
    
    except Exception as e:
        logger.error(f"Error in show_my_cabinet: {e}", exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "my_courses")
async def show_my_courses(callback: CallbackQuery):
    """–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ my_cabinet
    await show_my_cabinet(callback)


# –£–¥–∞–ª–µ–Ω—ã —Ö—ç–Ω–¥–ª–µ—Ä—ã –¥–ª—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∫—É—Ä—Å–æ–≤ - –æ–Ω–∏ —Ç–µ–ø–µ—Ä—å –≤ —É—á–µ–±–Ω–æ–º –±–æ—Ç–µ (learning_bot.py)
# my_course_, module_, lesson_, download_lecture_, mini_module_, mini_lesson_
