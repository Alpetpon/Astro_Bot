import json
from datetime import datetime
from aiogram import Router, F
from aiogram.types import CallbackQuery
from sqlalchemy import and_
from sqlalchemy.orm import Session

from database import (
    get_db, User, Course, Lesson, 
    UserProgress, Payment
)
from keyboards import (
    get_my_cabinet_keyboard,
    get_my_courses_keyboard,
    get_course_progress_keyboard,
    get_lesson_keyboard,
    get_back_keyboard
)

router = Router()


@router.callback_query(F.data == "my_cabinet")
async def show_my_cabinet(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç"""
    db: Session = get_db()
    
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        user = db.query(User).filter(User.telegram_id == callback.from_user.id).first()
        if user:
            user.last_activity = datetime.utcnow()
            db.commit()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫—É–ø–ª–µ–Ω–Ω—ã–µ –∫—É—Ä—Å—ã
        has_courses = db.query(Payment).filter(
            Payment.user_id == user.id,
            Payment.status == 'succeeded'
        ).count() > 0
        
        if has_courses:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            total_lessons = db.query(UserProgress).filter(
                UserProgress.user_id == user.id
            ).count()
            
            completed_lessons = db.query(UserProgress).filter(
                and_(
                    UserProgress.user_id == user.id,
                    UserProgress.is_completed == True
                )
            ).count()
            
            text = f"üè† **–ú–æ–π –∫–∞–±–∏–Ω–µ—Ç**\n\n"
            text += f"üë§ {user.first_name or '–°—Ç—É–¥–µ–Ω—Ç'}\n\n"
            text += f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
            text += f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ —É—Ä–æ–∫–æ–≤: {completed_lessons} –∏–∑ {total_lessons}\n\n"
            text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        else:
            text = f"üè† **–ú–æ–π –∫–∞–±–∏–Ω–µ—Ç**\n\n"
            text += f"üë§ {user.first_name or '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}\n\n"
            text += "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–Ω—ã—Ö –∫—É—Ä—Å–æ–≤.\n"
            text += "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª ¬´–ö—É—Ä—Å—ã¬ª –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ–±—É—á–µ–Ω–∏—è!"
        
        await callback.message.edit_text(
            text,
            reply_markup=get_my_cabinet_keyboard(has_courses),
            parse_mode="Markdown"
        )
        await callback.answer()
    
    finally:
        db.close()


@router.callback_query(F.data == "my_courses")
async def show_my_courses(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –∫—É—Ä—Å–æ–≤"""
    db: Session = get_db()
    
    try:
        user = db.query(User).filter(User.telegram_id == callback.from_user.id).first()
        
        # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        payments = db.query(Payment).filter(
            Payment.user_id == user.id,
            Payment.status == 'succeeded'
        ).all()
        
        if not payments:
            await callback.message.edit_text(
                "üìö –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–Ω—ã—Ö –∫—É—Ä—Å–æ–≤.",
                reply_markup=get_back_keyboard("my_cabinet", "‚óÄÔ∏è –ú–æ–π –∫–∞–±–∏–Ω–µ—Ç")
            )
            await callback.answer()
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã
        course_ids = list(set([p.course_id for p in payments]))
        courses = db.query(Course).filter(Course.id.in_(course_ids)).all()
        
        user_courses = [(c.id, c.name) for c in courses]
        
        text = "üìö **–ú–æ–∏ –∫—É—Ä—Å—ã**\n\n"
        text += "–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è:"
        
        await callback.message.edit_text(
            text,
            reply_markup=get_my_courses_keyboard(user_courses),
            parse_mode="Markdown"
        )
        await callback.answer()
    
    finally:
        db.close()


@router.callback_query(F.data.startswith("my_course_"))
async def show_course_progress(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –∫—É—Ä—Å—É"""
    course_id = int(callback.data.replace("my_course_", ""))
    
    db: Session = get_db()
    
    try:
        user = db.query(User).filter(User.telegram_id == callback.from_user.id).first()
        course = db.query(Course).filter(Course.id == course_id).first()
        
        if not course:
            await callback.answer("–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        progress_records = db.query(UserProgress, Lesson).join(
            Lesson, UserProgress.lesson_id == Lesson.id
        ).filter(
            UserProgress.user_id == user.id,
            UserProgress.course_id == course_id
        ).order_by(Lesson.module_number, Lesson.lesson_number).all()
        
        if not progress_records:
            await callback.message.edit_text(
                "‚ùå –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –∫—É—Ä—Å—É –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=get_back_keyboard("my_courses", "‚óÄÔ∏è –ú–æ–∏ –∫—É—Ä—Å—ã")
            )
            await callback.answer()
            return
        
        lessons = []
        completed = 0
        total = len(progress_records)
        
        for progress, lesson in progress_records:
            lessons.append({
                'id': lesson.id,
                'module_number': lesson.module_number,
                'lesson_number': lesson.lesson_number,
                'title': lesson.title,
                'is_available': progress.is_available,
                'is_completed': progress.is_completed
            })
            if progress.is_completed:
                completed += 1
        
        text = f"üìñ **{course.name}**\n\n"
        text += f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {completed}/{total} —É—Ä–æ–∫–æ–≤\n\n"
        text += "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:"
        
        await callback.message.edit_text(
            text,
            reply_markup=get_course_progress_keyboard(course_id, lessons),
            parse_mode="Markdown"
        )
        await callback.answer()
    
    finally:
        db.close()


@router.callback_query(F.data.startswith("lesson_"))
async def show_lesson(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —É—Ä–æ–∫"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –Ω–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
    if callback.data.startswith("lesson_materials_"):
        await show_lesson_materials(callback)
        return
    
    lesson_id = int(callback.data.replace("lesson_", ""))
    
    db: Session = get_db()
    
    try:
        user = db.query(User).filter(User.telegram_id == callback.from_user.id).first()
        
        # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–∫ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å
        lesson = db.query(Lesson).filter(Lesson.id == lesson_id).first()
        progress = db.query(UserProgress).filter(
            and_(
                UserProgress.user_id == user.id,
                UserProgress.lesson_id == lesson_id
            )
        ).first()
        
        if not lesson or not progress:
            await callback.answer("–£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
        if not progress.is_available:
            await callback.answer("üîí –£—Ä–æ–∫ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞, –µ—Å–ª–∏ —É—Ä–æ–∫ —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞—Ç
        if not progress.started_at:
            progress.started_at = datetime.utcnow()
            user.last_activity = datetime.utcnow()
            db.commit()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Ä–æ–∫–∞
        text = f"üìñ **–ú–æ–¥—É–ª—å {lesson.module_number}, –£—Ä–æ–∫ {lesson.lesson_number}**\n"
        text += f"**{lesson.title}**\n\n"
        
        if lesson.description:
            text += f"{lesson.description}\n\n"
        
        if lesson.duration:
            text += f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {lesson.duration}\n\n"
        
        if lesson.content:
            text += f"üìù **–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:**\n{lesson.content}\n\n"
        
        if lesson.video_url:
            text += f"üé• **–í–∏–¥–µ–æ:**\n{lesson.video_url}\n\n"
        
        has_materials = bool(lesson.materials)
        
        await callback.message.edit_text(
            text,
            reply_markup=get_lesson_keyboard(lesson_id, lesson.course_id, has_materials),
            parse_mode="Markdown"
        )
        await callback.answer()
    
    finally:
        db.close()


async def show_lesson_materials(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã —É—Ä–æ–∫–∞"""
    lesson_id = int(callback.data.replace("lesson_materials_", ""))
    
    db: Session = get_db()
    
    try:
        lesson = db.query(Lesson).filter(Lesson.id == lesson_id).first()
        
        if not lesson or not lesson.materials:
            await callback.answer("–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
            return
        
        text = f"üìé **–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã**\n\n"
        
        try:
            materials = json.loads(lesson.materials)
            for material in materials:
                text += f"‚Ä¢ {material}\n"
        except:
            text += lesson.materials
        
        await callback.answer(text, show_alert=True)
    
    finally:
        db.close()


@router.callback_query(F.data.startswith("complete_lesson_"))
async def complete_lesson(callback: CallbackQuery):
    """–ó–∞–≤–µ—Ä—à–∏—Ç—å —É—Ä–æ–∫"""
    lesson_id = int(callback.data.replace("complete_lesson_", ""))
    
    db: Session = get_db()
    
    try:
        user = db.query(User).filter(User.telegram_id == callback.from_user.id).first()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        progress = db.query(UserProgress).filter(
            and_(
                UserProgress.user_id == user.id,
                UserProgress.lesson_id == lesson_id
            )
        ).first()
        
        if not progress:
            await callback.answer("–ü—Ä–æ–≥—Ä–µ—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –û—Ç–º–µ—á–∞–µ–º —É—Ä–æ–∫ –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π
        if not progress.is_completed:
            progress.is_completed = True
            progress.completed_at = datetime.utcnow()
            user.last_activity = datetime.utcnow()
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫
            lesson = db.query(Lesson).filter(Lesson.id == lesson_id).first()
            next_lesson = db.query(Lesson).filter(
                Lesson.course_id == lesson.course_id,
                Lesson.order > lesson.order
            ).order_by(Lesson.order).first()
            
            if next_lesson:
                next_progress = db.query(UserProgress).filter(
                    and_(
                        UserProgress.user_id == user.id,
                        UserProgress.lesson_id == next_lesson.id
                    )
                ).first()
                
                if next_progress:
                    next_progress.is_available = True
            
            db.commit()
            
            await callback.answer("‚úÖ –£—Ä–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω! –°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫ –æ—Ç–∫—Ä—ã—Ç.", show_alert=True)
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ —Å–ø–∏—Å–∫—É —É—Ä–æ–∫–æ–≤ –∫—É—Ä—Å–∞
            await show_course_progress(callback)
        else:
            await callback.answer("‚úÖ –£—Ä–æ–∫ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω", show_alert=True)
    
    except Exception as e:
        print(f"Error in complete_lesson: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —É—Ä–æ–∫–∞", show_alert=True)
    
    finally:
        db.close()

