import logging
from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from bson import ObjectId

from database import get_db, UserRepository, PaymentRepository
from keyboards import get_back_keyboard
from data import (
    get_course_by_slug, 
    get_consultation_by_slug,
    get_course_modules,
    get_module_by_id,
    get_lesson_by_id
)

logger = logging.getLogger(__name__)
router = Router()


@router.callback_query(F.data == "my_cabinet")
async def show_my_cabinet(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç"""
    db = await get_db()
    user_repo = UserRepository(db)
    payment_repo = PaymentRepository(db)
    
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        user = await user_repo.get_by_telegram_id(callback.from_user.id)
        if user:
            await user_repo.update_activity(callback.from_user.id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞—Ç–µ–∂–∏
        payments = await payment_repo.get_user_payments(user.id)
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —É—Å–ø–µ—à–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏
        payments = [p for p in payments if p.status == 'succeeded']
        
        # –°—á–∏—Ç–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        courses_count = len([p for p in payments if p.product_type in ['course', 'mini_course']])
        consultations_count = len([p for p in payments if p.product_type == 'consultation'])
        guides_count = len([p for p in payments if p.product_type == 'guide'])
        total_spent = sum(p.amount for p in payments)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        text = "<b>–ú–æ–π –∫–∞–±–∏–Ω–µ—Ç</b>\n\n"
        
        text += "<b>–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        text += f"‚Ä¢ –ö—É—Ä—Å–æ–≤: {courses_count}\n"
        text += f"‚Ä¢ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π: {consultations_count}\n"
        text += f"‚Ä¢ –ì–∞–π–¥–æ–≤: {guides_count}\n\n"
        text += f"–í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ: {total_spent:,.0f} ‚ÇΩ\n\n"
        
        # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        buttons = []
        
        if payments:
            text += "<b>–ú–æ–∏ –ø–æ–∫—É–ø–∫–∏:</b>\n\n"
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ–∫—É–ø–∫–∏ –ø–æ —Ç–∏–ø—É
            courses = [p for p in payments if p.product_type in ['course', 'mini_course']]
            consultations = [p for p in payments if p.product_type == 'consultation']
            
            if courses:
                text += "<b>–ö—É—Ä—Å—ã:</b>\n"
                for payment in courses:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –º–∏–Ω–∏-–∫—É—Ä—Å –∏–ª–∏ –æ–±—ã—á–Ω—ã–π –∫—É—Ä—Å
                    if payment.course_slug == "mini_course":
                        from data import get_mini_course
                        mini_course = get_mini_course()
                        if mini_course:
                            course_name = mini_course.get('title', '–ú–∏–Ω–∏-–∫—É—Ä—Å')
                            emoji = mini_course.get('emoji', 'üåå')
                            text += f"‚Ä¢ {emoji} {course_name}\n"
                            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –∫—É–ø–ª–µ–Ω–Ω–æ–º—É –º–∏–Ω–∏-–∫—É—Ä—Å—É
                            buttons.append([InlineKeyboardButton(
                                text=f"{emoji} {course_name}",
                                callback_data=f"my_course_{payment.course_slug}"
                            )])
                    else:
                        course = get_course_by_slug(payment.course_slug)
                        if course:
                            course_name = course.get('name', payment.course_slug)
                            emoji = course.get('emoji', 'üìö')
                            text += f"‚Ä¢ {emoji} {course_name}\n"
                            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –∫—É–ø–ª–µ–Ω–Ω–æ–º—É –∫—É—Ä—Å—É —Å –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏
                            buttons.append([InlineKeyboardButton(
                                text=f"{emoji} {course_name}",
                                callback_data=f"my_course_{payment.course_slug}"
                            )])
                text += "\n"
            
            if consultations:
                text += "\n<b>–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:</b>\n"
                for payment in consultations:
                    consultation = get_consultation_by_slug(payment.consultation_slug)
                    if consultation:
                        consultation_name = consultation.get('name', payment.consultation_slug)
                        emoji = consultation.get('emoji', 'üîÆ')
                        text += f"‚Ä¢ {emoji} {consultation_name}\n"
                        paid_date = payment.paid_at.strftime('%d.%m.%Y') if payment.paid_at else "–Ω–µ–¥–∞–≤–Ω–æ"
                        text += f"  –û–ø–ª–∞—á–µ–Ω–æ: {paid_date}\n"
                text += "\n"
        else:
            text += "üìö –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –∫—É—Ä—Å–æ–≤ –∏–ª–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π.\n\n"
            text += "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∫–∞—Ç–∞–ª–æ–≥, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∫—É—Ä—Å!"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –∫–∞—Ç–∞–ª–æ–≥–∞–º
            buttons.append([InlineKeyboardButton(text="üìö –ö–∞—Ç–∞–ª–æ–≥ –∫—É—Ä—Å–æ–≤", callback_data="courses")])
            buttons.append([InlineKeyboardButton(text="üîÆ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏", callback_data="consultations")])
            buttons.append([InlineKeyboardButton(text="üíï –ì–∞–π–¥—ã", callback_data="guides_list")])
        
        # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
        buttons.append([InlineKeyboardButton(text="‚óÄÔ∏è –í –º–µ–Ω—é", callback_data="main_menu")])
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        
        await callback.message.edit_text(
            text,
            reply_markup=keyboard
        )
        await callback.answer()
    
    except Exception as e:
        logger.error(f"Error in show_my_cabinet: {e}", exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "my_courses")
async def show_my_courses(callback: CallbackQuery):
    """–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ my_cabinet
    await show_my_cabinet(callback)


@router.callback_query(F.data.startswith("my_course_"))
async def show_my_course(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫—É–ø–ª–µ–Ω–Ω—ã–π –∫—É—Ä—Å —Å –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏"""
    course_slug = callback.data.replace("my_course_", "")
    
    db = await get_db()
    user_repo = UserRepository(db)
    payment_repo = PaymentRepository(db)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫—É–ø–∏–ª —ç—Ç–æ—Ç –∫—É—Ä—Å
        user = await user_repo.get_by_telegram_id(callback.from_user.id)
        
        if not user:
            await callback.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –∑–∞ –∫—É—Ä—Å
        payments = await payment_repo.get_user_payments(user.id)
        payment = next((p for p in payments if p.course_slug == course_slug and p.status == 'succeeded' and p.product_type in ['course', 'mini_course']), None)
        
        if not payment:
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∫—É—Ä—Å—É", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É—Ä—Å–µ
        if course_slug == "mini_course":
            from data import get_mini_course
            from datetime import datetime, timedelta
            
            mini_course = get_mini_course()
            
            if not mini_course:
                await callback.answer("–ú–∏–Ω–∏-–∫—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏ –º–∏–Ω–∏-–∫—É—Ä—Å–∞
            emoji = mini_course.get('emoji', 'üåå')
            text = f"{emoji} <b>{mini_course.get('title', '–ú–∏–Ω–∏-–∫—É—Ä—Å')}</b>\n\n"
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∏–Ω–∏-–∫—É—Ä—Å–µ
            subtitle = mini_course.get('subtitle', '')
            if subtitle:
                text += f"<i>{subtitle}</i>\n\n"
            
            # –î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏
            if payment.paid_at:
                paid_date = payment.paid_at.strftime('%d.%m.%Y')
                text += f"üí≥ <b>–î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏:</b> {paid_date}\n"
            
            text += "\n‚úÖ <b>–£ –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º –º–∏–Ω–∏-–∫—É—Ä—Å–∞</b>\n\n"
            
            # –ü–æ–ª—É—á–∞–µ–º –º–æ–¥—É–ª–∏
            modules = mini_course.get('modules', [])
            
            if modules:
                # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–Ω—ã—Ö —Å—É—Ç–æ–∫ (24 —á–∞—Å–∞) —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ–∫—É–ø–∫–∏
                if payment.paid_at:
                    time_since_purchase = datetime.utcnow() - payment.paid_at
                    days_passed = int(time_since_purchase.total_seconds() / 86400)  # 86400 —Å–µ–∫—É–Ω–¥ = 24 —á–∞—Å–∞
                else:
                    days_passed = 0
                
                text += "üìö <b>–ú–æ–¥—É–ª–∏ –∫—É—Ä—Å–∞:</b>\n\n"
                
                # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
                buttons = []
                
                # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –º–æ–¥—É–ª—è–º
                for module in modules:
                    day_number = module.get('day_number', 999)
                    module_title = module.get('title', '–ú–æ–¥—É–ª—å')
                    module_emoji = module.get('emoji', 'üìñ')
                    
                    # –ú–æ–¥—É–ª—å –¥–æ—Å—Ç—É–ø–µ–Ω, –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–Ω–µ–π
                    # –î–µ–Ω—å 1 –¥–æ—Å—Ç—É–ø–µ–Ω —Å—Ä–∞–∑—É (day_number=1, days_passed>=0)
                    is_available = days_passed >= (day_number - 1)
                    
                    if is_available:
                        # –î–æ—Å—Ç—É–ø–Ω—ã–π –º–æ–¥—É–ª—å
                        text += f"‚úÖ {module_emoji} {module_title}\n"
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –º–æ–¥—É–ª—é
                        buttons.append([InlineKeyboardButton(
                            text=f"{module_emoji} {module_title}",
                            callback_data=f"mini_module_{module['id']}"
                        )])
                    else:
                        # –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–æ–¥—É–ª—å
                        days_until_unlock = (day_number - 1) - days_passed
                        unlock_date = payment.paid_at + timedelta(days=(day_number - 1))
                        unlock_date_str = unlock_date.strftime('%d.%m.%Y %H:%M')
                        
                        # –í—ã—á–∏—Å–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —á–∞—Å—ã
                        time_until_unlock = unlock_date - datetime.utcnow()
                        hours_until_unlock = int(time_until_unlock.total_seconds() / 3600)
                        
                        if hours_until_unlock < 24:
                            time_str = f"—á–µ—Ä–µ–∑ {hours_until_unlock} —á."
                        else:
                            time_str = f"—á–µ—Ä–µ–∑ {days_until_unlock} –¥–Ω."
                        
                        text += f"üîí {module_emoji} {module_title}\n"
                        text += f"   –û—Ç–∫—Ä–æ–µ—Ç—Å—è: {unlock_date_str} ({time_str})\n"
                
                text += "\nüí° –ù–æ–≤—ã–π –º–æ–¥—É–ª—å –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å!"
                
                # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
                buttons.append([
                    InlineKeyboardButton(text="‚óÄÔ∏è –ú–æ–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="my_cabinet"),
                    InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="main_menu")
                ])
                
                keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
            else:
                # –ï—Å–ª–∏ –º–æ–¥—É–ª–µ–π –Ω–µ—Ç
                text += "üîß <i>–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –º–∏–Ω–∏-–∫—É—Ä—Å–∞ —Å–∫–æ—Ä–æ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã.</i>"
                
                # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
                buttons = [[
                    InlineKeyboardButton(text="‚óÄÔ∏è –ú–æ–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="my_cabinet"),
                    InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="main_menu")
                ]]
                keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
            
            await callback.message.edit_text(
                text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            await callback.answer()
            return
        
        # –û–±—ã—á–Ω—ã–π –∫—É—Ä—Å
        course = get_course_by_slug(course_slug)
        
        if not course:
            await callback.answer("–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏ –∫—É—Ä—Å–∞
        emoji = course.get('emoji', 'üìö')
        text = f"{emoji} <b>{course['name']}</b>\n\n"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—É—Ä—Å–µ
        duration = course.get('duration', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')
        text += f"‚è± <b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> {duration}\n"
        
        # –î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏
        if payment.paid_at:
            paid_date = payment.paid_at.strftime('%d.%m.%Y')
            text += f"üìÖ <b>–î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏:</b> {paid_date}\n"
        
        text += "\n"
        
        # –ü–æ–ª—É—á–∞–µ–º –º–æ–¥—É–ª–∏ –∫—É—Ä—Å–∞
        modules = get_course_modules(course_slug)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç—É–ø–µ
        text += "‚úÖ <b>–£ –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º –∫—É—Ä—Å–∞</b>\n\n"
        
        if modules:
            text += "üìö <b>–ú–æ–¥—É–ª–∏ –∫—É—Ä—Å–∞:</b>\n\n"
            
            # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
            buttons = []
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–æ–¥—É–ª—è
            for module in modules:
                module_title = module.get('title', '–ú–æ–¥—É–ª—å')
                
                # –ö—Ä–∞—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è –¥–ª—è —Ç–µ–∫—Å—Ç–∞
                text += f"‚ñ´Ô∏è {module_title}\n\n"
                
                # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –º–æ–¥—É–ª—é
                buttons.append([InlineKeyboardButton(
                    text=f"üìö {module_title}",
                    callback_data=f"module_{course_slug}_{module['id']}"
                )])
            
            text += "\nüí° –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥—É–ª—å, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ!"
        else:
            # –ï—Å–ª–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –Ω–µ—Ç
            text += "üîß <i>–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –∫—É—Ä—Å–∞ —Å–∫–æ—Ä–æ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã.\n"
            text += "–°–µ–π—á–∞—Å –∏–¥–µ—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –¥–ª—è –æ–±—É—á–µ–Ω–∏—è.</i>\n\n"
            text += "üìû –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π."
            
            # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
            buttons = []
            
            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–≤—è–∑–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
            from config import config
            if config.CONSULTATION_TELEGRAM:
                buttons.append([InlineKeyboardButton(
                    text="üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫–µ",
                    url=f"https://t.me/{config.CONSULTATION_TELEGRAM}"
                )])
        
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        buttons.append([
            InlineKeyboardButton(text="‚óÄÔ∏è –ú–æ–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="my_cabinet"),
            InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="main_menu")
        ])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        
        await callback.message.edit_text(
            text,
            reply_markup=keyboard
        )
        await callback.answer()
    
    except Exception as e:
        logger.error(f"Error in show_my_course: {e}", exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫—É—Ä—Å–∞", show_alert=True)


@router.callback_query(F.data.startswith("module_"))
async def show_module(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥—É–ª—å –∫—É—Ä—Å–∞ —Å —É—Ä–æ–∫–∞–º–∏"""
    # –§–æ—Ä–º–∞—Ç: module_{course_slug}_{module_id}
    parts = callback.data.split("_", 2)
    if len(parts) < 3:
        await callback.answer("–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return
    
    course_slug = parts[1]
    module_id = parts[2]
    
    db = await get_db()
    user_repo = UserRepository(db)
    payment_repo = PaymentRepository(db)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫—É—Ä—Å—É
        user = await user_repo.get_by_telegram_id(callback.from_user.id)
        
        if not user:
            await callback.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        payments = await payment_repo.get_user_payments(user.id)
        payment = next((p for p in payments if p.course_slug == course_slug and p.status == 'succeeded' and p.product_type in ['course', 'mini_course']), None)
        
        if not payment:
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∫—É—Ä—Å—É", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –º–æ–¥—É–ª—å
        module = get_module_by_id(course_slug, module_id)
        
        if not module:
            await callback.answer("–ú–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É—Ä—Å–µ
        course = get_course_by_slug(course_slug)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        emoji = course.get('emoji', 'üìö') if course else 'üìö'
        text = f"{emoji} <b>{module['title']}</b>\n\n"
        
        description = module.get('description', '')
        if description:
            text += f"üìù {description}\n\n"
        
        # –°–ø–∏—Å–æ–∫ —É—Ä–æ–∫–æ–≤
        lessons = module.get('lessons', [])
        
        if lessons:
            text += "üìñ <b>–£—Ä–æ–∫–∏ –º–æ–¥—É–ª—è:</b>\n\n"
            
            buttons = []
            
            for i, lesson in enumerate(lessons, 1):
                lesson_title = lesson.get('title', f'–£—Ä–æ–∫ {i}')
                lesson_type = lesson.get('type', 'video')
                
                # –≠–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —É—Ä–æ–∫–∞
                type_emoji = {
                    'video': 'üé•',
                    'homework': 'üìù',
                    'test': '‚úÖ',
                    'material': 'üìÑ'
                }.get(lesson_type, 'üìñ')
                
                # –¢–µ–∫—Å—Ç —É—Ä–æ–∫–∞
                text += f"{i}. {type_emoji} {lesson_title}\n"
                
                # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —É—Ä–æ–∫–∞
                buttons.append([InlineKeyboardButton(
                    text=f"{type_emoji} –£—Ä–æ–∫ {i}: {lesson_title[:30]}{'...' if len(lesson_title) > 30 else ''}",
                    callback_data=f"lesson_{course_slug}_{module_id}_{lesson['id']}"
                )])
            
            text += "\nüí° –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —É—Ä–æ–∫, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–∑—É—á–µ–Ω–∏–µ!"
            
            # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            buttons.append([
                InlineKeyboardButton(text="‚óÄÔ∏è –ö –∫—É—Ä—Å—É", callback_data=f"my_course_{course_slug}"),
                InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="main_menu")
            ])
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        else:
            text += "üìö –£—Ä–æ–∫–∏ —Å–∫–æ—Ä–æ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã."
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –ö –∫—É—Ä—Å—É", callback_data=f"my_course_{course_slug}")]
            ])
        
        await callback.message.edit_text(
            text,
            reply_markup=keyboard
        )
        await callback.answer()
    
    except Exception as e:
        logger.error(f"Error in show_module: {e}", exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª—è", show_alert=True)


@router.callback_query(F.data.startswith("lesson_"))
async def show_lesson(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —É—Ä–æ–∫"""
    # –§–æ—Ä–º–∞—Ç: lesson_{course_slug}_{module_id}_{lesson_id}
    parts = callback.data.split("_", 3)
    if len(parts) < 4:
        await callback.answer("–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return
    
    course_slug = parts[1]
    module_id = parts[2]
    lesson_id = parts[3]
    
    db = await get_db()
    user_repo = UserRepository(db)
    payment_repo = PaymentRepository(db)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫—É—Ä—Å—É
        user = await user_repo.get_by_telegram_id(callback.from_user.id)
        
        if not user:
            await callback.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        payments = await payment_repo.get_user_payments(user.id)
        payment = next((p for p in payments if p.course_slug == course_slug and p.status == 'succeeded' and p.product_type in ['course', 'mini_course']), None)
        
        if not payment:
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∫—É—Ä—Å—É", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–∫
        lesson = get_lesson_by_id(course_slug, module_id, lesson_id)
        
        if not lesson:
            await callback.answer("–£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        lesson_type = lesson.get('type', 'video')
        type_emoji = {
            'video': 'üé•',
            'homework': 'üìù',
            'test': '‚úÖ',
            'material': 'üìÑ'
        }.get(lesson_type, 'üìñ')
        
        text = f"{type_emoji} <b>{lesson['title']}</b>\n\n"
        
        # –û–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–∞
        description = lesson.get('description', '')
        if description:
            text += f"üìù {description}\n\n"
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —É—Ä–æ–∫–∞
        has_content = False
        
        # 1. –í–∏–¥–µ–æ - —Ç–µ–ø–µ—Ä—å —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É
        video_url = lesson.get('video_url', '')
        if video_url:
            text += "üé¨ <b>–í–∏–¥–µ–æ —É—Ä–æ–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞</b>\n\n"
            has_content = True
        
        # 2. –õ–µ–∫—Ü–∏—è (PDF —Ñ–∞–π–ª) - —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É
        lecture_file_id = lesson.get('lecture_file_id', '')
        if lecture_file_id:
            text += "üìÑ <b>–õ–µ–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è</b>\n\n"
            has_content = True
        
        # 3. –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ
        text_content = lesson.get('text_content', '')
        if text_content:
            text += f"üìù <b>–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —É—Ä–æ–∫–∞:</b>\n{text_content}\n\n"
            has_content = True
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        if not has_content:
            if lesson_type == 'homework':
                text += "‚úçÔ∏è –≠—Ç–æ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã.\n\n"
            else:
                text += "üîß –ú–∞—Ç–µ—Ä–∏–∞–ª—ã —É—Ä–æ–∫–∞ —Å–∫–æ—Ä–æ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã.\n\n"
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
        materials = lesson.get('materials', [])
        if materials:
            text += "üìé <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã:</b>\n"
            for material in materials:
                material_title = material.get('title', '–ú–∞—Ç–µ—Ä–∏–∞–ª')
                material_file_id = material.get('file_id', '')
                
                if material_file_id:
                    text += f"‚ñ´Ô∏è {material_title}\n"
                    # –û—Ç–ø—Ä–∞–≤–∏–º –º–∞—Ç–µ—Ä–∏–∞–ª –æ—Ç–¥–µ–ª—å–Ω–æ
                    try:
                        await callback.message.answer_document(
                            document=material_file_id,
                            caption=material_title
                        )
                    except Exception as e:
                        logger.error(f"Error sending material: {e}")
                else:
                    text += f"‚ñ´Ô∏è {material_title} (—Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω)\n"
            text += "\n"
        
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        buttons = []
        
        # –ö–Ω–æ–ø–∫–∞ —Å–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if video_url:
            buttons.append([InlineKeyboardButton(text="üé¨ –°–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æ", url=video_url)])
        
        # –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∞—Ç—å –ª–µ–∫—Ü–∏—é (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if lecture_file_id:
            buttons.append([InlineKeyboardButton(text="üìÑ –°–∫–∞—á–∞—Ç—å –ª–µ–∫—Ü–∏—é", callback_data=f"download_lecture_{course_slug}_{module_id}_{lesson_id}")])
        
        buttons.extend([
            [InlineKeyboardButton(text="‚óÄÔ∏è –ö –º–æ–¥—É–ª—é", callback_data=f"module_{course_slug}_{module_id}")],
            [
                InlineKeyboardButton(text="üìö –ö –∫—É—Ä—Å—É", callback_data=f"my_course_{course_slug}"),
                InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="main_menu")
            ]
        ])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        
        await callback.message.edit_text(
            text,
            reply_markup=keyboard,
            disable_web_page_preview=False
        )
        await callback.answer()
    
    except Exception as e:
        logger.error(f"Error in show_lesson: {e}", exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —É—Ä–æ–∫–∞", show_alert=True)


@router.callback_query(F.data.startswith("download_lecture_"))
async def download_lecture(callback: CallbackQuery):
    """–°–∫–∞—á–∞—Ç—å PDF –ª–µ–∫—Ü–∏—é —É—Ä–æ–∫–∞"""
    # –§–æ—Ä–º–∞—Ç: download_lecture_{course_slug}_{module_id}_{lesson_id}
    parts = callback.data.replace("download_lecture_", "").split("_", 2)
    
    if len(parts) < 3:
        await callback.answer("–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return
    
    course_slug = parts[0]
    module_id = parts[1]
    lesson_id = parts[2]
    
    db = await get_db()
    user_repo = UserRepository(db)
    payment_repo = PaymentRepository(db)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫—É—Ä—Å—É
        user = await user_repo.get_by_telegram_id(callback.from_user.id)
        
        if not user:
            await callback.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        payments = await payment_repo.get_user_payments(user.id)
        payment = next((p for p in payments if p.course_slug == course_slug and p.status == 'succeeded' and p.product_type in ['course', 'mini_course']), None)
        
        if not payment:
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∫—É—Ä—Å—É", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–∫
        lesson = get_lesson_by_id(course_slug, module_id, lesson_id)
        
        if not lesson:
            await callback.answer("–£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        lecture_file_id = lesson.get('lecture_file_id', '')
        
        if not lecture_file_id:
            await callback.answer("–õ–µ–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", show_alert=True)
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        try:
            await callback.message.answer_document(
                document=lecture_file_id,
                caption=f"üìÑ –õ–µ–∫—Ü–∏—è: {lesson['title']}"
            )
            await callback.answer("‚úÖ –õ–µ–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
        except Exception as e:
            logger.error(f"Error sending lecture file: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ª–µ–∫—Ü–∏–∏", show_alert=True)
    
    except Exception as e:
        logger.error(f"Error in download_lecture: {e}", exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data.startswith("mini_module_"))
async def show_mini_module(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥—É–ª—å –º–∏–Ω–∏-–∫—É—Ä—Å–∞ —Å —É—Ä–æ–∫–∞–º–∏"""
    module_id = callback.data.replace("mini_module_", "")
    
    db = await get_db()
    user_repo = UserRepository(db)
    payment_repo = PaymentRepository(db)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –º–∏–Ω–∏-–∫—É—Ä—Å—É
        user = await user_repo.get_by_telegram_id(callback.from_user.id)
        
        if not user:
            await callback.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        payments = await payment_repo.get_user_payments(user.id)
        payment = next((p for p in payments if p.course_slug == "mini_course" and p.status == 'succeeded' and p.product_type in ['course', 'mini_course']), None)
        
        if not payment:
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∏–Ω–∏-–∫—É—Ä—Å—É", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –º–∏–Ω–∏-–∫—É—Ä—Å –∏ –º–æ–¥—É–ª—å
        from data import get_mini_course
        from datetime import datetime
        
        mini_course = get_mini_course()
        
        if not mini_course:
            await callback.answer("–ú–∏–Ω–∏-–∫—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        modules = mini_course.get('modules', [])
        module = next((m for m in modules if m['id'] == module_id), None)
        
        if not module:
            await callback.answer("–ú–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –º–æ–¥—É–ª—é
        day_number = module.get('day_number', 999)
        if payment.paid_at:
            time_since_purchase = datetime.utcnow() - payment.paid_at
            days_passed = int(time_since_purchase.total_seconds() / 86400)  # 86400 —Å–µ–∫—É–Ω–¥ = 24 —á–∞—Å–∞
        else:
            days_passed = 0
        
        is_available = days_passed >= (day_number - 1)
        
        if not is_available:
            await callback.answer("–≠—Ç–æ—Ç –º–æ–¥—É–ª—å –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –º–æ–¥—É–ª—è
        emoji = module.get('emoji', 'üìñ')
        text = f"{emoji} <b>{module['title']}</b>\n\n"
        
        description = module.get('description', '')
        if description:
            text += f"üìù {description}\n\n"
        
        # –°–ø–∏—Å–æ–∫ —É—Ä–æ–∫–æ–≤
        lessons = module.get('lessons', [])
        
        if lessons:
            text += "üìñ <b>–£—Ä–æ–∫–∏:</b>\n\n"
            
            buttons = []
            
            for i, lesson in enumerate(lessons, 1):
                lesson_title = lesson.get('title', f'–£—Ä–æ–∫ {i}')
                lesson_type = lesson.get('type', 'video')
                
                # –≠–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —É—Ä–æ–∫–∞
                type_emoji = {
                    'video': 'üé•',
                    'homework': 'üìù',
                    'test': '‚úÖ',
                    'material': 'üìÑ'
                }.get(lesson_type, 'üìñ')
                
                # –¢–µ–∫—Å—Ç —É—Ä–æ–∫–∞
                text += f"{i}. {type_emoji} {lesson_title}\n"
                
                # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —É—Ä–æ–∫–∞
                buttons.append([InlineKeyboardButton(
                    text=f"{type_emoji} –£—Ä–æ–∫ {i}: {lesson_title[:30]}{'...' if len(lesson_title) > 30 else ''}",
                    callback_data=f"mini_lesson_{module_id}_{lesson['id']}"
                )])
            
            text += "\nüí° –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —É—Ä–æ–∫, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!"
            
            # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            buttons.append([
                InlineKeyboardButton(text="‚óÄÔ∏è –ö –º–∏–Ω–∏-–∫—É—Ä—Å—É", callback_data="my_course_mini_course"),
                InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="main_menu")
            ])
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        else:
            text += "üìö –£—Ä–æ–∫–∏ —Å–∫–æ—Ä–æ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã."
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –ö –º–∏–Ω–∏-–∫—É—Ä—Å—É", callback_data="my_course_mini_course")]
            ])
        
        await callback.message.edit_text(
            text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await callback.answer()
    
    except Exception as e:
        logger.error(f"Error in show_mini_module: {e}", exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª—è", show_alert=True)


@router.callback_query(F.data.startswith("mini_lesson_"))
async def show_mini_lesson(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —É—Ä–æ–∫ –º–∏–Ω–∏-–∫—É—Ä—Å–∞"""
    # –§–æ—Ä–º–∞—Ç: mini_lesson_{module_id}_{lesson_id}
    parts = callback.data.replace("mini_lesson_", "").split("_", 1)
    if len(parts) < 2:
        await callback.answer("–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return
    
    module_id = parts[0]
    lesson_id = parts[1]
    
    db = await get_db()
    user_repo = UserRepository(db)
    payment_repo = PaymentRepository(db)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –º–∏–Ω–∏-–∫—É—Ä—Å—É
        user = await user_repo.get_by_telegram_id(callback.from_user.id)
        
        if not user:
            await callback.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        payments = await payment_repo.get_user_payments(user.id)
        payment = next((p for p in payments if p.course_slug == "mini_course" and p.status == 'succeeded' and p.product_type in ['course', 'mini_course']), None)
        
        if not payment:
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∏–Ω–∏-–∫—É—Ä—Å—É", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–∫
        from data import get_mini_course
        from datetime import datetime
        
        mini_course = get_mini_course()
        
        if not mini_course:
            await callback.answer("–ú–∏–Ω–∏-–∫—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        modules = mini_course.get('modules', [])
        module = next((m for m in modules if m['id'] == module_id), None)
        
        if not module:
            await callback.answer("–ú–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        lessons = module.get('lessons', [])
        lesson = next((l for l in lessons if l['id'] == lesson_id), None)
        
        if not lesson:
            await callback.answer("–£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –º–æ–¥—É–ª—é
        day_number = module.get('day_number', 999)
        if payment.paid_at:
            time_since_purchase = datetime.utcnow() - payment.paid_at
            days_passed = int(time_since_purchase.total_seconds() / 86400)  # 86400 —Å–µ–∫—É–Ω–¥ = 24 —á–∞—Å–∞
        else:
            days_passed = 0
        
        is_available = days_passed >= (day_number - 1)
        
        if not is_available:
            await callback.answer("–≠—Ç–æ—Ç —É—Ä–æ–∫ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É—Ä–æ–∫–∞
        lesson_type = lesson.get('type', 'video')
        type_emoji = {
            'video': 'üé•',
            'homework': 'üìù',
            'test': '‚úÖ',
            'material': 'üìÑ'
        }.get(lesson_type, 'üìñ')
        
        text = f"{type_emoji} <b>{lesson['title']}</b>\n\n"
        
        # –û–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–∞
        description = lesson.get('description', '')
        if description:
            text += f"üìù {description}\n\n"
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —É—Ä–æ–∫–∞
        has_content = False
        
        # 1. –í–∏–¥–µ–æ - —á–µ—Ä–µ–∑ URL –∏–ª–∏ file_id
        video_url = lesson.get('video_url', '')
        if video_url:
            text += f"üé¨ <a href='{video_url}'>–°–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æ</a>\n\n"
            has_content = True
        
        # 2. –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ
        text_content = lesson.get('text_content', '')
        if text_content:
            text += f"üìù <b>–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —É—Ä–æ–∫–∞:</b>\n{text_content}\n\n"
            has_content = True
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        if not has_content:
            if lesson_type == 'homework':
                text += "‚úçÔ∏è –≠—Ç–æ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã.\n\n"
            else:
                text += "üîß –ú–∞—Ç–µ—Ä–∏–∞–ª—ã —É—Ä–æ–∫–∞ —Å–∫–æ—Ä–æ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã.\n\n"
        
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        buttons = [
            [InlineKeyboardButton(text="‚óÄÔ∏è –ö –º–æ–¥—É–ª—é", callback_data=f"mini_module_{module_id}")],
            [
                InlineKeyboardButton(text="üìö –ö –º–∏–Ω–∏-–∫—É—Ä—Å—É", callback_data="my_course_mini_course"),
                InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="main_menu")
            ]
        ]
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        
        await callback.message.edit_text(
            text,
            reply_markup=keyboard,
            parse_mode="HTML",
            disable_web_page_preview=False
        )
        await callback.answer()
    
    except Exception as e:
        logger.error(f"Error in show_mini_lesson: {e}", exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —É—Ä–æ–∫–∞", show_alert=True)
