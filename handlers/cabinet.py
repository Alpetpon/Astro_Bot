from datetime import datetime
from aiogram import Router, F
from aiogram.types import CallbackQuery
from sqlalchemy.orm import Session

from database import get_db, User, Payment
from data import get_course_by_slug, get_consultation_by_slug
from keyboards import get_back_keyboard

router = Router()


@router.callback_query(F.data == "my_cabinet")
async def show_my_cabinet(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç —Å –æ–ø–ª–∞—á–µ–Ω–Ω—ã–º–∏ –∫—É—Ä—Å–∞–º–∏ –∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è–º–∏"""
    db: Session = get_db()
    
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        user = db.query(User).filter(User.telegram_id == callback.from_user.id).first()
        if user:
            user.last_activity = datetime.utcnow()
            db.commit()
        
        if not user:
            await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É—Å–ø–µ—à–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        payments = db.query(Payment).filter(
            Payment.user_id == user.id,
            Payment.status == 'succeeded'
        ).order_by(Payment.paid_at.desc()).all()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        text = "üè† **–ú–æ–π –∫–∞–±–∏–Ω–µ—Ç**\n\n"
        
        if not payments:
            text += "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∫—É—Ä—Å–æ–≤ –∏–ª–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π.\n\n"
            text += "üìö –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –∫—É—Ä—Å –∏–ª–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é!"
        else:
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º
            courses_slugs = set()
            consultations_slugs = set()
            guides_count = 0
            
            for payment in payments:
                if payment.product_type == 'course' and payment.course_slug:
                    courses_slugs.add(payment.course_slug)
                elif payment.product_type == 'consultation' and payment.consultation_slug:
                    consultations_slugs.add(payment.consultation_slug)
                elif payment.product_type == 'guide':
                    guides_count += 1
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—É—Ä—Å—ã
            if courses_slugs:
                text += "üìö **–ú–æ–∏ –∫—É—Ä—Å—ã:**\n\n"
                for slug in courses_slugs:
                    course = get_course_by_slug(slug)
                    if course:
                        emoji = course.get('emoji', 'üìö')
                        text += f"{emoji} {course['name']}\n"
                    else:
                        text += f"üìö {slug}\n"
                text += "\n"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
            if consultations_slugs:
                text += "üîÆ **–ú–æ–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:**\n\n"
                for slug in consultations_slugs:
                    consultation = get_consultation_by_slug(slug)
                    if consultation:
                        emoji = consultation.get('emoji', 'üîÆ')
                        text += f"{emoji} {consultation['name']}\n"
                    else:
                        text += f"üîÆ {slug}\n"
                text += "\n"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–∞–π–¥—ã
            if guides_count > 0:
                text += f"üíù **–ì–∞–π–¥—ã:** {guides_count} —à—Ç.\n\n"
            
            text += "üì© –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —á–µ—Ä–µ–∑ @username"
        
        await callback.message.edit_text(
            text,
            reply_markup=get_back_keyboard("main_menu", "üè† –í –º–µ–Ω—é"),
            parse_mode="Markdown"
        )
        await callback.answer()
    
    except Exception as e:
        print(f"Error in show_my_cabinet: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
    
    finally:
        db.close()
