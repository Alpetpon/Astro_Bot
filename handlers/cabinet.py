from datetime import datetime
from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton

from database import get_db, User, Payment
from keyboards import get_back_keyboard
from data import get_course_by_slug, get_consultation_by_slug

router = Router()


@router.callback_query(F.data == "my_cabinet")
async def show_my_cabinet(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç"""
    db = get_db()
    
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        user = db.query(User).filter(User.telegram_id == callback.from_user.id).first()
        if user:
            user.last_activity = datetime.utcnow()
            db.commit()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        username = callback.from_user.username or "–Ω–µ —É–∫–∞–∑–∞–Ω"
        first_name = callback.from_user.first_name or ""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞—Ç–µ–∂–∏
        payments = db.query(Payment).filter(
            Payment.user_id == user.id,
            Payment.status == 'succeeded'
        ).all()
        
        # –°—á–∏—Ç–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        courses_count = len([p for p in payments if p.product_type == 'course'])
        consultations_count = len([p for p in payments if p.product_type == 'consultation'])
        guides_count = len([p for p in payments if p.product_type == 'guide'])
        total_spent = sum(p.amount for p in payments)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        text = f"üè† <b>–ú–æ–π –∫–∞–±–∏–Ω–µ—Ç</b>\n\n"
        text += f"üë§ <b>{first_name}</b>\n"
        text += f"üÜî @{username}\n"
        text += f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user.created_at.strftime('%d.%m.%Y')}\n\n"
        
        text += "üìä <b>–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        text += f"üìö –ö—É—Ä—Å–æ–≤: {courses_count}\n"
        text += f"üîÆ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π: {consultations_count}\n"
        text += f"üíù –ì–∞–π–¥–æ–≤: {guides_count}\n"
        text += f"üí∞ –í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ: {total_spent:,.0f} ‚ÇΩ\n\n"
        
        # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        buttons = []
        
        if payments:
            text += "üí≥ <b>–ú–æ–∏ –ø–æ–∫—É–ø–∫–∏:</b>\n\n"
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ–∫—É–ø–∫–∏ –ø–æ —Ç–∏–ø—É
            courses = [p for p in payments if p.product_type == 'course']
            consultations = [p for p in payments if p.product_type == 'consultation']
            
            if courses:
                text += "üìö <b>–ö—É—Ä—Å—ã:</b>\n"
                for payment in courses:
                    course = get_course_by_slug(payment.course_slug)
                    if course:
                        course_name = course.get('name', payment.course_slug)
                        emoji = course.get('emoji', 'üìö')
                        text += f"‚Ä¢ {emoji} {course_name}\n"
                        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –∫—É—Ä—Å—É
                        buttons.append([InlineKeyboardButton(
                            text=f"{emoji} {course_name}",
                            callback_data=f"course_{payment.course_slug}"
                        )])
                text += "\n"
            
            if consultations:
                text += "üîÆ <b>–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:</b>\n"
                for payment in consultations:
                    consultation = get_consultation_by_slug(payment.consultation_slug)
                    if consultation:
                        consultation_name = consultation.get('name', payment.consultation_slug)
                        emoji = consultation.get('emoji', 'üîÆ')
                        text += f"‚Ä¢ {emoji} {consultation_name}\n"
                        paid_date = payment.paid_at.strftime('%d.%m.%Y') if payment.paid_at else "–Ω–µ–¥–∞–≤–Ω–æ"
                        text += f"  –û–ø–ª–∞—á–µ–Ω–æ: {paid_date}\n"
                text += "\n"
        else:
            text += "üìö –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –∫—É—Ä—Å–æ–≤ –∏–ª–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π.\n\n"
            text += "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∫–∞—Ç–∞–ª–æ–≥, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∫—É—Ä—Å!"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –∫–∞—Ç–∞–ª–æ–≥–∞–º
            buttons.append([InlineKeyboardButton(text="üìö –ö–∞—Ç–∞–ª–æ–≥ –∫—É—Ä—Å–æ–≤", callback_data="courses")])
            buttons.append([InlineKeyboardButton(text="üîÆ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏", callback_data="consultations")])
            buttons.append([InlineKeyboardButton(text="üíï –ì–∞–π–¥—ã", callback_data="guides_list")])
        
        # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
        buttons.append([InlineKeyboardButton(text="‚óÄÔ∏è –í –º–µ–Ω—é", callback_data="main_menu")])
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        
        await callback.message.edit_text(
            text,
            reply_markup=keyboard
        )
        await callback.answer()
    
    except Exception as e:
        print(f"Error in show_my_cabinet: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
    
    finally:
        db.close()


# –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –¥—Ä—É–≥–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–∞–±–∏–Ω–µ—Ç–∞ (–Ω–∞ –±—É–¥—É—â–µ–µ)

@router.callback_query(F.data == "my_courses")
async def show_my_courses(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –∫—É—Ä—Å—ã (–∑–∞–≥–ª—É—à–∫–∞)"""
    await callback.message.edit_text(
        "üìö <b>–ú–æ–∏ –∫—É—Ä—Å—ã</b>\n\n"
        "üîß –†–∞–∑–¥–µ–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n"
        "–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –ø–æ—è–≤—è—Ç—Å—è –≤–∞—à–∏ –∫—É—Ä—Å—ã —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ —É—Ä–æ–∫–∞–º!",
        reply_markup=get_back_keyboard("my_cabinet", "‚óÄÔ∏è –í –∫–∞–±–∏–Ω–µ—Ç")
    )
    await callback.answer()


@router.callback_query(F.data.startswith("my_course_"))
async def show_my_course(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∫—É—Ä—Å (–∑–∞–≥–ª—É—à–∫–∞)"""
    await callback.message.edit_text(
        "üìñ <b>–ö—É—Ä—Å</b>\n\n"
        "üîß –†–∞–∑–¥–µ–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.",
        reply_markup=get_back_keyboard("my_courses", "‚óÄÔ∏è –ö –∫—É—Ä—Å–∞–º")
    )
    await callback.answer()
