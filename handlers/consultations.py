import json
from datetime import datetime
from aiogram import Router, F
from aiogram.types import CallbackQuery
from aiogram.exceptions import TelegramBadRequest
from sqlalchemy.orm import Session

from database import get_db, Consultation, ConsultationOption, User
from keyboards import (
    get_consultations_keyboard,
    get_consultation_detail_keyboard,
    get_consultation_options_keyboard,
    get_back_keyboard
)

router = Router()


@router.callback_query(F.data == "consultations")
async def show_consultations_catalog(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π"""
    db: Session = get_db()
    
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        user = db.query(User).filter(User.telegram_id == callback.from_user.id).first()
        if user:
            user.last_activity = datetime.utcnow()
            db.commit()
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
        consultations = db.query(Consultation).filter(
            Consultation.is_active == True
        ).order_by(Consultation.order).all()
        
        if not consultations:
            await callback.message.edit_text(
                "üîÆ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π.",
                reply_markup=get_back_keyboard("main_menu")
            )
        else:
            text = "üîÆ **–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–æ–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏**\n\n"
            text += "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å —É—Å–ª—É–≥—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:"
            
            await callback.message.edit_text(
                text,
                reply_markup=get_consultations_keyboard(consultations),
                parse_mode="Markdown"
            )
        
        await callback.answer()
    
    finally:
        db.close()


@router.callback_query(F.data.startswith("consultation_book_"))
async def show_consultation_booking(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –¥–ª—è –∑–∞–ø–∏—Å–∏"""
    consultation_slug = callback.data.replace("consultation_book_", "")
    
    db: Session = get_db()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
        consultation = db.query(Consultation).filter(
            Consultation.slug == consultation_slug,
            Consultation.is_active == True
        ).first()
        
        if not consultation:
            await callback.answer("–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö
        if consultation.options:
            options = db.query(ConsultationOption).filter(
                ConsultationOption.consultation_id == consultation.id,
                ConsultationOption.is_active == True
            ).order_by(ConsultationOption.order).all()
            
            text = f"üìù **–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç**\n\n"
            text += f"{consultation.emoji} {consultation.name}\n\n"
            text += "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞–º –≤–∞—Ä–∏–∞–Ω—Ç:"
            
            await callback.message.edit_text(
                text,
                reply_markup=get_consultation_options_keyboard(consultation_slug, options),
                parse_mode="Markdown"
            )
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ - —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–ø–ª–∞—Ç–µ
            # TODO: –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
            text = f"üìù **–ó–∞–ø–∏—Å—å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é**\n\n"
            text += f"{consultation.emoji} {consultation.name}\n"
            text += f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {consultation.price:,.0f} ‚ÇΩ\n"
            text += f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {consultation.duration}\n\n"
            text += "–î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–û–ø–ª–∞—Ç–∏—Ç—å¬ª"
            
            # TODO: –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É –æ–ø–ª–∞—Ç—ã
            await callback.message.edit_text(
                text,
                reply_markup=get_back_keyboard(f"consultation_{consultation_slug}"),
                parse_mode="Markdown"
            )
        
        await callback.answer()
    
    finally:
        db.close()


@router.callback_query(F.data.startswith("consultation_"))
async def show_consultation_detail(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏"""
    # –ò–∑–≤–ª–µ–∫–∞–µ–º slug –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
    parts = callback.data.split("_")
    
    if len(parts) < 2:
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏", show_alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –Ω–∞–≤–∏–≥–∞—Ü–∏—è –∏–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä
    if parts[1] == "info":
        consultation_slug = "_".join(parts[2:])
        show_section = "info"
    elif parts[1] == "details":
        consultation_slug = "_".join(parts[2:])
        show_section = "details"
    elif parts[1] == "price":
        consultation_slug = "_".join(parts[2:])
        show_section = "price"
    else:
        consultation_slug = "_".join(parts[1:])
        show_section = "info"
    
    db: Session = get_db()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
        consultation = db.query(Consultation).filter(
            Consultation.slug == consultation_slug,
            Consultation.is_active == True
        ).first()
        
        if not consultation:
            await callback.answer("–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–µ–∫—Ü–∏–∏
        if show_section == "info":
            text = f"{consultation.emoji} **{consultation.name}**\n\n"
            
            if consultation.short_description:
                text += f"{consultation.short_description}\n\n"
            
            if consultation.for_whom:
                text += f"**–î–ª—è –∫–æ–≥–æ —ç—Ç–æ:**\n{consultation.for_whom}\n\n"
            
            if consultation.duration:
                text += f"‚è± **–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** {consultation.duration}\n"
            
            if consultation.price:
                text += f"üí∞ **–°—Ç–æ–∏–º–æ—Å—Ç—å:** {consultation.price:,.0f} ‚ÇΩ\n"
        
        elif show_section == "details":
            text = f"{consultation.emoji} **{consultation.name}**\n\n"
            
            if consultation.what_included:
                text += "**–ß—Ç–æ –≤—Ö–æ–¥–∏—Ç:**\n"
                try:
                    included = json.loads(consultation.what_included)
                    for item in included:
                        text += f"‚Ä¢ {item}\n"
                    text += "\n"
                except:
                    text += f"{consultation.what_included}\n\n"
            
            if consultation.format_info:
                text += f"**–§–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç—ã:**\n{consultation.format_info}\n\n"
            
            if consultation.result:
                text += f"**–†–µ–∑—É–ª—å—Ç–∞—Ç:**\n{consultation.result}\n"
        
        elif show_section == "price":
            text = f"{consultation.emoji} **{consultation.name}**\n\n"
            
            if consultation.options:
                text += "**–í–∞—Ä–∏–∞–Ω—Ç—ã –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å:**\n\n"
                
                options = db.query(ConsultationOption).filter(
                    ConsultationOption.consultation_id == consultation.id,
                    ConsultationOption.is_active == True
                ).order_by(ConsultationOption.order).all()
                
                for option in options:
                    text += f"**{option.name}** ‚Äî {option.price:,.0f} ‚ÇΩ\n"
                    if option.description:
                        text += f"{option.description}\n"
                    
                    if option.duration:
                        text += f"‚è± {option.duration}\n"
                    
                    if option.features:
                        try:
                            features = json.loads(option.features)
                            for feature in features:
                                text += f"  ‚Ä¢ {feature}\n"
                        except:
                            pass
                    
                    text += "\n"
            else:
                if consultation.price:
                    text += f"**–°—Ç–æ–∏–º–æ—Å—Ç—å:** {consultation.price:,.0f} ‚ÇΩ\n\n"
                if consultation.duration:
                    text += f"**–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** {consultation.duration}\n"
        
        try:
            await callback.message.edit_text(
                text,
                reply_markup=get_consultation_detail_keyboard(consultation_slug),
                parse_mode="Markdown"
            )
        except TelegramBadRequest:
            # –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
            pass
        
        await callback.answer()
    
    finally:
        db.close()

