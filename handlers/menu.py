from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton

from config import config
from database import get_db, UserRepository
from data import get_active_guides, get_guide_by_id, get_mini_course, get_mini_course_tariff
from keyboards import get_main_menu_keyboard, get_back_keyboard, get_guides_list_keyboard, get_guide_keyboard, get_about_me_keyboard, get_mini_course_keyboard, get_mini_course_tariff_keyboard

router = Router()


@router.callback_query(F.data == "main_menu")
async def show_main_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    db = await get_db()
    user_repo = UserRepository(db)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await user_repo.update_activity(callback.from_user.id)
    
    try:
        await callback.message.edit_text(
            "üè† **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**",
            reply_markup=get_main_menu_keyboard(),
            parse_mode="Markdown"
        )
    except Exception:
        # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –≤–∏–¥–µ–æ (–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ) –∏–ª–∏ —Ñ–æ—Ç–æ (–æ—Ç–∑—ã–≤—ã)
        if callback.message.video:
            # –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤–∏–¥–µ–æ - –ù–ï —É–¥–∞–ª—è–µ–º, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –º–µ–Ω—é
            await callback.bot.send_message(
                chat_id=callback.message.chat.id,
                text="üè† **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª:",
                reply_markup=get_main_menu_keyboard(),
                parse_mode="Markdown"
            )
        else:
            # –ï—Å–ª–∏ —ç—Ç–æ —Ñ–æ—Ç–æ –∏–ª–∏ –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - —É–¥–∞–ª—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            try:
                await callback.message.delete()
            except Exception:
                pass
            
            await callback.bot.send_message(
                chat_id=callback.message.chat.id,
                text="üè† **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª:",
                reply_markup=get_main_menu_keyboard(),
                parse_mode="Markdown"
            )
    await callback.answer()


@router.callback_query(F.data == "about_me")
async def show_about_me(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Å–æ—Ü. —Å–µ—Ç–µ–π"""
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –±–µ–∑ –≤–∏–¥–µ–æ
    text = config.ABOUT_ME_TEXT + "\n\n–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –≤ –º–æ–∏ —Å–æ—Ü. —Å–µ—Ç–∏:"
    await callback.message.edit_text(
        text,
        reply_markup=get_about_me_keyboard(),
        parse_mode="Markdown"
    )
    
    await callback.answer()



@router.callback_query(F.data == "guides_list")
async def show_guides_list(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≥–∞–π–¥–æ–≤"""
    text = "üíï **–ì–∞–π–¥—ã**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≥–∞–π–¥:"
    
    try:
        await callback.message.edit_text(
            text,
            reply_markup=get_guides_list_keyboard(),
            parse_mode="Markdown"
        )
    except Exception:
        # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –≤–∏–¥–µ–æ –∏–ª–∏ –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if callback.message.video:
            # –ï—Å–ª–∏ –≤–∏–¥–µ–æ - –ù–ï —É–¥–∞–ª—è–µ–º, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            await callback.bot.send_message(
                chat_id=callback.message.chat.id,
                text=text,
                reply_markup=get_guides_list_keyboard(),
                parse_mode="Markdown"
            )
        else:
            # –ï—Å–ª–∏ —ç—Ç–æ —Ñ–æ—Ç–æ –∏–ª–∏ –¥—Ä—É–≥–æ–µ - —É–¥–∞–ª—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            try:
                await callback.message.delete()
            except Exception:
                pass
            
            await callback.bot.send_message(
                chat_id=callback.message.chat.id,
                text=text,
                reply_markup=get_guides_list_keyboard(),
                parse_mode="Markdown"
            )
    await callback.answer()


@router.callback_query(F.data.startswith("guide_"))
async def show_guide(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –≥–∞–π–¥–µ"""
    guide_id = callback.data.replace("guide_", "")
    
    # –ù–∞—Ö–æ–¥–∏–º –≥–∞–π–¥ –≤ JSON
    guide = get_guide_by_id(guide_id)
    
    if not guide or not guide.get('is_active', True):
        await callback.answer("–ì–∞–π–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # –ì–∞–π–¥—ã –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞
    has_file = bool(guide.get('file_id'))
    related_course_slug = guide.get('related_course_slug')
    
    await callback.message.edit_text(
        guide.get('description') or guide['name'],
        reply_markup=get_guide_keyboard(guide_id, has_file, related_course_slug),
        parse_mode="Markdown"
    )
    await callback.answer()


@router.callback_query(F.data.startswith("download_guide_"))
async def download_guide(callback: CallbackQuery):
    """–°–∫–∞—á–∞—Ç—å –≥–∞–π–¥ (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)"""
    guide_id = callback.data.replace("download_guide_", "")
    
    # –ù–∞—Ö–æ–¥–∏–º –≥–∞–π–¥ –≤ JSON
    guide = get_guide_by_id(guide_id)
    
    if not guide or not guide.get('is_active', True):
        await callback.answer("–ì–∞–π–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    file_id = guide.get('file_id')
    
    if not file_id:
        await callback.answer("–§–∞–π–ª –≥–∞–π–¥–∞ –ø–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω. –°–∫–æ—Ä–æ –ø–æ—è–≤–∏—Ç—Å—è!", show_alert=True)
        return
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        await callback.message.answer_document(
            document=file_id,
            caption=f"üì• {guide.get('emoji') or 'üíù'} {guide['name']}\n\nüéÅ –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∏–∑—É—á–µ–Ω–∏—è!"
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
        buttons = []
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–≤—è–∑–∞–Ω–Ω—ã–π –∫—É—Ä—Å, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ—Ö–æ–¥–∞
        if guide.get('related_course_slug'):
            buttons.append([InlineKeyboardButton(
                text="üìö –ü–µ—Ä–µ–π—Ç–∏ –∫ –∫—É—Ä—Å—É",
                callback_data=f"course_{guide['related_course_slug']}"
            )])
        
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        buttons.append([
            InlineKeyboardButton(text="‚óÄÔ∏è –ö –≥–∞–π–¥–∞–º", callback_data="guides_list"),
            InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="main_menu")
        ])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        await callback.message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard
        )
        
        await callback.answer("–ì–∞–π–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
    
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {str(e)}", show_alert=True)


@router.callback_query(F.data == "mini_course")
async def show_mini_course(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∏–Ω–∏-–∫—É—Ä—Å–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - –û –∫—É—Ä—Å–µ)"""
    await show_mini_course_about(callback)


@router.callback_query(F.data == "mini_course_about")
async def show_mini_course_about(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞–∑–¥–µ–ª '–û –∫—É—Ä—Å–µ'"""
    mini_course = get_mini_course()
    
    if not mini_course or not mini_course.get('is_active', False):
        await callback.answer("–ú–∏–Ω–∏-–∫—É—Ä—Å –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç "–û –∫—É—Ä—Å–µ"
    text = f"{mini_course['emoji']} {mini_course['title']}\n"
    text += f"{mini_course['subtitle']}\n\n"
    text += f"üìÖ –°—Ç–∞—Ä—Ç: {mini_course['start_date']}\n\n"
    text += f"{mini_course['description']}\n\n"
    
    # –ß—Ç–æ –ø–æ–ª—É—á–∏—à—å
    text += "üíé –í –∏—Ç–æ–≥–µ —Ç—ã –ø–æ–ª—É—á–∏—à—å:\n\n"
    for benefit in mini_course.get('benefits', []):
        text += f"‚úîÔ∏è {benefit}\n"
    text += f"\n{mini_course.get('format', '')}"
    
    try:
        await callback.message.edit_text(
            text,
            reply_markup=get_mini_course_keyboard()
        )
    except Exception:
        # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —ç—Ç–æ –≤–∏–¥–µ–æ)
        try:
            await callback.message.delete()
        except Exception:
            pass
        
        await callback.bot.send_message(
            chat_id=callback.message.chat.id,
            text=text,
            reply_markup=get_mini_course_keyboard()
        )
    
    await callback.answer()


@router.callback_query(F.data == "mini_course_program")
async def show_mini_course_program(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞–∑–¥–µ–ª '–ü—Ä–æ–≥—Ä–∞–º–º–∞'"""
    mini_course = get_mini_course()
    
    if not mini_course or not mini_course.get('is_active', False):
        await callback.answer("–ú–∏–Ω–∏-–∫—É—Ä—Å –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç "–ü—Ä–æ–≥—Ä–∞–º–º–∞"
    text = f"üåü –ü—Ä–æ–≥—Ä–∞–º–º–∞ –º–∏–Ω–∏-–∫—É—Ä—Å–∞\n\n"
    
    for day_info in mini_course.get('program', []):
        text += f"{day_info['emoji']} –î–µ–Ω—å {day_info['day']}. {day_info['title']}\n"
        text += f"{day_info['description']}\n"
        text += f"‚ú® {day_info['practice']}\n\n"
    
    try:
        await callback.message.edit_text(
            text,
            reply_markup=get_mini_course_keyboard()
        )
    except Exception:
        pass
    
    await callback.answer()


@router.callback_query(F.data == "mini_course_price")
async def show_mini_course_price(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞–∑–¥–µ–ª '–°—Ç–æ–∏–º–æ—Å—Ç—å'"""
    mini_course = get_mini_course()
    
    if not mini_course or not mini_course.get('is_active', False):
        await callback.answer("–ú–∏–Ω–∏-–∫—É—Ä—Å –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç "–°—Ç–æ–∏–º–æ—Å—Ç—å"
    text = f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å —É—á–∞—Å—Ç–∏—è\n\n"
    
    for tariff in mini_course.get('tariffs', []):
        text += f"{tariff['emoji']} {tariff['name']} - {tariff['price']} ‚ÇΩ\n\n"
        text += "–ß—Ç–æ –≤—Ö–æ–¥–∏—Ç:\n"
        for feature in tariff.get('features', []):
            text += f"‚úîÔ∏è {feature}\n"
        text += "\n"
    
    text += f"{mini_course.get('summary', '')}"
    
    try:
        await callback.message.edit_text(
            text,
            reply_markup=get_mini_course_keyboard()
        )
    except Exception:
        pass
    
    await callback.answer()


@router.callback_query(F.data == "mini_course_register")
async def show_mini_course_tariff_selection(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä —Ç–∞—Ä–∏—Ñ–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –º–∏–Ω–∏-–∫—É—Ä—Å"""
    mini_course = get_mini_course()
    
    if not mini_course or not mini_course.get('is_active', False):
        await callback.answer("–ú–∏–Ω–∏-–∫—É—Ä—Å –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
        return
    
    tariffs = mini_course.get('tariffs', [])
    
    if not tariffs:
        await callback.answer("–¢–∞—Ä–∏—Ñ—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
        return
    
    text = f"üìù –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ\n\n"
    text += f"–ú–∏–Ω–∏-–∫—É—Ä—Å: {mini_course.get('title', '–ú–∏–Ω–∏-–∫—É—Ä—Å')}\n"
    text += f"{mini_course.get('subtitle', '')}\n\n"
    text += "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞–º –≤–∞—Ä–∏–∞–Ω—Ç –æ–±—É—á–µ–Ω–∏—è:"
    
    await callback.message.edit_text(
        text,
        reply_markup=get_mini_course_tariff_keyboard()
    )
    await callback.answer()
