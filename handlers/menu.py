from datetime import datetime
from aiogram import Router, F
from aiogram.types import CallbackQuery
from sqlalchemy.orm import Session

from config import config
from database import get_db, User
from keyboards import get_main_menu_keyboard, get_back_keyboard, get_guides_list_keyboard, get_guide_keyboard, get_about_me_keyboard

router = Router()


@router.callback_query(F.data == "main_menu")
async def show_main_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    db: Session = get_db()
    
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = db.query(User).filter(User.telegram_id == callback.from_user.id).first()
        if user:
            user.last_activity = datetime.utcnow()
            db.commit()
        
        await callback.message.edit_text(
            "üè† **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª:",
            reply_markup=get_main_menu_keyboard(),
            parse_mode="Markdown"
        )
        await callback.answer()
    
    finally:
        db.close()


@router.callback_query(F.data == "about_me")
async def show_about_me(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Å–æ—Ü. —Å–µ—Ç–µ–π"""
    text = config.ABOUT_ME_TEXT + "\n\nüì± **–ú–æ–∏ —Å–æ—Ü. —Å–µ—Ç–∏:**"
    await callback.message.edit_text(
        text,
        reply_markup=get_about_me_keyboard(),
        parse_mode="Markdown"
    )
    await callback.answer()


@router.callback_query(F.data == "about_me_2")
async def show_about_me_2(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ —Å–æ—Ü. —Å–µ—Ç–∏"""
    text = config.ABOUT_ME_TEXT + f"\n\nüì± **–ú–æ–∏ —Å–æ—Ü. —Å–µ—Ç–∏:**\n\n"
    text += f"üì± [Instagram]({config.INSTAGRAM_URL})\n"
    text += f"üé• [YouTube]({config.YOUTUBE_URL})\n"
    text += f"üíô [–í–ö–æ–Ω—Ç–∞–∫—Ç–µ]({config.VK_URL})\n"
    text += f"‚úàÔ∏è [Telegram –∫–∞–Ω–∞–ª]({config.TELEGRAM_CHANNEL_URL})\n"
    text += f"üì∞ [–î–∑–µ–Ω]({config.DZEN_URL})"
    
    await callback.message.edit_text(
        text,
        reply_markup=get_back_keyboard("main_menu", "‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"),
        parse_mode="Markdown",
        disable_web_page_preview=True
    )
    await callback.answer()


@router.callback_query(F.data == "guides_list")
async def show_guides_list(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≥–∞–π–¥–æ–≤"""
    text = "üíï **–ì–∞–π–¥—ã**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≥–∞–π–¥:"
    
    await callback.message.edit_text(
        text,
        reply_markup=get_guides_list_keyboard(),
        parse_mode="Markdown"
    )
    await callback.answer()


@router.callback_query(F.data.startswith("guide_"))
async def show_guide(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –≥–∞–π–¥–µ"""
    guide_id = callback.data.replace("guide_", "")
    
    # –ù–∞—Ö–æ–¥–∏–º –≥–∞–π–¥ –≤ –∫–æ–Ω—Ñ–∏–≥–µ
    guide = next((g for g in config.GUIDES if g['id'] == guide_id), None)
    
    if not guide:
        await callback.answer("–ì–∞–π–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —ç—Ç–æ—Ç –≥–∞–π–¥ (–∫—É–ø–∏–ª –ª–∏ –æ–Ω –µ–≥–æ)
    db: Session = get_db()
    try:
        user = db.query(User).filter(User.telegram_id == callback.from_user.id).first()
        has_access = False
        
        if user:
            from database import Payment
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞ —ç—Ç–æ–≥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≥–∞–π–¥–∞
            payment = db.query(Payment).filter(
                Payment.user_id == user.id,
                Payment.product_type == 'guide',
                Payment.product_id == guide_id,
                Payment.status == 'succeeded'
            ).first()
            
            if payment:
                has_access = True
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–∫–∞—á–∞—Ç—å –µ—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø, –∏–Ω–∞—á–µ –∫–Ω–æ–ø–∫—É –ø–æ–∫—É–ø–∫–∏
        has_file = has_access and guide.get('file_id')
        
        await callback.message.edit_text(
            guide['description'],
            reply_markup=get_guide_keyboard(guide_id, has_file),
            parse_mode="Markdown"
        )
        await callback.answer()
    
    finally:
        db.close()


@router.callback_query(F.data.startswith("download_guide_"))
async def download_guide(callback: CallbackQuery):
    """–°–∫–∞—á–∞—Ç—å –≥–∞–π–¥ (–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ–≥–æ –∫—É–ø–∏–ª)"""
    guide_id = callback.data.replace("download_guide_", "")
    
    # –ù–∞—Ö–æ–¥–∏–º –≥–∞–π–¥ –≤ –∫–æ–Ω—Ñ–∏–≥–µ
    guide = next((g for g in config.GUIDES if g['id'] == guide_id), None)
    
    if not guide:
        await callback.answer("–ì–∞–π–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    db: Session = get_db()
    try:
        user = db.query(User).filter(User.telegram_id == callback.from_user.id).first()
        
        if not user:
            await callback.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        from database import Payment
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫—É–ø–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —ç—Ç–æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≥–∞–π–¥
        payment = db.query(Payment).filter(
            Payment.user_id == user.id,
            Payment.product_type == 'guide',
            Payment.product_id == guide_id,
            Payment.status == 'succeeded'
        ).first()
        
        if not payment:
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –≥–∞–π–¥—É", show_alert=True)
            return
        
        file_id = guide.get('file_id')
        
        if not file_id:
            await callback.answer("–§–∞–π–ª –≥–∞–π–¥–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", show_alert=True)
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        await callback.message.answer_document(
            document=file_id,
            caption=f"üì• {guide['name']}\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!"
        )
        await callback.answer("–ì–∞–π–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
    
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {str(e)}", show_alert=True)
    
    finally:
        db.close()


@router.callback_query(F.data.startswith("buy_guide_"))
async def buy_guide(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ –≥–∞–π–¥–∞"""
    guide_id = callback.data.replace("buy_guide_", "")
    
    # –ù–∞—Ö–æ–¥–∏–º –≥–∞–π–¥ –≤ –∫–æ–Ω—Ñ–∏–≥–µ
    guide = next((g for g in config.GUIDES if g['id'] == guide_id), None)
    
    if not guide:
        await callback.answer("–ì–∞–π–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    from payments import YooKassaPayment
    from database import User, Payment
    
    db: Session = get_db()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = db.query(User).filter(User.telegram_id == callback.from_user.id).first()
        
        if not user:
            await callback.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –¥–ª—è –≥–∞–π–¥–∞ (–±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –∫—É—Ä—Å—É)
        payment = Payment(
            user_id=user.id,
            course_id=None,  # –ì–∞–π–¥ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫—É—Ä—Å–æ–º
            tariff_id=None,
            amount=guide['price'],
            status='pending',
            product_type='guide',
            product_id=guide_id  # ID –≥–∞–π–¥–∞ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        )
        db.add(payment)
        db.commit()
        db.refresh(payment)
        
        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –ÆKassa
        yookassa = YooKassaPayment()
        payment_data = yookassa.create_payment(
            amount=guide['price'],
            description=guide['name'],
            payment_id=payment.id
        )
        
        if payment_data and 'confirmation' in payment_data:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞
            payment.payment_id = payment_data['id']
            payment.confirmation_url = payment_data['confirmation']['confirmation_url']
            db.commit()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –æ–ø–ª–∞—Ç—ã
            from keyboards import get_payment_keyboard
            await callback.message.edit_text(
                f"üí≥ **–û–ø–ª–∞—Ç–∞ {guide['name']}**\n\n"
                f"–°—É–º–º–∞: {guide['price']} ‚ÇΩ\n\n"
                "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ.\n"
                "–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –≥–∞–π–¥ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤–∞–º.",
                reply_markup=get_payment_keyboard(payment.confirmation_url, payment.id),
                parse_mode="Markdown"
            )
        else:
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞", show_alert=True)
            payment.status = 'canceled'
            db.commit()
    
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}", show_alert=True)
    
    finally:
        db.close()
    
    await callback.answer()

