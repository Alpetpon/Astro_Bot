"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–∞–π–¥–∞–º–∏ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
"""
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy import func

from config import config
from database import get_db, Guide, Course

router = Router()


class GuideManagement(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–∞–π–¥–∞–º–∏"""
    creating_name = State()
    creating_guide_id = State()
    creating_emoji = State()
    creating_description = State()
    creating_file_id = State()
    creating_related_course = State()
    editing_name = State()
    editing_emoji = State()
    editing_description = State()
    editing_file_id = State()
    editing_related_course = State()


def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    return user_id == config.ADMIN_ID


# ==================== –°–ø–∏—Å–æ–∫ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –≥–∞–π–¥–æ–≤ ====================

@router.callback_query(F.data == "admin_guides")
async def show_guides_management(callback: CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–∞–π–¥–∞–º–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    db = get_db()
    guides = db.query(Guide).order_by(Guide.order).all()
    
    text = "üíù <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–∞–π–¥–∞–º–∏</b>\n\n"
    
    if guides:
        for guide in guides:
            status = "‚úÖ" if guide.is_active else "‚ùå"
            file_status = "üìÑ" if guide.file_id else "‚ö†Ô∏è"
            course_info = f" ‚Üí {guide.related_course_slug}" if guide.related_course_slug else ""
            text += f"{status} {file_status} {guide.emoji or 'üíù'} {guide.name}{course_info}\n"
    else:
        text += "–ì–∞–π–¥—ã –ø–æ–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã\n"
    
    text += "\nüí° –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –≥–∞–π–¥ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
    
    # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = InlineKeyboardBuilder()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≥–∞–π–¥–∞
    for guide in guides:
        keyboard.button(
            text=f"{guide.emoji or 'üíù'} {guide.name}",
            callback_data=f"manage_guide_{guide.id}"
        )
    
    # –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –≥–∞–π–¥–∞
    keyboard.button(text="‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –≥–∞–π–¥", callback_data="create_guide_start")
    keyboard.button(text="üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="back_to_admin")
    keyboard.adjust(1)
    
    await callback.message.edit_text(text, reply_markup=keyboard.as_markup())
    await callback.answer()


@router.callback_query(F.data == "create_guide_start")
async def create_guide_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –≥–∞–π–¥–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    await state.set_state(GuideManagement.creating_name)
    await callback.message.edit_text(
        "üíù <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≥–∞–π–¥–∞</b>\n\n"
        "–®–∞–≥ 1/6: –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–∞–π–¥–∞:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_guides")]
        ])
    )
    await callback.answer()


@router.message(GuideManagement.creating_name)
async def create_guide_name(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∏ –∑–∞–ø—Ä–æ—Å ID"""
    await state.update_data(name=message.text)
    await state.set_state(GuideManagement.creating_guide_id)
    
    await message.answer(
        "üíù <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≥–∞–π–¥–∞</b>\n\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {message.text}\n\n"
        "–®–∞–≥ 2/6: –í–≤–µ–¥–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –≥–∞–π–¥–∞ (–ª–∞—Ç–∏–Ω–∏—Ü–∞, –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤):",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_guides")]
        ])
    )


@router.message(GuideManagement.creating_guide_id)
async def create_guide_id(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID –∏ –∑–∞–ø—Ä–æ—Å —ç–º–æ–¥–∑–∏"""
    guide_id = message.text.strip().lower().replace(" ", "-")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ ID
    db = get_db()
    existing = db.query(Guide).filter(Guide.guide_id == guide_id).first()
    if existing:
        await message.answer(
            "‚ùå –ì–∞–π–¥ —Å —Ç–∞–∫–∏–º ID —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π ID:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_guides")]
            ])
        )
        return
    
    await state.update_data(guide_id=guide_id)
    await state.set_state(GuideManagement.creating_emoji)
    
    data = await state.get_data()
    await message.answer(
        "üíù <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≥–∞–π–¥–∞</b>\n\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {data['name']}\n"
        f"ID: {guide_id}\n\n"
        "–®–∞–≥ 3/6: –í–≤–µ–¥–∏—Ç–µ —ç–º–æ–¥–∑–∏ –¥–ª—è –≥–∞–π–¥–∞ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_guides")]
        ])
    )


@router.message(GuideManagement.creating_emoji)
async def create_guide_emoji(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –∏ –∑–∞–ø—Ä–æ—Å –æ–ø–∏—Å–∞–Ω–∏—è"""
    emoji = message.text if message.text != '-' else None
    await state.update_data(emoji=emoji)
    await state.set_state(GuideManagement.creating_description)
    
    data = await state.get_data()
    await message.answer(
        "üíù <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≥–∞–π–¥–∞</b>\n\n"
        f"{emoji or 'üíù'} {data['name']}\n"
        f"ID: {data['guide_id']}\n\n"
        "–®–∞–≥ 4/6: –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≥–∞–π–¥–∞:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_guides")]
        ])
    )


@router.message(GuideManagement.creating_description)
async def create_guide_description(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –∏ –∑–∞–ø—Ä–æ—Å —Ñ–∞–π–ª–∞"""
    await state.update_data(description=message.text)
    await state.set_state(GuideManagement.creating_file_id)
    
    data = await state.get_data()
    await message.answer(
        "üíù <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≥–∞–π–¥–∞</b>\n\n"
        f"{data.get('emoji') or 'üíù'} {data['name']}\n\n"
        "–®–∞–≥ 5/6: –û—Ç–ø—Ä–∞–≤—å—Ç–µ PDF —Ñ–∞–π–ª –≥–∞–π–¥–∞\n"
        "(–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª –ø–æ–∑–∂–µ):",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_guides")]
        ])
    )


@router.message(GuideManagement.creating_file_id)
async def create_guide_file_id(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ file_id –∏ –∑–∞–ø—Ä–æ—Å —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ –∫—É—Ä—Å–∞"""
    file_id = None
    if message.document:
        file_id = message.document.file_id
    elif message.text and message.text != '-':
        file_id = message.text.strip()
    
    await state.update_data(file_id=file_id)
    await state.set_state(GuideManagement.creating_related_course)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫—É—Ä—Å–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞
    db = get_db()
    courses = db.query(Course).all()
    
    data = await state.get_data()
    text = (
        "üíù <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≥–∞–π–¥–∞</b>\n\n"
        f"{data.get('emoji') or 'üíù'} {data['name']}\n"
        f"–§–∞–π–ª: {'‚úÖ' if file_id else '‚ùå'}\n\n"
        "–®–∞–≥ 6/6: –í–≤–µ–¥–∏—Ç–µ slug —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ –∫—É—Ä—Å–∞\n"
        "(–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' –µ—Å–ª–∏ –≥–∞–π–¥ –Ω–µ —Å–≤—è–∑–∞–Ω —Å –∫—É—Ä—Å–æ–º)\n\n"
    )
    
    if courses:
        text += "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫—É—Ä—Å—ã:\n"
        for course in courses:
            text += f"‚Ä¢ {course.slug}\n"
    
    await message.answer(
        text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_guides")]
        ])
    )


@router.message(GuideManagement.creating_related_course)
async def create_guide_save(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥–∞–π–¥–∞ –≤ –ë–î"""
    related_course = message.text.strip() if message.text != '-' else None
    
    data = await state.get_data()
    db = get_db()
    
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π order
        max_order = db.query(func.max(Guide.order)).scalar() or 0
        
        # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –≥–∞–π–¥
        new_guide = Guide(
            guide_id=data['guide_id'],
            name=data['name'],
            emoji=data.get('emoji'),
            description=data['description'],
            file_id=data.get('file_id'),
            related_course_slug=related_course,
            order=max_order + 1,
            is_active=True
        )
        
        db.add(new_guide)
        db.commit()
        
        text = (
            "‚úÖ <b>–ì–∞–π–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!</b>\n\n"
            f"{new_guide.emoji or 'üíù'} {new_guide.name}\n"
            f"ID: {new_guide.guide_id}\n"
            f"–§–∞–π–ª: {'‚úÖ' if new_guide.file_id else '‚ùå'}\n"
            f"–°–≤—è–∑–∞–Ω —Å –∫—É—Ä—Å–æ–º: {related_course or '-'}"
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ö —Å–ø–∏—Å–∫—É –≥–∞–π–¥–æ–≤", callback_data="admin_guides")]
        ])
        
        await message.answer(text, reply_markup=keyboard)
        
    except Exception as e:
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥–∞–π–¥–∞: {str(e)}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ö —Å–ø–∏—Å–∫—É –≥–∞–π–¥–æ–≤", callback_data="admin_guides")]
            ])
        )
    finally:
        db.close()
        await state.clear()


# ==================== –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–∞–π–¥–æ–º ====================

@router.callback_query(F.data.startswith("manage_guide_"))
async def manage_guide(callback: CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –≥–∞–π–¥–æ–º"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    guide_id = int(callback.data.split("_")[2])
    db = get_db()
    guide = db.query(Guide).filter(Guide.id == guide_id).first()
    
    if not guide:
        await callback.answer("‚ùå –ì–∞–π–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    status_text = "–ê–∫—Ç–∏–≤–µ–Ω ‚úÖ" if guide.is_active else "–ù–µ–∞–∫—Ç–∏–≤–µ–Ω ‚ùå"
    file_text = "–ó–∞–≥—Ä—É–∂–µ–Ω ‚úÖ" if guide.file_id else "–ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω ‚ùå"
    course_text = guide.related_course_slug or "–ù–µ —É–∫–∞–∑–∞–Ω"
    
    text = (
        f"üíù <b>{guide.name}</b>\n\n"
        f"ID: <code>{guide.guide_id}</code>\n"
        f"–≠–º–æ–¥–∑–∏: {guide.emoji or '-'}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {guide.description or '-'}\n"
        f"–§–∞–π–ª: {file_text}\n"
        f"–°–≤—è–∑–∞–Ω —Å –∫—É—Ä—Å–æ–º: {course_text}\n"
        f"–°—Ç–∞—Ç—É—Å: {status_text}\n"
        f"–ü–æ—Ä—è–¥–æ–∫: {guide.order}"
    )
    
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="‚úèÔ∏è –ù–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"edit_guide_name_{guide_id}")
    keyboard.button(text="üé® –≠–º–æ–¥–∑–∏", callback_data=f"edit_guide_emoji_{guide_id}")
    keyboard.button(text="üìù –û–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"edit_guide_desc_{guide_id}")
    keyboard.button(text="üìÑ –§–∞–π–ª", callback_data=f"edit_guide_file_{guide_id}")
    keyboard.button(text="üîó –°–≤—è–∑—å —Å –∫—É—Ä—Å–æ–º", callback_data=f"edit_guide_course_{guide_id}")
    
    toggle_text = "üî¥ –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å" if guide.is_active else "üü¢ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å"
    keyboard.button(text=toggle_text, callback_data=f"toggle_guide_{guide_id}")
    
    keyboard.button(text="üóë –£–¥–∞–ª–∏—Ç—å –≥–∞–π–¥", callback_data=f"delete_guide_confirm_{guide_id}")
    keyboard.button(text="üîô –ö —Å–ø–∏—Å–∫—É –≥–∞–π–¥–æ–≤", callback_data="admin_guides")
    keyboard.adjust(2, 2, 1, 1, 1)
    
    await callback.message.edit_text(text, reply_markup=keyboard.as_markup())
    await callback.answer()


@router.callback_query(F.data.startswith("toggle_guide_"))
async def toggle_guide(callback: CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≥–∞–π–¥–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    guide_id = int(callback.data.split("_")[2])
    db = get_db()
    guide = db.query(Guide).filter(Guide.id == guide_id).first()
    
    if guide:
        guide.is_active = not guide.is_active
        db.commit()
        await callback.answer(
            f"‚úÖ –ì–∞–π–¥ {'–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω' if guide.is_active else '–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω'}",
            show_alert=True
        )
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await manage_guide(callback)
    else:
        await callback.answer("‚ùå –ì–∞–π–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
    
    db.close()


@router.callback_query(F.data.startswith("delete_guide_confirm_"))
async def delete_guide_confirm(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –≥–∞–π–¥–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    guide_id = int(callback.data.split("_")[3])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"delete_guide_{guide_id}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"manage_guide_{guide_id}")
        ]
    ])
    
    await callback.message.edit_text(
        "‚ö†Ô∏è <b>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –≥–∞–π–¥?</b>\n\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
        reply_markup=keyboard
    )
    await callback.answer()


@router.callback_query(F.data.startswith("delete_guide_"))
async def delete_guide(callback: CallbackQuery):
    """–£–¥–∞–ª–µ–Ω–∏–µ –≥–∞–π–¥–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    guide_id = int(callback.data.split("_")[2])
    db = get_db()
    
    try:
        guide = db.query(Guide).filter(Guide.id == guide_id).first()
        if guide:
            guide_name = guide.name
            db.delete(guide)
            db.commit()
            await callback.answer(f"‚úÖ –ì–∞–π–¥ '{guide_name}' —É–¥–∞–ª–µ–Ω", show_alert=True)
            await show_guides_management(callback)
        else:
            await callback.answer("‚ùå –ì–∞–π–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)
    finally:
        db.close()

