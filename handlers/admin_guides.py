"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–∞–π–¥–∞–º–∏ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ (JSON)
"""
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder
import re

from config import config
from data import (
    get_all_guides,
    get_guide_by_id,
    get_all_courses,
    save_guide,
    delete_guide
)
from utils.bot_settings import is_admin

router = Router()


def transliterate(text: str) -> str:
    """–¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è —Ä—É—Å—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≤ –ª–∞—Ç–∏–Ω–∏—Ü—É –¥–ª—è ID"""
    translit_dict = {
        '–∞': 'a', '–±': 'b', '–≤': 'v', '–≥': 'g', '–¥': 'd', '–µ': 'e', '—ë': 'yo',
        '–∂': 'zh', '–∑': 'z', '–∏': 'i', '–π': 'y', '–∫': 'k', '–ª': 'l', '–º': 'm',
        '–Ω': 'n', '–æ': 'o', '–ø': 'p', '—Ä': 'r', '—Å': 's', '—Ç': 't', '—É': 'u',
        '—Ñ': 'f', '—Ö': 'h', '—Ü': 'ts', '—á': 'ch', '—à': 'sh', '—â': 'sch',
        '—ä': '', '—ã': 'y', '—å': '', '—ç': 'e', '—é': 'yu', '—è': 'ya'
    }
    
    text = text.lower()
    result = ''
    for char in text:
        if char in translit_dict:
            result += translit_dict[char]
        elif char.isalnum() or char in '-_':
            result += char
        elif char.isspace():
            result += '-'
    
    # –£–±–∏—Ä–∞–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –¥–µ—Ñ–∏—Å—ã –∏ –¥–µ—Ñ–∏—Å—ã –≤ –Ω–∞—á–∞–ª–µ/–∫–æ–Ω—Ü–µ
    result = re.sub(r'-+', '-', result)
    result = result.strip('-')
    
    return result


class GuideManagement(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–∞–π–¥–∞–º–∏"""
    creating_name = State()
    creating_emoji = State()
    creating_description = State()
    creating_file_id = State()
    creating_related_course = State()
    editing_name = State()
    editing_emoji = State()
    editing_description = State()
    editing_file_id = State()
    editing_related_course = State()


# ==================== –°–ø–∏—Å–æ–∫ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –≥–∞–π–¥–æ–≤ ====================

@router.callback_query(F.data == "admin_guides")
async def show_guides_management(callback: CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–∞–π–¥–∞–º–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    guides = get_all_guides()
    
    text = f"üíù <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–∞–π–¥–∞–º–∏</b>\n\n"
    text += f"üìä –í—Å–µ–≥–æ –≥–∞–π–¥–æ–≤: {len(guides)}\n\n"
    
    if guides:
        for guide in guides:
            status = "‚úÖ" if guide.get('is_active', True) else "‚ùå"
            file_status = "üìÑ" if guide.get('file_id') else "‚ö†Ô∏è"
            course_info = f" ‚Üí {guide.get('related_course_slug', '')}" if guide.get('related_course_slug') else ""
            text += f"{status} {file_status} {guide.get('emoji', 'üíù')} {guide['name']}{course_info}\n"
    else:
        text += "–ì–∞–π–¥—ã –ø–æ–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã\n"
    
    text += "\nüí° –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –≥–∞–π–¥ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
    
    # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = InlineKeyboardBuilder()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≥–∞–π–¥–∞
    for guide in guides:
        keyboard.button(
            text=f"{guide.get('emoji', 'üíù')} {guide['name']}",
            callback_data=f"manage_guide_{guide['id']}"
        )
    
    # –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –≥–∞–π–¥–∞
    keyboard.button(text="‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –≥–∞–π–¥", callback_data="create_guide_start")
    keyboard.button(text="üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")
    keyboard.adjust(1)
    
    await callback.message.edit_text(text, reply_markup=keyboard.as_markup())
    await callback.answer()


@router.callback_query(F.data == "create_guide_start")
async def create_guide_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –≥–∞–π–¥–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    await state.set_state(GuideManagement.creating_name)
    await callback.message.edit_text(
        "üíù <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≥–∞–π–¥–∞</b>\n\n"
        "–®–∞–≥ 1/5: –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–∞–π–¥–∞:\n\n"
        "üí° ID –±—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_guides")]
        ])
    )
    await callback.answer()


@router.message(GuideManagement.creating_name)
async def create_guide_name(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è, –≥–µ–Ω–µ—Ä–∞—Ü–∏—è ID –∏ –∑–∞–ø—Ä–æ—Å —ç–º–æ–¥–∑–∏"""
    name = message.text
    guide_id = transliterate(name)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ ID
    counter = 1
    original_id = guide_id
    while get_guide_by_id(guide_id):
        guide_id = f"{original_id}-{counter}"
        counter += 1
    
    await state.update_data(name=name, guide_id=guide_id)
    await state.set_state(GuideManagement.creating_emoji)
    
    await message.answer(
        "üíù <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≥–∞–π–¥–∞</b>\n\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {name}\n"
        f"ID: <code>{guide_id}</code>\n\n"
        "–®–∞–≥ 2/5: –í–≤–µ–¥–∏—Ç–µ —ç–º–æ–¥–∑–∏ –¥–ª—è –≥–∞–π–¥–∞ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_guides")]
        ])
    )


@router.message(GuideManagement.creating_emoji)
async def create_guide_emoji(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –∏ –∑–∞–ø—Ä–æ—Å –æ–ø–∏—Å–∞–Ω–∏—è"""
    emoji = message.text if message.text != '-' else None
    await state.update_data(emoji=emoji)
    await state.set_state(GuideManagement.creating_description)
    
    data = await state.get_data()
    await message.answer(
        "üíù <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≥–∞–π–¥–∞</b>\n\n"
        f"{emoji or 'üíù'} {data['name']}\n"
        f"ID: <code>{data['guide_id']}</code>\n\n"
        "–®–∞–≥ 3/5: –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≥–∞–π–¥–∞:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_guides")]
        ])
    )


@router.message(GuideManagement.creating_description)
async def create_guide_description(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –∏ –∑–∞–ø—Ä–æ—Å —Ñ–∞–π–ª–∞"""
    await state.update_data(description=message.text)
    await state.set_state(GuideManagement.creating_file_id)
    
    data = await state.get_data()
    await message.answer(
        "üíù <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≥–∞–π–¥–∞</b>\n\n"
        f"{data.get('emoji') or 'üíù'} {data['name']}\n\n"
        "–®–∞–≥ 4/5: –û—Ç–ø—Ä–∞–≤—å—Ç–µ PDF —Ñ–∞–π–ª –≥–∞–π–¥–∞\n"
        "(–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª –ø–æ–∑–∂–µ):",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_guides")]
        ])
    )


@router.message(GuideManagement.creating_file_id)
async def create_guide_file_id(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ file_id –∏ –∑–∞–ø—Ä–æ—Å —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ –∫—É—Ä—Å–∞"""
    file_id = None
    if message.document:
        file_id = message.document.file_id
    elif message.text and message.text != '-':
        file_id = message.text.strip()
    
    await state.update_data(file_id=file_id)
    await state.set_state(GuideManagement.creating_related_course)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫—É—Ä—Å–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞
    courses = get_all_courses()
    
    data = await state.get_data()
    text = (
        "üíù <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≥–∞–π–¥–∞</b>\n\n"
        f"{data.get('emoji') or 'üíù'} {data['name']}\n"
        f"–§–∞–π–ª: {'‚úÖ' if file_id else '‚ùå'}\n\n"
        "–®–∞–≥ 5/5: –í–≤–µ–¥–∏—Ç–µ slug —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ –∫—É—Ä—Å–∞\n"
        "(–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' –µ—Å–ª–∏ –≥–∞–π–¥ –Ω–µ —Å–≤—è–∑–∞–Ω —Å –∫—É—Ä—Å–æ–º)\n\n"
    )
    
    if courses:
        text += "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫—É—Ä—Å—ã:\n"
        for course in courses:
            text += f"‚Ä¢ {course['slug']}\n"
    
    await message.answer(
        text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_guides")]
        ])
    )


@router.message(GuideManagement.creating_related_course)
async def create_guide_save(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥–∞–π–¥–∞ –≤ JSON"""
    related_course = message.text.strip() if message.text != '-' else None
    
    data = await state.get_data()
    
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π order
        guides = get_all_guides()
        max_order = max([g.get('order', 0) for g in guides], default=0)
        
        # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –≥–∞–π–¥
        new_guide = {
            'id': data['guide_id'],
            'name': data['name'],
            'emoji': data.get('emoji'),
            'description': data['description'],
            'file_id': data.get('file_id'),
            'related_course_slug': related_course,
            'order': max_order + 1,
            'is_active': True
        }
        
        save_guide(new_guide)
        
        text = (
            "‚úÖ <b>–ì–∞–π–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ JSON!</b>\n\n"
            f"{new_guide['emoji'] or 'üíù'} {new_guide['name']}\n"
            f"ID: {new_guide['id']}\n"
            f"–§–∞–π–ª: {'‚úÖ' if new_guide['file_id'] else '‚ùå'}\n"
            f"–°–≤—è–∑–∞–Ω —Å –∫—É—Ä—Å–æ–º: {related_course or '-'}"
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ö —Å–ø–∏—Å–∫—É –≥–∞–π–¥–æ–≤", callback_data="admin_guides")]
        ])
        
        await message.answer(text, reply_markup=keyboard)
        
    except Exception as e:
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥–∞–π–¥–∞: {str(e)}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ö —Å–ø–∏—Å–∫—É –≥–∞–π–¥–æ–≤", callback_data="admin_guides")]
            ])
        )
    finally:
        await state.clear()


# ==================== –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–∞–π–¥–æ–º ====================

@router.callback_query(F.data.startswith("manage_guide_"))
async def manage_guide(callback: CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –≥–∞–π–¥–æ–º"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    guide_id = callback.data.split("_")[2]
    guide = get_guide_by_id(guide_id)
    
    if not guide:
        await callback.answer("‚ùå –ì–∞–π–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    status_text = "–ê–∫—Ç–∏–≤–µ–Ω ‚úÖ" if guide.get('is_active', True) else "–ù–µ–∞–∫—Ç–∏–≤–µ–Ω ‚ùå"
    file_text = "–ó–∞–≥—Ä—É–∂–µ–Ω ‚úÖ" if guide.get('file_id') else "–ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω ‚ùå"
    course_text = guide.get('related_course_slug') or "–ù–µ —É–∫–∞–∑–∞–Ω"
    
    text = (
        f"üíù <b>{guide['name']}</b>\n\n"
        f"ID: <code>{guide['id']}</code>\n"
        f"–≠–º–æ–¥–∑–∏: {guide.get('emoji') or '-'}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {guide.get('description') or '-'}\n"
        f"–§–∞–π–ª: {file_text}\n"
        f"–°–≤—è–∑–∞–Ω —Å –∫—É—Ä—Å–æ–º: {course_text}\n"
        f"–°—Ç–∞—Ç—É—Å: {status_text}\n"
        f"–ü–æ—Ä—è–¥–æ–∫: {guide.get('order', 0)}"
    )
    
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="‚úèÔ∏è –ù–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"edit_guide_name_{guide_id}")
    keyboard.button(text="üé® –≠–º–æ–¥–∑–∏", callback_data=f"edit_guide_emoji_{guide_id}")
    keyboard.button(text="üìù –û–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"edit_guide_desc_{guide_id}")
    keyboard.button(text="üìÑ –§–∞–π–ª", callback_data=f"edit_guide_file_{guide_id}")
    keyboard.button(text="üîó –°–≤—è–∑—å —Å –∫—É—Ä—Å–æ–º", callback_data=f"edit_guide_course_{guide_id}")
    
    toggle_text = "üî¥ –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å" if guide.get('is_active', True) else "üü¢ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å"
    keyboard.button(text=toggle_text, callback_data=f"toggle_guide_{guide_id}")
    
    keyboard.button(text="üóë –£–¥–∞–ª–∏—Ç—å –≥–∞–π–¥", callback_data=f"delete_guide_confirm_{guide_id}")
    keyboard.button(text="üîô –ö —Å–ø–∏—Å–∫—É –≥–∞–π–¥–æ–≤", callback_data="admin_guides")
    keyboard.adjust(2, 2, 1, 1, 1)
    
    await callback.message.edit_text(text, reply_markup=keyboard.as_markup())
    await callback.answer()


@router.callback_query(F.data.startswith("toggle_guide_"))
async def toggle_guide(callback: CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≥–∞–π–¥–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    guide_id = callback.data.split("_")[2]
    guide = get_guide_by_id(guide_id)
    
    if guide:
        guide['is_active'] = not guide.get('is_active', True)
        save_guide(guide)
        
        await callback.answer(
            f"‚úÖ –ì–∞–π–¥ {'–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω' if guide['is_active'] else '–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω'}",
            show_alert=True
        )
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await manage_guide(callback)
    else:
        await callback.answer("‚ùå –ì–∞–π–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)


@router.callback_query(F.data.startswith("delete_guide_confirm_"))
async def delete_guide_confirm(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –≥–∞–π–¥–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    guide_id = callback.data.split("_")[3]
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"delete_guide_{guide_id}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"manage_guide_{guide_id}")
        ]
    ])
    
    await callback.message.edit_text(
        "‚ö†Ô∏è <b>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –≥–∞–π–¥?</b>\n\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
        reply_markup=keyboard
    )
    await callback.answer()


@router.callback_query(F.data.startswith("delete_guide_"))
async def delete_guide_handler(callback: CallbackQuery):
    """–£–¥–∞–ª–µ–Ω–∏–µ –≥–∞–π–¥–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    guide_id = callback.data.split("_")[2]
    guide = get_guide_by_id(guide_id)
    
    if guide:
        guide_name = guide['name']
        if delete_guide(guide_id):
            await callback.answer(f"‚úÖ –ì–∞–π–¥ '{guide_name}' —É–¥–∞–ª–µ–Ω", show_alert=True)
            await show_guides_management(callback)
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏", show_alert=True)
    else:
        await callback.answer("‚ùå –ì–∞–π–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)


# ==================== –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–∞–π–¥–∞ ====================

@router.callback_query(F.data.startswith("edit_guide_name_"))
async def edit_guide_name_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –≥–∞–π–¥–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    guide_id = callback.data.split("_")[3]
    guide = get_guide_by_id(guide_id)
    
    if not guide:
        await callback.answer("‚ùå –ì–∞–π–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    await state.update_data(editing_guide_id=guide_id)
    await state.set_state(GuideManagement.editing_name)
    
    await callback.message.edit_text(
        f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≥–∞–π–¥–∞</b>\n\n"
        f"–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {guide['name']}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"manage_guide_{guide_id}")]
        ])
    )
    await callback.answer()


@router.message(GuideManagement.editing_name)
async def edit_guide_name_save(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –≥–∞–π–¥–∞"""
    data = await state.get_data()
    guide_id = data.get('editing_guide_id')
    
    guide = get_guide_by_id(guide_id)
    
    if guide:
        guide['name'] = message.text
        save_guide(guide)
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ö –≥–∞–π–¥—É", callback_data=f"manage_guide_{guide_id}")]
        ])
        
        await message.answer(
            f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!\n\n–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {message.text}",
            reply_markup=keyboard
        )
    else:
        await message.answer("‚ùå –ì–∞–π–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    await state.clear()


@router.callback_query(F.data.startswith("edit_guide_emoji_"))
async def edit_guide_emoji_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç–º–æ–¥–∑–∏ –≥–∞–π–¥–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    guide_id = callback.data.split("_")[3]
    guide = get_guide_by_id(guide_id)
    
    if not guide:
        await callback.answer("‚ùå –ì–∞–π–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    await state.update_data(editing_guide_id=guide_id)
    await state.set_state(GuideManagement.editing_emoji)
    
    await callback.message.edit_text(
        f"üé® <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–º–æ–¥–∑–∏ –≥–∞–π–¥–∞</b>\n\n"
        f"–¢–µ–∫—É—â–∏–π —ç–º–æ–¥–∑–∏: {guide.get('emoji') or '-'}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —ç–º–æ–¥–∑–∏ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å):",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"manage_guide_{guide_id}")]
        ])
    )
    await callback.answer()


@router.message(GuideManagement.editing_emoji)
async def edit_guide_emoji_save(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —ç–º–æ–¥–∑–∏ –≥–∞–π–¥–∞"""
    data = await state.get_data()
    guide_id = data.get('editing_guide_id')
    
    guide = get_guide_by_id(guide_id)
    
    if guide:
        guide['emoji'] = message.text if message.text != '-' else None
        save_guide(guide)
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ö –≥–∞–π–¥—É", callback_data=f"manage_guide_{guide_id}")]
        ])
        
        await message.answer(
            f"‚úÖ –≠–º–æ–¥–∑–∏ –æ–±–Ω–æ–≤–ª–µ–Ω!\n\n–ù–æ–≤—ã–π —ç–º–æ–¥–∑–∏: {guide['emoji'] or '-'}",
            reply_markup=keyboard
        )
    else:
        await message.answer("‚ùå –ì–∞–π–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    await state.clear()


@router.callback_query(F.data.startswith("edit_guide_desc_"))
async def edit_guide_desc_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –≥–∞–π–¥–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    guide_id = callback.data.split("_")[3]
    guide = get_guide_by_id(guide_id)
    
    if not guide:
        await callback.answer("‚ùå –ì–∞–π–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    await state.update_data(editing_guide_id=guide_id)
    await state.set_state(GuideManagement.editing_description)
    
    await callback.message.edit_text(
        f"üìù <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –≥–∞–π–¥–∞</b>\n\n"
        f"–¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:\n{guide.get('description') or '-'}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"manage_guide_{guide_id}")]
        ])
    )
    await callback.answer()


@router.message(GuideManagement.editing_description)
async def edit_guide_desc_save(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –≥–∞–π–¥–∞"""
    data = await state.get_data()
    guide_id = data.get('editing_guide_id')
    
    guide = get_guide_by_id(guide_id)
    
    if guide:
        guide['description'] = message.text
        save_guide(guide)
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ö –≥–∞–π–¥—É", callback_data=f"manage_guide_{guide_id}")]
        ])
        
        await message.answer(
            f"‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!",
            reply_markup=keyboard
        )
    else:
        await message.answer("‚ùå –ì–∞–π–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    await state.clear()


@router.callback_query(F.data.startswith("edit_guide_file_"))
async def edit_guide_file_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –≥–∞–π–¥–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    guide_id = callback.data.split("_")[3]
    guide = get_guide_by_id(guide_id)
    
    if not guide:
        await callback.answer("‚ùå –ì–∞–π–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    await state.update_data(editing_guide_id=guide_id)
    await state.set_state(GuideManagement.editing_file_id)
    
    file_status = "–ó–∞–≥—Ä—É–∂–µ–Ω ‚úÖ" if guide.get('file_id') else "–ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω ‚ùå"
    
    await callback.message.edit_text(
        f"üìÑ <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –≥–∞–π–¥–∞</b>\n\n"
        f"–¢–µ–∫—É—â–∏–π —Ñ–∞–π–ª: {file_status}\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π PDF —Ñ–∞–π–ª –∏–ª–∏ file_id\n"
        f"(–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª):",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"manage_guide_{guide_id}")]
        ])
    )
    await callback.answer()


@router.message(GuideManagement.editing_file_id)
async def edit_guide_file_save(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ –≥–∞–π–¥–∞"""
    data = await state.get_data()
    guide_id = data.get('editing_guide_id')
    
    guide = get_guide_by_id(guide_id)
    
    if guide:
        if message.document:
            guide['file_id'] = message.document.file_id
        elif message.text and message.text != '-':
            guide['file_id'] = message.text.strip()
        else:
            guide['file_id'] = None
        
        save_guide(guide)
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ö –≥–∞–π–¥—É", callback_data=f"manage_guide_{guide_id}")]
        ])
        
        file_status = "–∑–∞–≥—Ä—É–∂–µ–Ω ‚úÖ" if guide.get('file_id') else "—É–¥–∞–ª–µ–Ω ‚ùå"
        await message.answer(
            f"‚úÖ –§–∞–π–ª {file_status}!",
            reply_markup=keyboard
        )
    else:
        await message.answer("‚ùå –ì–∞–π–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    await state.clear()


@router.callback_query(F.data.startswith("edit_guide_course_"))
async def edit_guide_course_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–≤—è–∑–∏ —Å –∫—É—Ä—Å–æ–º"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    guide_id = callback.data.split("_")[3]
    guide = get_guide_by_id(guide_id)
    
    if not guide:
        await callback.answer("‚ùå –ì–∞–π–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫—É—Ä—Å–æ–≤
    courses = get_all_courses()
    
    await state.update_data(editing_guide_id=guide_id)
    await state.set_state(GuideManagement.editing_related_course)
    
    text = (
        f"üîó <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≤—è–∑–∏ —Å –∫—É—Ä—Å–æ–º</b>\n\n"
        f"–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å: {guide.get('related_course_slug') or '-'}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ slug –∫—É—Ä—Å–∞ (–∏–ª–∏ '-' —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —Å–≤—è–∑—å)\n\n"
    )
    
    if courses:
        text += "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫—É—Ä—Å—ã:\n"
        for course in courses:
            text += f"‚Ä¢ {course['slug']}\n"
    
    await callback.message.edit_text(
        text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"manage_guide_{guide_id}")]
        ])
    )
    await callback.answer()


@router.message(GuideManagement.editing_related_course)
async def edit_guide_course_save(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Å–≤—è–∑–∏ —Å –∫—É—Ä—Å–æ–º"""
    data = await state.get_data()
    guide_id = data.get('editing_guide_id')
    
    guide = get_guide_by_id(guide_id)
    
    if guide:
        guide['related_course_slug'] = message.text.strip() if message.text != '-' else None
        save_guide(guide)
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ö –≥–∞–π–¥—É", callback_data=f"manage_guide_{guide_id}")]
        ])
        
        await message.answer(
            f"‚úÖ –°–≤—è–∑—å —Å –∫—É—Ä—Å–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n\n–ö—É—Ä—Å: {guide.get('related_course_slug') or '-'}",
            reply_markup=keyboard
        )
    else:
        await message.answer("‚ùå –ì–∞–π–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    await state.clear()
