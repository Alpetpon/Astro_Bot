"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª
"""
import logging
from datetime import datetime
from aiogram import Router, F
from aiogram.types import CallbackQuery

from config import config
from keyboards.keyboards import (
    get_subscription_channel_keyboard,
    get_subscription_payment_keyboard,
    get_subscription_status_keyboard
)

logger = logging.getLogger(__name__)

router = Router()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–µ—Ä–≤–∏—Å–æ–≤ (–±—É–¥—É—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –≤ bot.py)
subscription_service = None
payment_service = None


def init_services(sub_service, pay_service):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤"""
    global subscription_service, payment_service
    subscription_service = sub_service
    payment_service = pay_service


@router.callback_query(F.data == "subscription_channel")
async def show_subscription_channel(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ —Å –ø–æ–¥–ø–∏—Å–∫–æ–π"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
        has_subscription = False
        if subscription_service:
            subscription = await subscription_service.get_active_subscription(callback.from_user.id)
            has_subscription = subscription is not None
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        text = config.SUBSCRIPTION_CHANNEL_TEXT
        text += f"\n\nüí∞ **–°—Ç–æ–∏–º–æ—Å—Ç—å:** {config.SUBSCRIPTION_PRICE} ‚ÇΩ"
        text += f"\nüìÖ **–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:** {config.SUBSCRIPTION_DAYS} –¥–Ω–µ–π"
        
        if has_subscription:
            text += "\n\n‚úÖ –£ –≤–∞—Å –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞!"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
        try:
            if callback.message.video:
                await callback.message.delete()
                await callback.bot.send_message(
                    chat_id=callback.message.chat.id,
                    text=text,
                    reply_markup=get_subscription_channel_keyboard(has_subscription),
                    parse_mode="Markdown"
                )
            else:
                await callback.message.edit_text(
                    text,
                    reply_markup=get_subscription_channel_keyboard(has_subscription),
                    parse_mode="Markdown"
                )
        except Exception:
            try:
                await callback.message.delete()
            except Exception:
                pass
            
            await callback.bot.send_message(
                chat_id=callback.message.chat.id,
                text=text,
                reply_markup=get_subscription_channel_keyboard(has_subscription),
                parse_mode="Markdown"
            )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error showing subscription channel: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)


@router.callback_query(F.data == "subscription_buy")
async def buy_subscription(callback: CallbackQuery):
    """–°–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
    try:
        if not payment_service or not subscription_service:
            await callback.answer("–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
        subscription = await subscription_service.get_active_subscription(callback.from_user.id)
        if subscription:
            await callback.answer("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞!", show_alert=True)
            return
        
        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ YooKassa
        payment_data = payment_service.create_payment(
            user_id=callback.from_user.id,
            return_url=f"https://t.me/{(await callback.bot.get_me()).username}"
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –ë–î
        await subscription_service.save_payment(
            user_id=callback.from_user.id,
            payment_id=payment_data['payment_id'],
            amount=payment_data['amount'],
            currency=payment_data['currency'],
            status=payment_data['status']
        )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        text = f"""üí≥ **–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏**

üí∞ –°—É–º–º–∞: {payment_data['amount']} {payment_data['currency']}
üìÖ –°—Ä–æ–∫: {config.SUBSCRIPTION_DAYS} –¥–Ω–µ–π

–î–ª—è –æ–ø–ª–∞—Ç—ã:
1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û–ø–ª–∞—Ç–∏—Ç—å"
2. –ó–∞–≤–µ—Ä—à–∏—Ç–µ –æ–ø–ª–∞—Ç—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ YooKassa
3. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –±–æ—Ç –∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É"

–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª."""
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        await callback.message.edit_text(
            text,
            reply_markup=get_subscription_payment_keyboard(
                payment_data['confirmation_url'],
                payment_data['payment_id']
            ),
            parse_mode="Markdown"
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error creating payment: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)


@router.callback_query(F.data.startswith("subscription_check_payment_"))
async def check_payment(callback: CallbackQuery):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞"""
    try:
        if not payment_service or not subscription_service:
            await callback.answer("–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
            return
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º payment_id –∏–∑ callback_data
        payment_id = callback.data.replace("subscription_check_payment_", "")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ YooKassa
        payment_data = payment_service.check_payment(payment_id)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
        if payment_data["status"] == "succeeded" and payment_data["paid"]:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
            await subscription_service.update_payment_status(
                payment_id=payment_id,
                status="succeeded",
                paid_at=datetime.utcnow()
            )
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
            subscription = await subscription_service.create_subscription(
                user_id=callback.from_user.id,
                payment_id=payment_id
            )
            
            # –°–≤—è–∑—ã–≤–∞–µ–º –ø–ª–∞—Ç–µ–∂ —Å –ø–æ–¥–ø–∏—Å–∫–æ–π
            await subscription_service.link_payment_to_subscription(
                payment_id=payment_id,
                subscription_id=subscription['_id']
            )
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—Å—ã–ª–∫–æ–π
            end_date_str = subscription['end_date'].strftime('%d.%m.%Y %H:%M')
            
            text = f"""‚úÖ **–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**

üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.

üîó **–í–∞—à–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:**
{subscription['invite_link']}

üìÖ **–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:** {end_date_str}

üí° **–í–∞–∂–Ω–æ:**
‚Ä¢ –°—Å—ã–ª–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∞—Å
‚Ä¢ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω
‚Ä¢ –ó–∞ 3 –¥–Ω—è –∏ –∑–∞ 1 –¥–µ–Ω—å –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ

–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è! ü§ç"""
            
            await callback.message.edit_text(
                text,
                reply_markup=get_subscription_status_keyboard(),
                parse_mode="Markdown"
            )
            
            await callback.answer("–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞! ‚úÖ")
            
        else:
            # –ü–ª–∞—Ç–µ–∂ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω
            status_message = payment_service.get_payment_status_message(
                payment_data["status"],
                payment_data["paid"]
            )
            
            await callback.answer(status_message, show_alert=True)
        
    except Exception as e:
        logger.error(f"Error checking payment: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)


@router.callback_query(F.data == "subscription_status")
async def show_subscription_status(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏"""
    try:
        if not subscription_service:
            await callback.answer("–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
        subscription = await subscription_service.get_active_subscription(callback.from_user.id)
        
        if not subscription:
            text = """‚ùå **–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞**

–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª.

–•–æ—Ç–∏—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É?"""
            
            await callback.message.edit_text(
                text,
                reply_markup=get_subscription_channel_keyboard(False),
                parse_mode="Markdown"
            )
        else:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
            end_date = subscription['end_date']
            now = datetime.utcnow()
            days_left = (end_date - now).days
            hours_left = ((end_date - now).seconds // 3600)
            
            end_date_str = end_date.strftime('%d.%m.%Y %H:%M')
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            text = f"""üìä **–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏**

‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞

üìÖ **–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è:** {end_date_str}
‚è≥ **–û—Å—Ç–∞–ª–æ—Å—å:** {days_left} –¥–Ω. {hours_left} —á.

üîó **–í–∞—à–∞ —Å—Å—ã–ª–∫–∞:**
{subscription['invite_link']}

üí° –í—ã –ø–æ–ª—É—á–∏—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 3 –¥–Ω—è –∏ –∑–∞ 1 –¥–µ–Ω—å –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è."""
            
            # –ú–æ–∂–Ω–æ –ø—Ä–æ–¥–ª–∏—Ç—å, –µ—Å–ª–∏ –æ—Å—Ç–∞–ª–æ—Å—å –º–µ–Ω—å—à–µ 7 –¥–Ω–µ–π
            can_renew = days_left < 7
            
            await callback.message.edit_text(
                text,
                reply_markup=get_subscription_status_keyboard(can_renew),
                parse_mode="Markdown"
            )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error showing subscription status: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)

