"""
–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
"""
import logging
from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton

from utils.bot_settings import is_admin
from keyboards.keyboards import get_admin_subscriptions_keyboard

logger = logging.getLogger(__name__)

router = Router()

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ (–±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –≤ bot.py)
subscription_service = None


def init_service(service):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞"""
    global subscription_service
    subscription_service = service


@router.callback_query(F.data == "admin_subscriptions")
async def show_subscriptions_management(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    text = """üí´ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏</b>

–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –∫–∞–Ω–∞–ª.

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"""
    
    await callback.message.edit_text(
        text,
        reply_markup=get_admin_subscriptions_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data == "admin_subscriptions_stats")
async def show_subscriptions_stats(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–¥–ø–∏—Å–æ–∫"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    if not subscription_service:
        await callback.answer("–°–µ—Ä–≤–∏—Å –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = await subscription_service.get_subscription_stats()
        
        text = f"""üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫</b>

üìã <b>–ü–æ–¥–ø–∏—Å–∫–∏:</b>
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–¥–ø–∏—Å–æ–∫: {stats['total_subscriptions']}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {stats['active_subscriptions']}

üí≥ <b>–ü–ª–∞—Ç–µ–∂–∏:</b>
‚Ä¢ –í—Å–µ–≥–æ –ø–ª–∞—Ç–µ–∂–µ–π: {stats['total_payments']}
‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π: {stats['succeeded_payments']}
‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(stats['succeeded_payments'] / stats['total_payments'] * 100) if stats['total_payments'] > 0 else 0:.1f}%

üí∞ <b>–§–∏–Ω–∞–Ω—Å—ã:</b>
‚Ä¢ –û–±—â–∞—è —Å—É–º–º–∞: {stats['total_amount']:,.2f} ‚ÇΩ
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {(stats['total_amount'] / stats['succeeded_payments']) if stats['succeeded_payments'] > 0 else 0:.2f} ‚ÇΩ"""
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_subscriptions")]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error showing subscriptions stats: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", show_alert=True)


@router.callback_query(F.data == "admin_subscriptions_clear")
async def confirm_clear_subscriptions(callback: CallbackQuery):
    """–ó–∞–ø—Ä–æ—Å–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    text = """‚ö†Ô∏è <b>–í–ù–ò–ú–ê–ù–ò–ï!</b>

–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å <b>–ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–∏—Ç—å</b> –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö:
‚Ä¢ –í—Å–µ –∑–∞–ø–∏—Å–∏ –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö
‚Ä¢ –í—Å–µ –ø–ª–∞—Ç–µ–∂–∏ –∑–∞ –ø–æ–¥–ø–∏—Å–∫–∏

‚ö†Ô∏è <b>–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!</b>

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ù–ï –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –∏–∑ –∫–∞–Ω–∞–ª–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.

–í—ã —É–≤–µ—Ä–µ–Ω—ã?"""
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ö†Ô∏è –î–ê, –û–ß–ò–°–¢–ò–¢–¨ –í–°–Å", callback_data="admin_subscriptions_clear_confirm")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_subscriptions")]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()


@router.callback_query(F.data == "admin_subscriptions_clear_confirm")
async def clear_subscriptions_confirmed(callback: CallbackQuery):
    """–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    try:
        from database.mongodb import mongodb
        db = mongodb.get_database()
        
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏
        result_subscriptions = await db.subscriptions.delete_many({})
        
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø–ª–∞—Ç–µ–∂–∏ –∑–∞ –ø–æ–¥–ø–∏—Å–∫–∏
        result_payments = await db.subscription_payments.delete_many({})
        
        text = f"""‚úÖ <b>–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞</b>

–£–¥–∞–ª–µ–Ω–æ:
‚Ä¢ –ü–æ–¥–ø–∏—Å–æ–∫: {result_subscriptions.deleted_count}
‚Ä¢ –ü–ª–∞—Ç–µ–∂–µ–π: {result_payments.deleted_count}

–í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö —É–¥–∞–ª–µ–Ω—ã."""
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_subscriptions")]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –æ—á–∏—â–µ–Ω–∞")
        
        logger.info(f"Admin {callback.from_user.id} cleared subscription database")
        
    except Exception as e:
        logger.error(f"Error clearing subscriptions: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö", show_alert=True)

