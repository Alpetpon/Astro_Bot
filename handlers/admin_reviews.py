"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞–º–∏ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ (JSON)
"""
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder
import re
from datetime import datetime

from data import (
    get_all_reviews,
    get_review_by_id,
    get_all_courses,
    save_review,
    delete_review
)
from utils.bot_settings import is_admin

router = Router()


def transliterate(text: str) -> str:
    """–¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è —Ä—É—Å—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≤ –ª–∞—Ç–∏–Ω–∏—Ü—É –¥–ª—è ID"""
    translit_dict = {
        '–∞': 'a', '–±': 'b', '–≤': 'v', '–≥': 'g', '–¥': 'd', '–µ': 'e', '—ë': 'yo',
        '–∂': 'zh', '–∑': 'z', '–∏': 'i', '–π': 'y', '–∫': 'k', '–ª': 'l', '–º': 'm',
        '–Ω': 'n', '–æ': 'o', '–ø': 'p', '—Ä': 'r', '—Å': 's', '—Ç': 't', '—É': 'u',
        '—Ñ': 'f', '—Ö': 'h', '—Ü': 'ts', '—á': 'ch', '—à': 'sh', '—â': 'sch',
        '—ä': '', '—ã': 'y', '—å': '', '—ç': 'e', '—é': 'yu', '—è': 'ya'
    }
    
    text = text.lower()
    result = ''
    for char in text:
        if char in translit_dict:
            result += translit_dict[char]
        elif char.isalnum() or char in '-_':
            result += char
        elif char.isspace():
            result += '-'
    
    # –£–±–∏—Ä–∞–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –¥–µ—Ñ–∏—Å—ã –∏ –¥–µ—Ñ–∏—Å—ã –≤ –Ω–∞—á–∞–ª–µ/–∫–æ–Ω—Ü–µ
    result = re.sub(r'-+', '-', result)
    result = result.strip('-')
    
    return result


class ReviewManagement(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞–º–∏"""
    creating_description = State()
    creating_photo = State()
    editing_description = State()
    editing_photo = State()


# ==================== –°–ø–∏—Å–æ–∫ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤ ====================

@router.callback_query(F.data == "admin_reviews")
async def show_reviews_management(callback: CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞–º–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    reviews = get_all_reviews()
    
    text = f"‚≠êÔ∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞–º–∏</b>\n\n"
    text += f"üìä –í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤: {len(reviews)}\n\n"
    
    if reviews:
        for review in sorted(reviews, key=lambda r: r.get('order', 0)):
            status = "‚úÖ" if review.get('is_active', True) else "‚ùå"
            photo_status = "üì∑" if review.get('photo_id') else "‚ö†Ô∏è"
            text += f"{status} {photo_status} {review.get('description', review['id'])}\n"
    else:
        text += "–û—Ç–∑—ã–≤—ã –ø–æ–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã\n"
    
    text += "\nüí° –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –æ—Ç–∑—ã–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
    
    # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = InlineKeyboardBuilder()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ—Ç–∑—ã–≤–∞
    for review in reviews:
        photo_status = "üì∑" if review.get('photo_id') else "‚ö†Ô∏è"
        keyboard.button(
            text=f"{photo_status} {review.get('description', review['id'])}",
            callback_data=f"manage_review_{review['id']}"
        )
    
    # –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –æ—Ç–∑—ã–≤–∞
    keyboard.button(text="‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –æ—Ç–∑—ã–≤", callback_data="create_review_start")
    keyboard.button(text="üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")
    keyboard.adjust(1)
    
    await callback.message.edit_text(text, reply_markup=keyboard.as_markup())
    await callback.answer()


@router.callback_query(F.data == "create_review_start")
async def create_review_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –æ—Ç–∑—ã–≤–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    await state.set_state(ReviewManagement.creating_description)
    await callback.message.edit_text(
        "‚≠êÔ∏è <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ—Ç–∑—ã–≤–∞</b>\n\n"
        "–®–∞–≥ 1/2: –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–∞\n"
        "(–∫—Ä–∞—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∫–∏):",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_reviews")]
        ])
    )
    await callback.answer()


@router.message(ReviewManagement.creating_description)
async def create_review_description(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –∏ –∑–∞–ø—Ä–æ—Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"""
    description = message.text
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID
    review_id = f"review_{transliterate(description)}_{int(datetime.now().timestamp())}"
    
    await state.update_data(description=description, review_id=review_id)
    await state.set_state(ReviewManagement.creating_photo)
    
    await message.answer(
        "‚≠êÔ∏è <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ—Ç–∑—ã–≤–∞</b>\n\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
        f"ID: <code>{review_id}</code>\n\n"
        "–®–∞–≥ 2/2: –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –æ—Ç–∑—ã–≤–∞\n"
        "(–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∂–µ):",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_reviews")]
        ])
    )


@router.message(ReviewManagement.creating_photo)
async def create_review_save(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞ –≤ JSON"""
    data = await state.get_data()
    
    # –ü–æ–ª—É—á–∞–µ–º photo_id
    photo_id = None
    if message.photo:
        # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º
        photo_id = message.photo[-1].file_id
    elif message.text and message.text != '-':
        photo_id = message.text.strip()
    
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π order
        reviews = get_all_reviews()
        max_order = max([r.get('order', 0) for r in reviews], default=0)
        
        # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –æ—Ç–∑—ã–≤
        new_review = {
            'id': data['review_id'],
            'description': data['description'],
            'photo_id': photo_id,
            'order': max_order + 1,
            'is_active': True
        }
        
        save_review(new_review)
        
        photo_status = "‚úÖ" if photo_id else "‚ö†Ô∏è –ë–µ–∑ —Ñ–æ—Ç–æ"
        text = (
            "‚úÖ <b>–û—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ JSON!</b>\n\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {new_review['description']}\n"
            f"ID: {new_review['id']}\n"
            f"–§–æ—Ç–æ: {photo_status}"
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ö —Å–ø–∏—Å–∫—É –æ—Ç–∑—ã–≤–æ–≤", callback_data="admin_reviews")]
        ])
        
        await message.answer(text, reply_markup=keyboard)
        
    except Exception as e:
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞: {str(e)}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ö —Å–ø–∏—Å–∫—É –æ—Ç–∑—ã–≤–æ–≤", callback_data="admin_reviews")]
            ])
        )
    finally:
        await state.clear()


# ==================== –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–º ====================

@router.callback_query(F.data.startswith("manage_review_"))
async def manage_review(callback: CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –æ—Ç–∑—ã–≤–æ–º"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    review_id = callback.data.replace("manage_review_", "")
    review = get_review_by_id(review_id)
    
    if not review:
        await callback.answer("‚ùå –û—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    status_text = "–ê–∫—Ç–∏–≤–µ–Ω ‚úÖ" if review.get('is_active', True) else "–ù–µ–∞–∫—Ç–∏–≤–µ–Ω ‚ùå"
    photo_text = "–ó–∞–≥—Ä—É–∂–µ–Ω–æ ‚úÖ" if review.get('photo_id') else "–ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ ‚ùå"
    
    text = (
        f"‚≠êÔ∏è <b>{review.get('description', review['id'])}</b>\n\n"
        f"ID: <code>{review['id']}</code>\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {review.get('description', '-')}\n"
        f"–§–æ—Ç–æ: {photo_text}\n"
        f"–°—Ç–∞—Ç—É—Å: {status_text}\n"
        f"–ü–æ—Ä—è–¥–æ–∫: {review.get('order', 0)}"
    )
    
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="‚úèÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"edit_review_description_{review_id}")
    keyboard.button(text="üì∑ –§–æ—Ç–æ", callback_data=f"edit_review_photo_{review_id}")
    
    toggle_text = "üî¥ –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å" if review.get('is_active', True) else "üü¢ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å"
    keyboard.button(text=toggle_text, callback_data=f"toggle_review_{review_id}")
    
    keyboard.button(text="üóë –£–¥–∞–ª–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data=f"delete_review_confirm_{review_id}")
    keyboard.button(text="üîô –ö —Å–ø–∏—Å–∫—É –æ—Ç–∑—ã–≤–æ–≤", callback_data="admin_reviews")
    keyboard.adjust(2, 1, 1, 1)
    
    await callback.message.edit_text(text, reply_markup=keyboard.as_markup())
    await callback.answer()


@router.callback_query(F.data.startswith("toggle_review_"))
async def toggle_review(callback: CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ—Ç–∑—ã–≤–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    review_id = callback.data.replace("toggle_review_", "")
    review = get_review_by_id(review_id)
    
    if review:
        review['is_active'] = not review.get('is_active', True)
        save_review(review)
        
        await callback.answer(
            f"‚úÖ –û—Ç–∑—ã–≤ {'–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω' if review['is_active'] else '–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω'}",
            show_alert=True
        )
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await manage_review(callback)
    else:
        await callback.answer("‚ùå –û—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)


@router.callback_query(F.data.startswith("delete_review_confirm_"))
async def delete_review_confirm(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    review_id = callback.data.replace("delete_review_confirm_", "")
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"delete_review_{review_id}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"manage_review_{review_id}")
        ]
    ])
    
    await callback.message.edit_text(
        "‚ö†Ô∏è <b>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –æ—Ç–∑—ã–≤?</b>\n\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
        reply_markup=keyboard
    )
    await callback.answer()


@router.callback_query(F.data.startswith("delete_review_"))
async def delete_review_handler(callback: CallbackQuery):
    """–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º review_id –∏–∑ callback_data
    # delete_review_confirm_ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –≤—ã—à–µ, –∑–¥–µ—Å—å —Ç–æ–ª—å–∫–æ delete_review_
    parts = callback.data.split("_")
    if len(parts) >= 3 and parts[0] == "delete" and parts[1] == "review":
        # –°–æ–±–∏—Ä–∞–µ–º review_id –∏–∑ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —á–∞—Å—Ç–µ–π
        review_id = "_".join(parts[2:])
    else:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID", show_alert=True)
        return
    
    review = get_review_by_id(review_id)
    
    if review:
        author_name = review.get('author_name', '–ê–Ω–æ–Ω–∏–º')
        if delete_review(review_id):
            await callback.answer(f"‚úÖ –û—Ç–∑—ã–≤ '{author_name}' —É–¥–∞–ª–µ–Ω", show_alert=True)
            await show_reviews_management(callback)
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏", show_alert=True)
    else:
        await callback.answer("‚ùå –û—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)


# ==================== –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–∞ ====================

@router.callback_query(F.data.startswith("edit_review_description_"))
async def edit_review_description_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    review_id = callback.data.replace("edit_review_description_", "")
    review = get_review_by_id(review_id)
    
    if not review:
        await callback.answer("‚ùå –û—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    await state.update_data(editing_review_id=review_id)
    await state.set_state(ReviewManagement.editing_description)
    
    await callback.message.edit_text(
        f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è</b>\n\n"
        f"–¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {review.get('description', '-')}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"manage_review_{review_id}")]
        ])
    )
    await callback.answer()


@router.message(ReviewManagement.editing_description)
async def edit_review_description_save(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è"""
    data = await state.get_data()
    review_id = data.get('editing_review_id')
    
    review = get_review_by_id(review_id)
    
    if review:
        review['description'] = message.text
        save_review(review)
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ö –æ—Ç–∑—ã–≤—É", callback_data=f"manage_review_{review_id}")]
        ])
        
        await message.answer(
            f"‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!\n\n–ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {message.text}",
            reply_markup=keyboard
        )
    else:
        await message.answer("‚ùå –û—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    await state.clear()


@router.callback_query(F.data.startswith("edit_review_photo_"))
async def edit_review_photo_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    review_id = callback.data.replace("edit_review_photo_", "")
    review = get_review_by_id(review_id)
    
    if not review:
        await callback.answer("‚ùå –û—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    await state.update_data(editing_review_id=review_id)
    await state.set_state(ReviewManagement.editing_photo)
    
    photo_status = "–ó–∞–≥—Ä—É–∂–µ–Ω–æ ‚úÖ" if review.get('photo_id') else "–ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ ‚ùå"
    
    await callback.message.edit_text(
        f"üì∑ <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏</b>\n\n"
        f"–¢–µ–∫—É—â–µ–µ —Ñ–æ—Ç–æ: {photo_status}\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ file_id\n"
        f"(–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ):",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"manage_review_{review_id}")]
        ])
    )
    await callback.answer()


@router.message(ReviewManagement.editing_photo)
async def edit_review_photo_save(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"""
    data = await state.get_data()
    review_id = data.get('editing_review_id')
    
    review = get_review_by_id(review_id)
    
    if review:
        # –ü–æ–ª—É—á–∞–µ–º photo_id
        if message.photo:
            # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º
            review['photo_id'] = message.photo[-1].file_id
        elif message.text and message.text != '-':
            review['photo_id'] = message.text.strip()
        else:
            review['photo_id'] = None
        
        save_review(review)
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ö –æ—Ç–∑—ã–≤—É", callback_data=f"manage_review_{review_id}")]
        ])
        
        photo_status = "–∑–∞–≥—Ä—É–∂–µ–Ω–æ ‚úÖ" if review.get('photo_id') else "—É–¥–∞–ª–µ–Ω–æ ‚ùå"
        await message.answer(
            f"‚úÖ –§–æ—Ç–æ {photo_status}!",
            reply_markup=keyboard
        )
    else:
        await message.answer("‚ùå –û—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    await state.clear()

