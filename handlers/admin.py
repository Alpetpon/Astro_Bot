from datetime import datetime, timedelta
from aiogram import Router, F
from aiogram.filters import Command, StateFilter
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy.orm import Session
from sqlalchemy import func

from config import config
from database import get_db, User, Payment, Course, Consultation, Lesson
from keyboards import get_admin_keyboard, get_back_to_admin_keyboard

router = Router()


class CourseManagement(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–∞–º–∏"""
    waiting_for_lesson_title = State()
    waiting_for_lesson_description = State()
    waiting_for_lesson_content = State()
    waiting_for_lesson_video = State()
    editing_lesson_title = State()
    editing_lesson_description = State()
    editing_lesson_content = State()
    editing_lesson_video = State()


def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return user_id == config.ADMIN_ID


@router.message(Command("admin"))
async def cmd_admin(message: Message):
    """–í—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –ø–æ –∫–æ–º–∞–Ω–¥–µ /admin"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
        return
    
    await message.answer(
        "üîê <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_keyboard()
    )


@router.callback_query(F.data == "admin_panel")
async def show_admin_panel(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    await callback.message.edit_text(
        "üîê <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data == "admin_stats")
async def show_stats(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    db: Session = get_db()
    
    try:
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_users = db.query(User).count()
        total_purchases = db.query(Payment).count()
        total_revenue = db.query(func.sum(Payment.amount)).scalar() or 0
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π)
        week_ago = datetime.utcnow() - timedelta(days=7)
        active_users = db.query(User).filter(User.last_activity >= week_ago).count()
        
        # –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞ –Ω–µ–¥–µ–ª—é
        new_users = db.query(User).filter(User.created_at >= week_ago).count()
        
        # –ü–æ–∫—É–ø–∫–∏ –∑–∞ –Ω–µ–¥–µ–ª—é
        week_purchases = db.query(Payment).filter(Payment.created_at >= week_ago).count()
        week_revenue = db.query(func.sum(Payment.amount)).filter(
            Payment.created_at >= week_ago
        ).scalar() or 0
        
        # –ö—É—Ä—Å—ã –∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
        total_courses = db.query(Course).count()
        total_consultations = db.query(Consultation).count()
        
        stats_text = f"""üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>

üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>
‚Ä¢ –í—Å–µ–≥–æ: {total_users}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {active_users}
‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {new_users}

üí∞ <b>–§–∏–Ω–∞–Ω—Å—ã:</b>
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–∫—É–ø–æ–∫: {total_purchases}
‚Ä¢ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: {total_revenue:,.0f} ‚ÇΩ
‚Ä¢ –ó–∞ –Ω–µ–¥–µ–ª—é –ø–æ–∫—É–ø–æ–∫: {week_purchases}
‚Ä¢ –ó–∞ –Ω–µ–¥–µ–ª—é –≤—ã—Ä—É—á–∫–∞: {week_revenue:,.0f} ‚ÇΩ

üìö <b>–ö–æ–Ω—Ç–µ–Ω—Ç:</b>
‚Ä¢ –ö—É—Ä—Å–æ–≤: {total_courses}
‚Ä¢ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π: {total_consultations}
"""
        
        await callback.message.edit_text(
            stats_text,
            reply_markup=get_back_to_admin_keyboard()
        )
    
    finally:
        db.close()
    
    await callback.answer()


@router.callback_query(F.data == "admin_users")
async def show_users(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    db: Session = get_db()
    
    try:
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = db.query(User).order_by(User.created_at.desc()).limit(10).all()
        
        users_text = "üë• <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n\n"
        
        for user in users:
            username = f"@{user.username}" if user.username else "–ë–µ–∑ username"
            name = user.first_name or "–ë–µ–∑ –∏–º–µ–Ω–∏"
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫—É–ø–æ–∫
            purchases_count = len(user.payments)
            
            users_text += f"‚Ä¢ {name} ({username})\n"
            users_text += f"  ID: <code>{user.telegram_id}</code>\n"
            users_text += f"  –ü–æ–∫—É–ø–æ–∫: {purchases_count}\n"
            users_text += f"  –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user.created_at.strftime('%d.%m.%Y')}\n\n"
        
        await callback.message.edit_text(
            users_text,
            reply_markup=get_back_to_admin_keyboard()
        )
    
    finally:
        db.close()
    
    await callback.answer()


@router.callback_query(F.data == "admin_purchases")
async def show_purchases(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    db: Session = get_db()
    
    try:
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ø–æ–∫—É–ø–æ–∫
        purchases = db.query(Payment).order_by(Payment.created_at.desc()).limit(10).all()
        
        if not purchases:
            purchases_text = "üì¶ <b>–ü–æ–∫—É–ø–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç</b>"
        else:
            purchases_text = "üì¶ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏:</b>\n\n"
            
            for purchase in purchases:
                user = purchase.user
                username = f"@{user.username}" if user.username else "–ë–µ–∑ username"
                name = user.first_name or "–ë–µ–∑ –∏–º–µ–Ω–∏"
                
                # –¢–∏–ø –ø–æ–∫—É–ø–∫–∏
                item_type = "–ö—É—Ä—Å" if purchase.course_id else "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è"
                item_name = ""
                if purchase.course_id:
                    course = db.query(Course).filter(Course.id == purchase.course_id).first()
                    item_name = course.name if course else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                elif purchase.consultation_id:
                    consultation = db.query(Consultation).filter(
                        Consultation.id == purchase.consultation_id
                    ).first()
                    item_name = consultation.name if consultation else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                
                purchases_text += f"‚Ä¢ {name} ({username})\n"
                purchases_text += f"  {item_type}: {item_name}\n"
                purchases_text += f"  –°—É–º–º–∞: {purchase.amount:,.0f} ‚ÇΩ\n"
                purchases_text += f"  –î–∞—Ç–∞: {purchase.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
        
        await callback.message.edit_text(
            purchases_text,
            reply_markup=get_back_to_admin_keyboard()
        )
    
    finally:
        db.close()
    
    await callback.answer()


@router.callback_query(F.data == "admin_broadcast")
async def broadcast_info(callback: CallbackQuery):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞—Å—Å—ã–ª–∫–µ"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    await callback.message.edit_text(
        "üì¢ <b>–†–∞—Å—Å—ã–ª–∫–∞</b>\n\n"
        "–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
        "<code>/broadcast [—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è]</code>\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "<code>/broadcast –ù–æ–≤—ã–π –∫—É—Ä—Å —É–∂–µ –¥–æ—Å—Ç—É–ø–µ–Ω!</code>",
        reply_markup=get_back_to_admin_keyboard()
    )
    await callback.answer()


@router.message(Command("broadcast"))
async def broadcast_message(message: Message):
    """–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    text = message.text.replace("/broadcast", "").strip()
    
    if not text:
        await message.answer(
            "‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:\n"
            "<code>/broadcast [—Ç–µ–∫—Å—Ç]</code>"
        )
        return
    
    db: Session = get_db()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = db.query(User).all()
        
        success_count = 0
        fail_count = 0
        
        status_msg = await message.answer(f"üì§ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        
        for user in users:
            try:
                await message.bot.send_message(
                    chat_id=user.telegram_id,
                    text=text
                )
                success_count += 1
            except Exception as e:
                fail_count += 1
        
        await status_msg.edit_text(
            f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            f"–£—Å–ø–µ—à–Ω–æ: {success_count}\n"
            f"–û—à–∏–±–æ–∫: {fail_count}"
        )
    
    finally:
        db.close()


@router.callback_query(F.data == "admin_courses")
async def show_courses_management(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞–º–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    db: Session = get_db()
    
    try:
        courses = db.query(Course).order_by(Course.order).all()
        
        if not courses:
            await callback.message.edit_text(
                "üìö <b>–ö—É—Ä—Å—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç</b>\n\n"
                "–°–æ–∑–¥–∞–π—Ç–µ –∫—É—Ä—Å—ã —á–µ—Ä–µ–∑ utils/admin.py",
                reply_markup=get_back_to_admin_keyboard()
            )
        else:
            buttons = []
            for course in courses:
                lessons_count = len(course.lessons)
                buttons.append([InlineKeyboardButton(
                    text=f"üìñ {course.name} ({lessons_count} —É—Ä–æ–∫–æ–≤)",
                    callback_data=f"manage_course_{course.id}"
                )])
            
            buttons.append([InlineKeyboardButton(
                text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å",
                callback_data="admin_panel"
            )])
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
            
            await callback.message.edit_text(
                "üìö <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞–º–∏</b>\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
                reply_markup=keyboard
            )
    
    finally:
        db.close()
    
    await callback.answer()


@router.callback_query(F.data.startswith("manage_course_"))
async def manage_course(callback: CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∫—É—Ä—Å–æ–º"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    course_id = int(callback.data.split("_")[2])
    db: Session = get_db()
    
    try:
        course = db.query(Course).filter(Course.id == course_id).first()
        
        if not course:
            await callback.answer("–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        lessons = db.query(Lesson).filter(Lesson.course_id == course_id).order_by(
            Lesson.module_number, Lesson.lesson_number
        ).all()
        
        text = f"üìñ <b>{course.name}</b>\n\n"
        
        if lessons:
            text += "üìù <b>–£—Ä–æ–∫–∏:</b>\n\n"
            for lesson in lessons:
                text += f"‚Ä¢ –ú{lesson.module_number}.–£{lesson.lesson_number}: {lesson.title}\n"
        else:
            text += "–£—Ä–æ–∫–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç\n"
        
        buttons = [
            [InlineKeyboardButton(
                text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—Ä–æ–∫",
                callback_data=f"add_lesson_{course_id}"
            )]
        ]
        
        if lessons:
            buttons.append([InlineKeyboardButton(
                text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —É—Ä–æ–∫",
                callback_data=f"edit_lessons_{course_id}"
            )])
        
        buttons.append([InlineKeyboardButton(
            text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∫—É—Ä—Å–∞–º",
            callback_data="admin_courses"
        )])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        
        await callback.message.edit_text(text, reply_markup=keyboard)
    
    finally:
        db.close()
    
    await callback.answer()


@router.callback_query(F.data.startswith("add_lesson_"))
async def add_lesson_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—Ä–æ–∫–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    course_id = int(callback.data.split("_")[2])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º course_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(course_id=course_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–∫–∞
    db: Session = get_db()
    try:
        course = db.query(Course).filter(Course.id == course_id).first()
        lessons = db.query(Lesson).filter(Lesson.course_id == course_id).all()
        
        if lessons:
            max_module = max(lesson.module_number for lesson in lessons)
            max_lesson_in_module = max(
                lesson.lesson_number for lesson in lessons 
                if lesson.module_number == max_module
            )
            suggested_module = max_module
            suggested_lesson = max_lesson_in_module + 1
        else:
            suggested_module = 1
            suggested_lesson = 1
        
        await state.update_data(
            suggested_module=suggested_module,
            suggested_lesson=suggested_lesson
        )
        
        cancel_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"manage_course_{course_id}")]
        ])
        
        await callback.message.edit_text(
            f"‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—Ä–æ–∫–∞ –≤ –∫—É—Ä—Å \"{course.name}\"</b>\n\n"
            f"–ü—Ä–µ–¥–ª–∞–≥–∞—é: –ú–æ–¥—É–ª—å {suggested_module}, –£—Ä–æ–∫ {suggested_lesson}\n\n"
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            f"<code>–ú.–£ –ù–∞–∑–≤–∞–Ω–∏–µ</code>\n\n"
            f"–ù–∞–ø—Ä–∏–º–µ—Ä: <code>{suggested_module}.{suggested_lesson} –í–≤–µ–¥–µ–Ω–∏–µ –≤ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—é</code>\n"
            f"–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ: <code>–í–≤–µ–¥–µ–Ω–∏–µ –≤ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—é</code> (–±—É–¥–µ—Ç –ú{suggested_module}.–£{suggested_lesson})",
            reply_markup=cancel_keyboard
        )
        
        await state.set_state(CourseManagement.waiting_for_lesson_title)
    
    finally:
        db.close()
    
    await callback.answer()


@router.message(CourseManagement.waiting_for_lesson_title)
async def add_lesson_title(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —É—Ä–æ–∫–∞"""
    if not is_admin(message.from_user.id):
        return
    
    data = await state.get_data()
    course_id = data['course_id']
    suggested_module = data['suggested_module']
    suggested_lesson = data['suggested_lesson']
    
    title_text = message.text.strip()
    
    # –ü–∞—Ä—Å–∏–º –º–æ–¥—É–ª—å –∏ —É—Ä–æ–∫, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã
    if '.' in title_text.split()[0]:
        try:
            module_lesson, *title_parts = title_text.split(maxsplit=1)
            module_num, lesson_num = map(int, module_lesson.split('.'))
            title = title_parts[0] if title_parts else "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
        except:
            module_num = suggested_module
            lesson_num = suggested_lesson
            title = title_text
    else:
        module_num = suggested_module
        lesson_num = suggested_lesson
        title = title_text
    
    await state.update_data(
        lesson_title=title,
        module_number=module_num,
        lesson_number=lesson_num
    )
    
    cancel_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"manage_course_{course_id}")]
    ])
    
    await message.answer(
        f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ: <b>{title}</b>\n"
        f"üìç –ü–æ–∑–∏—Ü–∏—è: –ú–æ–¥—É–ª—å {module_num}, –£—Ä–æ–∫ {lesson_num}\n\n"
        f"–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–∞:",
        reply_markup=cancel_keyboard
    )
    
    await state.set_state(CourseManagement.waiting_for_lesson_description)


@router.message(CourseManagement.waiting_for_lesson_description)
async def add_lesson_description(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —É—Ä–æ–∫–∞"""
    if not is_admin(message.from_user.id):
        return
    
    data = await state.get_data()
    course_id = data['course_id']
    
    await state.update_data(lesson_description=message.text.strip())
    
    cancel_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"manage_course_{course_id}")]
    ])
    
    await message.answer(
        "‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ\n\n"
        "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç —É—Ä–æ–∫–∞ (—Ç–µ–∫—Å—Ç —É—Ä–æ–∫–∞):",
        reply_markup=cancel_keyboard
    )
    
    await state.set_state(CourseManagement.waiting_for_lesson_content)


@router.message(CourseManagement.waiting_for_lesson_content)
async def add_lesson_content(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —É—Ä–æ–∫–∞"""
    if not is_admin(message.from_user.id):
        return
    
    data = await state.get_data()
    course_id = data['course_id']
    
    await state.update_data(lesson_content=message.text.strip())
    
    skip_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data=f"skip_video_{course_id}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"manage_course_{course_id}")]
    ])
    
    await message.answer(
        "‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ (YouTube, Vimeo –∏ —Ç.–¥.) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':",
        reply_markup=skip_keyboard
    )
    
    await state.set_state(CourseManagement.waiting_for_lesson_video)


@router.callback_query(F.data.startswith("skip_video_"))
async def skip_video(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∏–¥–µ–æ –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —É—Ä–æ–∫"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    await save_new_lesson(callback.message, state, video_url=None)
    await callback.answer()


@router.message(CourseManagement.waiting_for_lesson_video)
async def add_lesson_video(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∏–¥–µ–æ –¥–ª—è —É—Ä–æ–∫–∞"""
    if not is_admin(message.from_user.id):
        return
    
    video_url = message.text.strip()
    await save_new_lesson(message, state, video_url)


async def save_new_lesson(message: Message, state: FSMContext, video_url: str = None):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É—Ä–æ–∫–∞ –≤ –ë–î"""
    data = await state.get_data()
    
    db: Session = get_db()
    try:
        lesson = Lesson(
            course_id=data['course_id'],
            module_number=data['module_number'],
            lesson_number=data['lesson_number'],
            title=data['lesson_title'],
            description=data.get('lesson_description', ''),
            content=data.get('lesson_content', ''),
            video_url=video_url,
            order=(data['module_number'] * 100) + data['lesson_number']
        )
        
        db.add(lesson)
        db.commit()
        
        course = db.query(Course).filter(Course.id == data['course_id']).first()
        
        back_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∫—É—Ä—Å—É",
                callback_data=f"manage_course_{data['course_id']}"
            )]
        ])
        
        await message.answer(
            f"‚úÖ <b>–£—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n"
            f"üìñ –ö—É—Ä—Å: {course.name}\n"
            f"üìç –ú–æ–¥—É–ª—å {data['module_number']}, –£—Ä–æ–∫ {data['lesson_number']}\n"
            f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {data['lesson_title']}",
            reply_markup=back_keyboard
        )
    
    finally:
        db.close()
        await state.clear()


@router.callback_query(F.data.startswith("edit_lessons_"))
async def edit_lessons_list(callback: CallbackQuery):
    """–°–ø–∏—Å–æ–∫ —É—Ä–æ–∫–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    course_id = int(callback.data.split("_")[2])
    db: Session = get_db()
    
    try:
        course = db.query(Course).filter(Course.id == course_id).first()
        lessons = db.query(Lesson).filter(Lesson.course_id == course_id).order_by(
            Lesson.module_number, Lesson.lesson_number
        ).all()
        
        buttons = []
        for lesson in lessons:
            buttons.append([InlineKeyboardButton(
                text=f"–ú{lesson.module_number}.–£{lesson.lesson_number}: {lesson.title}",
                callback_data=f"edit_lesson_{lesson.id}"
            )])
        
        buttons.append([InlineKeyboardButton(
            text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∫—É—Ä—Å—É",
            callback_data=f"manage_course_{course_id}"
        )])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        
        await callback.message.edit_text(
            f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Ä–æ–∫–æ–≤ –∫—É—Ä—Å–∞ \"{course.name}\"</b>\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–∫:",
            reply_markup=keyboard
        )
    
    finally:
        db.close()
    
    await callback.answer()


@router.callback_query(F.data.startswith("edit_lesson_"))
async def edit_lesson_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Ä–æ–∫–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    lesson_id = int(callback.data.split("_")[2])
    db: Session = get_db()
    
    try:
        lesson = db.query(Lesson).filter(Lesson.id == lesson_id).first()
        
        if not lesson:
            await callback.answer("–£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        text = f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞</b>\n\n"
        text += f"üìç –ú–æ–¥—É–ª—å {lesson.module_number}, –£—Ä–æ–∫ {lesson.lesson_number}\n"
        text += f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {lesson.title}\n"
        text += f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {lesson.description[:100] if lesson.description else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}...\n"
        text += f"üìñ –ö–æ–Ω—Ç–µ–Ω—Ç: {'–ï—Å—Ç—å' if lesson.content else '–ù–µ—Ç'}\n"
        text += f"üé• –í–∏–¥–µ–æ: {'–ï—Å—Ç—å' if lesson.video_url else '–ù–µ—Ç'}\n"
        
        buttons = [
            [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"edit_title_{lesson_id}")],
            [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"edit_desc_{lesson_id}")],
            [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç", callback_data=f"edit_content_{lesson_id}")],
            [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –≤–∏–¥–µ–æ", callback_data=f"edit_video_{lesson_id}")],
            [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å —É—Ä–æ–∫", callback_data=f"delete_lesson_{lesson_id}")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"edit_lessons_{lesson.course_id}")]
        ]
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        
        await callback.message.edit_text(text, reply_markup=keyboard)
    
    finally:
        db.close()
    
    await callback.answer()


@router.callback_query(F.data.startswith("edit_title_"))
async def edit_lesson_title_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    lesson_id = int(callback.data.split("_")[2])
    await state.update_data(editing_lesson_id=lesson_id)
    
    db: Session = get_db()
    try:
        lesson = db.query(Lesson).filter(Lesson.id == lesson_id).first()
        
        cancel_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"edit_lesson_{lesson_id}")]
        ])
        
        await callback.message.edit_text(
            f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —É—Ä–æ–∫–∞</b>\n\n"
            f"–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: <b>{lesson.title}</b>\n\n"
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:",
            reply_markup=cancel_keyboard
        )
        
        await state.set_state(CourseManagement.editing_lesson_title)
    
    finally:
        db.close()
    
    await callback.answer()


@router.message(CourseManagement.editing_lesson_title)
async def edit_lesson_title_save(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è"""
    if not is_admin(message.from_user.id):
        return
    
    data = await state.get_data()
    lesson_id = data['editing_lesson_id']
    
    db: Session = get_db()
    try:
        lesson = db.query(Lesson).filter(Lesson.id == lesson_id).first()
        lesson.title = message.text.strip()
        db.commit()
        
        back_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —É—Ä–æ–∫—É", callback_data=f"edit_lesson_{lesson_id}")]
        ])
        
        await message.answer(
            f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!\n\n"
            f"–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: <b>{lesson.title}</b>",
            reply_markup=back_keyboard
        )
    
    finally:
        db.close()
        await state.clear()


@router.callback_query(F.data.startswith("edit_desc_"))
async def edit_lesson_desc_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    lesson_id = int(callback.data.split("_")[2])
    await state.update_data(editing_lesson_id=lesson_id)
    
    db: Session = get_db()
    try:
        lesson = db.query(Lesson).filter(Lesson.id == lesson_id).first()
        
        cancel_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"edit_lesson_{lesson_id}")]
        ])
        
        current_desc = lesson.description if lesson.description else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        
        await callback.message.edit_text(
            f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —É—Ä–æ–∫–∞</b>\n\n"
            f"–¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:\n{current_desc}\n\n"
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:",
            reply_markup=cancel_keyboard
        )
        
        await state.set_state(CourseManagement.editing_lesson_description)
    
    finally:
        db.close()
    
    await callback.answer()


@router.message(CourseManagement.editing_lesson_description)
async def edit_lesson_desc_save(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è"""
    if not is_admin(message.from_user.id):
        return
    
    data = await state.get_data()
    lesson_id = data['editing_lesson_id']
    
    db: Session = get_db()
    try:
        lesson = db.query(Lesson).filter(Lesson.id == lesson_id).first()
        lesson.description = message.text.strip()
        db.commit()
        
        back_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —É—Ä–æ–∫—É", callback_data=f"edit_lesson_{lesson_id}")]
        ])
        
        await message.answer(
            "‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!",
            reply_markup=back_keyboard
        )
    
    finally:
        db.close()
        await state.clear()


@router.callback_query(F.data.startswith("edit_content_"))
async def edit_lesson_content_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    lesson_id = int(callback.data.split("_")[2])
    await state.update_data(editing_lesson_id=lesson_id)
    
    db: Session = get_db()
    try:
        lesson = db.query(Lesson).filter(Lesson.id == lesson_id).first()
        
        cancel_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"edit_lesson_{lesson_id}")]
        ])
        
        await callback.message.edit_text(
            f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —É—Ä–æ–∫–∞</b>\n\n"
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —É—Ä–æ–∫–∞:",
            reply_markup=cancel_keyboard
        )
        
        await state.set_state(CourseManagement.editing_lesson_content)
    
    finally:
        db.close()
    
    await callback.answer()


@router.message(CourseManagement.editing_lesson_content)
async def edit_lesson_content_save(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    if not is_admin(message.from_user.id):
        return
    
    data = await state.get_data()
    lesson_id = data['editing_lesson_id']
    
    db: Session = get_db()
    try:
        lesson = db.query(Lesson).filter(Lesson.id == lesson_id).first()
        lesson.content = message.text.strip()
        db.commit()
        
        back_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —É—Ä–æ–∫—É", callback_data=f"edit_lesson_{lesson_id}")]
        ])
        
        await message.answer(
            "‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç —É—Ä–æ–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω!",
            reply_markup=back_keyboard
        )
    
    finally:
        db.close()
        await state.clear()


@router.callback_query(F.data.startswith("edit_video_"))
async def edit_lesson_video_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    lesson_id = int(callback.data.split("_")[2])
    await state.update_data(editing_lesson_id=lesson_id)
    
    db: Session = get_db()
    try:
        lesson = db.query(Lesson).filter(Lesson.id == lesson_id).first()
        
        cancel_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"edit_lesson_{lesson_id}")]
        ])
        
        current_video = lesson.video_url if lesson.video_url else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        
        await callback.message.edit_text(
            f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ —É—Ä–æ–∫–∞</b>\n\n"
            f"–¢–µ–∫—É—â–µ–µ –≤–∏–¥–µ–æ: {current_video}\n\n"
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ:",
            reply_markup=cancel_keyboard
        )
        
        await state.set_state(CourseManagement.editing_lesson_video)
    
    finally:
        db.close()
    
    await callback.answer()


@router.message(CourseManagement.editing_lesson_video)
async def edit_lesson_video_save(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≤–∏–¥–µ–æ"""
    if not is_admin(message.from_user.id):
        return
    
    data = await state.get_data()
    lesson_id = data['editing_lesson_id']
    
    db: Session = get_db()
    try:
        lesson = db.query(Lesson).filter(Lesson.id == lesson_id).first()
        lesson.video_url = message.text.strip()
        db.commit()
        
        back_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —É—Ä–æ–∫—É", callback_data=f"edit_lesson_{lesson_id}")]
        ])
        
        await message.answer(
            "‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!",
            reply_markup=back_keyboard
        )
    
    finally:
        db.close()
        await state.clear()


@router.callback_query(F.data.startswith("delete_lesson_"))
async def delete_lesson_confirm(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —É—Ä–æ–∫–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    lesson_id = int(callback.data.split("_")[2])
    
    db: Session = get_db()
    try:
        lesson = db.query(Lesson).filter(Lesson.id == lesson_id).first()
        
        buttons = [
            [InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_{lesson_id}")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"edit_lesson_{lesson_id}")]
        ]
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        
        await callback.message.edit_text(
            f"‚ö†Ô∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è</b>\n\n"
            f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —É—Ä–æ–∫?\n\n"
            f"üìç –ú{lesson.module_number}.–£{lesson.lesson_number}: {lesson.title}\n\n"
            f"–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
            reply_markup=keyboard
        )
    
    finally:
        db.close()
    
    await callback.answer()


@router.callback_query(F.data.startswith("confirm_delete_"))
async def delete_lesson(callback: CallbackQuery):
    """–£–¥–∞–ª–µ–Ω–∏–µ —É—Ä–æ–∫–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    lesson_id = int(callback.data.split("_")[2])
    
    db: Session = get_db()
    try:
        lesson = db.query(Lesson).filter(Lesson.id == lesson_id).first()
        course_id = lesson.course_id
        
        db.delete(lesson)
        db.commit()
        
        back_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∫—É—Ä—Å—É", callback_data=f"manage_course_{course_id}")]
        ])
        
        await callback.message.edit_text(
            "‚úÖ <b>–£—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!</b>",
            reply_markup=back_keyboard
        )
    
    finally:
        db.close()
    
    await callback.answer()

