from datetime import datetime, timedelta
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from sqlalchemy.orm import Session
from sqlalchemy import func

from config import config
from database import get_db, User, Payment, Course, Consultation
from keyboards import get_admin_keyboard, get_back_to_admin_keyboard

router = Router()


def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return user_id == config.ADMIN_ID


@router.message(Command("admin"))
async def cmd_admin(message: Message):
    """–í—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –ø–æ –∫–æ–º–∞–Ω–¥–µ /admin"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
        return
    
    await message.answer(
        "üîê <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_keyboard()
    )


@router.callback_query(F.data == "admin_panel")
async def show_admin_panel(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    await callback.message.edit_text(
        "üîê <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data == "admin_stats")
async def show_stats(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    db: Session = get_db()
    
    try:
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_users = db.query(User).count()
        total_purchases = db.query(Payment).count()
        total_revenue = db.query(func.sum(Payment.amount)).scalar() or 0
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π)
        week_ago = datetime.utcnow() - timedelta(days=7)
        active_users = db.query(User).filter(User.last_activity >= week_ago).count()
        
        # –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞ –Ω–µ–¥–µ–ª—é
        new_users = db.query(User).filter(User.created_at >= week_ago).count()
        
        # –ü–æ–∫—É–ø–∫–∏ –∑–∞ –Ω–µ–¥–µ–ª—é
        week_purchases = db.query(Payment).filter(Payment.created_at >= week_ago).count()
        week_revenue = db.query(func.sum(Payment.amount)).filter(
            Payment.created_at >= week_ago
        ).scalar() or 0
        
        # –ö—É—Ä—Å—ã –∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
        total_courses = db.query(Course).count()
        total_consultations = db.query(Consultation).count()
        
        stats_text = f"""üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>

üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>
‚Ä¢ –í—Å–µ–≥–æ: {total_users}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {active_users}
‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {new_users}

üí∞ <b>–§–∏–Ω–∞–Ω—Å—ã:</b>
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–∫—É–ø–æ–∫: {total_purchases}
‚Ä¢ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: {total_revenue:,.0f} ‚ÇΩ
‚Ä¢ –ó–∞ –Ω–µ–¥–µ–ª—é –ø–æ–∫—É–ø–æ–∫: {week_purchases}
‚Ä¢ –ó–∞ –Ω–µ–¥–µ–ª—é –≤—ã—Ä—É—á–∫–∞: {week_revenue:,.0f} ‚ÇΩ

üìö <b>–ö–æ–Ω—Ç–µ–Ω—Ç:</b>
‚Ä¢ –ö—É—Ä—Å–æ–≤: {total_courses}
‚Ä¢ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π: {total_consultations}
"""
        
        await callback.message.edit_text(
            stats_text,
            reply_markup=get_back_to_admin_keyboard()
        )
    
    finally:
        db.close()
    
    await callback.answer()


@router.callback_query(F.data == "admin_users")
async def show_users(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    db: Session = get_db()
    
    try:
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = db.query(User).order_by(User.created_at.desc()).limit(10).all()
        
        users_text = "üë• <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n\n"
        
        for user in users:
            username = f"@{user.username}" if user.username else "–ë–µ–∑ username"
            name = user.first_name or "–ë–µ–∑ –∏–º–µ–Ω–∏"
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫—É–ø–æ–∫
            purchases_count = len(user.payments)
            
            users_text += f"‚Ä¢ {name} ({username})\n"
            users_text += f"  ID: <code>{user.telegram_id}</code>\n"
            users_text += f"  –ü–æ–∫—É–ø–æ–∫: {purchases_count}\n"
            users_text += f"  –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user.created_at.strftime('%d.%m.%Y')}\n\n"
        
        await callback.message.edit_text(
            users_text,
            reply_markup=get_back_to_admin_keyboard()
        )
    
    finally:
        db.close()
    
    await callback.answer()


@router.callback_query(F.data == "admin_purchases")
async def show_purchases(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    db: Session = get_db()
    
    try:
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ø–æ–∫—É–ø–æ–∫
        purchases = db.query(Payment).order_by(Payment.created_at.desc()).limit(10).all()
        
        if not purchases:
            purchases_text = "üì¶ <b>–ü–æ–∫—É–ø–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç</b>"
        else:
            purchases_text = "üì¶ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏:</b>\n\n"
            
            for purchase in purchases:
                user = purchase.user
                username = f"@{user.username}" if user.username else "–ë–µ–∑ username"
                name = user.first_name or "–ë–µ–∑ –∏–º–µ–Ω–∏"
                
                # –¢–∏–ø –ø–æ–∫—É–ø–∫–∏
                item_type = "–ö—É—Ä—Å" if purchase.course_id else "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è"
                item_name = ""
                if purchase.course_id:
                    course = db.query(Course).filter(Course.id == purchase.course_id).first()
                    item_name = course.name if course else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                elif purchase.consultation_id:
                    consultation = db.query(Consultation).filter(
                        Consultation.id == purchase.consultation_id
                    ).first()
                    item_name = consultation.name if consultation else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                
                purchases_text += f"‚Ä¢ {name} ({username})\n"
                purchases_text += f"  {item_type}: {item_name}\n"
                purchases_text += f"  –°—É–º–º–∞: {purchase.amount:,.0f} ‚ÇΩ\n"
                purchases_text += f"  –î–∞—Ç–∞: {purchase.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
        
        await callback.message.edit_text(
            purchases_text,
            reply_markup=get_back_to_admin_keyboard()
        )
    
    finally:
        db.close()
    
    await callback.answer()


@router.callback_query(F.data == "admin_broadcast")
async def broadcast_info(callback: CallbackQuery):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞—Å—Å—ã–ª–∫–µ"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    await callback.message.edit_text(
        "üì¢ <b>–†–∞—Å—Å—ã–ª–∫–∞</b>\n\n"
        "–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
        "<code>/broadcast [—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è]</code>\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "<code>/broadcast –ù–æ–≤—ã–π –∫—É—Ä—Å —É–∂–µ –¥–æ—Å—Ç—É–ø–µ–Ω!</code>",
        reply_markup=get_back_to_admin_keyboard()
    )
    await callback.answer()


@router.message(Command("broadcast"))
async def broadcast_message(message: Message):
    """–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    text = message.text.replace("/broadcast", "").strip()
    
    if not text:
        await message.answer(
            "‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:\n"
            "<code>/broadcast [—Ç–µ–∫—Å—Ç]</code>"
        )
        return
    
    db: Session = get_db()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = db.query(User).all()
        
        success_count = 0
        fail_count = 0
        
        status_msg = await message.answer(f"üì§ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        
        for user in users:
            try:
                await message.bot.send_message(
                    chat_id=user.telegram_id,
                    text=text
                )
                success_count += 1
            except Exception as e:
                fail_count += 1
        
        await status_msg.edit_text(
            f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            f"–£—Å–ø–µ—à–Ω–æ: {success_count}\n"
            f"–û—à–∏–±–æ–∫: {fail_count}"
        )
    
    finally:
        db.close()

