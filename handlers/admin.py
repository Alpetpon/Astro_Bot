from datetime import datetime, timedelta
from aiogram import Router, F
from aiogram.filters import Command, StateFilter
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy.orm import Session
from sqlalchemy import func
import os
from io import BytesIO
from openpyxl import Workbook
from openpyxl.styles import Font, PatternFill, Alignment

from config import config
from database import get_db, User, Payment
from keyboards import get_admin_keyboard, get_back_to_admin_keyboard
from data import get_all_courses, get_all_consultations

# –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –º–æ–¥–µ–ª–µ–π –ë–î (–∫–æ–¥ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –ø—Ä–æ–µ–∫—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ JSON)
Course = None  # type: ignore
Consultation = None  # type: ignore
Lesson = None  # type: ignore

router = Router()


class CourseManagement(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–∞–º–∏"""
    waiting_for_lesson_title = State()
    waiting_for_lesson_description = State()
    waiting_for_lesson_content = State()
    waiting_for_lesson_video = State()
    editing_lesson_title = State()
    editing_lesson_description = State()
    editing_lesson_content = State()
    editing_lesson_video = State()


class ConsultationManagement(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è–º–∏"""
    editing_name = State()
    editing_price = State()
    editing_duration = State()
    editing_description = State()
    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
    creating_name = State()
    creating_slug = State()
    creating_emoji = State()
    creating_price = State()
    creating_duration = State()
    creating_description = State()


class CourseCreation(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫—É—Ä—Å–∞"""
    waiting_for_name = State()
    waiting_for_slug = State()
    waiting_for_description = State()
    waiting_for_duration = State()


def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return user_id == config.ADMIN_ID


@router.message(Command("admin"))
async def cmd_admin(message: Message):
    """–í—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –ø–æ –∫–æ–º–∞–Ω–¥–µ /admin"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
        return
    
    await message.answer(
        "üîê <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_keyboard()
    )


@router.callback_query(F.data == "admin_panel")
async def show_admin_panel(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    await callback.message.edit_text(
        "üîê <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data == "admin_stats")
async def show_stats(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    db: Session = get_db()
    
    try:
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_users = db.query(User).count()
        total_purchases = db.query(Payment).count()
        total_revenue = db.query(func.sum(Payment.amount)).scalar() or 0
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π)
        week_ago = datetime.utcnow() - timedelta(days=7)
        active_users = db.query(User).filter(User.last_activity >= week_ago).count()
        
        # –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞ –Ω–µ–¥–µ–ª—é
        new_users = db.query(User).filter(User.created_at >= week_ago).count()
        
        # –ü–æ–∫—É–ø–∫–∏ –∑–∞ –Ω–µ–¥–µ–ª—é
        week_purchases = db.query(Payment).filter(Payment.created_at >= week_ago).count()
        week_revenue = db.query(func.sum(Payment.amount)).filter(
            Payment.created_at >= week_ago
        ).scalar() or 0
        
        # –ö—É—Ä—Å—ã –∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ (–∏–∑ JSON)
        total_courses = len(get_all_courses())
        total_consultations = len(get_all_consultations())
        
        stats_text = f"""üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>

üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>
‚Ä¢ –í—Å–µ–≥–æ: {total_users}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {active_users}
‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {new_users}

üí∞ <b>–§–∏–Ω–∞–Ω—Å—ã:</b>
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–∫—É–ø–æ–∫: {total_purchases}
‚Ä¢ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: {total_revenue:,.0f} ‚ÇΩ
‚Ä¢ –ó–∞ –Ω–µ–¥–µ–ª—é –ø–æ–∫—É–ø–æ–∫: {week_purchases}
‚Ä¢ –ó–∞ –Ω–µ–¥–µ–ª—é –≤—ã—Ä—É—á–∫–∞: {week_revenue:,.0f} ‚ÇΩ

üìö <b>–ö–æ–Ω—Ç–µ–Ω—Ç:</b>
‚Ä¢ –ö—É—Ä—Å–æ–≤: {total_courses}
‚Ä¢ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π: {total_consultations}
"""
        
        # –ö–Ω–æ–ø–∫–∏ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Å–∫–∞—á–∞—Ç—å Excel
        buttons = [
            [InlineKeyboardButton(text="üì• –°–∫–∞—á–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É (Excel)", callback_data="download_analytics")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]
        ]
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        
        await callback.message.edit_text(
            stats_text,
            reply_markup=keyboard
        )
    
    finally:
        db.close()
    
    await callback.answer()


@router.callback_query(F.data == "admin_broadcast")
async def broadcast_info(callback: CallbackQuery):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞—Å—Å—ã–ª–∫–µ"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    await callback.message.edit_text(
        "üì¢ <b>–†–∞—Å—Å—ã–ª–∫–∞</b>\n\n"
        "–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
        "<code>/broadcast [—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è]</code>\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "<code>/broadcast –ù–æ–≤—ã–π –∫—É—Ä—Å —É–∂–µ –¥–æ—Å—Ç—É–ø–µ–Ω!</code>",
        reply_markup=get_back_to_admin_keyboard()
    )
    await callback.answer()


@router.message(Command("broadcast"))
async def broadcast_message(message: Message):
    """–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    text = message.text.replace("/broadcast", "").strip()
    
    if not text:
        await message.answer(
            "‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:\n"
            "<code>/broadcast [—Ç–µ–∫—Å—Ç]</code>"
        )
        return
    
    db: Session = get_db()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = db.query(User).all()
        
        success_count = 0
        fail_count = 0
        
        status_msg = await message.answer(f"üì§ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        
        for user in users:
            try:
                await message.bot.send_message(
                    chat_id=user.telegram_id,
                    text=text
                )
                success_count += 1
            except Exception as e:
                fail_count += 1
        
        await status_msg.edit_text(
            f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            f"–£—Å–ø–µ—à–Ω–æ: {success_count}\n"
            f"–û—à–∏–±–æ–∫: {fail_count}"
        )
    
    finally:
        db.close()


@router.callback_query(F.data == "admin_courses")
async def show_courses_management(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞–º–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    db: Session = get_db()
    
    try:
        courses = db.query(Course).order_by(Course.order).all()
        
        if not courses:
            await callback.message.edit_text(
                "üìö <b>–ö—É—Ä—Å—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç</b>\n\n"
                "–°–æ–∑–¥–∞–π—Ç–µ –∫—É—Ä—Å—ã —á–µ—Ä–µ–∑ utils/admin.py",
                reply_markup=get_back_to_admin_keyboard()
            )
        else:
            buttons = []
            for course in courses:
                lessons_count = len(course.lessons)
                buttons.append([InlineKeyboardButton(
                    text=f"üìñ {course.name} ({lessons_count} —É—Ä–æ–∫–æ–≤)",
                    callback_data=f"manage_course_{course.id}"
                )])
            
            buttons.append([InlineKeyboardButton(
                text="‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫—É—Ä—Å",
                callback_data="create_course"
            )])
            buttons.append([InlineKeyboardButton(
                text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å",
                callback_data="admin_panel"
            )])
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
            
            await callback.message.edit_text(
                "üìö <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞–º–∏</b>\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π:",
                reply_markup=keyboard
            )
    
    finally:
        db.close()
    
    await callback.answer()


@router.callback_query(F.data.startswith("manage_course_"))
async def manage_course(callback: CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∫—É—Ä—Å–æ–º"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    course_id = int(callback.data.split("_")[2])
    db: Session = get_db()
    
    try:
        course = db.query(Course).filter(Course.id == course_id).first()
        
        if not course:
            await callback.answer("–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        lessons = db.query(Lesson).filter(Lesson.course_id == course_id).order_by(
            Lesson.module_number, Lesson.lesson_number
        ).all()
        
        text = f"üìñ <b>{course.name}</b>\n\n"
        
        if lessons:
            text += "üìù <b>–£—Ä–æ–∫–∏:</b>\n\n"
            for lesson in lessons:
                text += f"‚Ä¢ –ú{lesson.module_number}.–£{lesson.lesson_number}: {lesson.title}\n"
        else:
            text += "–£—Ä–æ–∫–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç\n"
        
        buttons = [
            [InlineKeyboardButton(
                text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—Ä–æ–∫",
                callback_data=f"add_lesson_{course_id}"
            )]
        ]
        
        if lessons:
            buttons.append([InlineKeyboardButton(
                text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —É—Ä–æ–∫",
                callback_data=f"edit_lessons_{course_id}"
            )])
        
        buttons.append([InlineKeyboardButton(
            text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∫—É—Ä—Å–∞–º",
            callback_data="admin_courses"
        )])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        
        await callback.message.edit_text(text, reply_markup=keyboard)
    
    finally:
        db.close()
    
    await callback.answer()


@router.callback_query(F.data.startswith("add_lesson_"))
async def add_lesson_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—Ä–æ–∫–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    course_id = int(callback.data.split("_")[2])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º course_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(course_id=course_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–∫–∞
    db: Session = get_db()
    try:
        course = db.query(Course).filter(Course.id == course_id).first()
        lessons = db.query(Lesson).filter(Lesson.course_id == course_id).all()
        
        if lessons:
            max_module = max(lesson.module_number for lesson in lessons)
            max_lesson_in_module = max(
                lesson.lesson_number for lesson in lessons 
                if lesson.module_number == max_module
            )
            suggested_module = max_module
            suggested_lesson = max_lesson_in_module + 1
        else:
            suggested_module = 1
            suggested_lesson = 1
        
        await state.update_data(
            suggested_module=suggested_module,
            suggested_lesson=suggested_lesson
        )
        
        cancel_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"manage_course_{course_id}")]
        ])
        
        await callback.message.edit_text(
            f"‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—Ä–æ–∫–∞ –≤ –∫—É—Ä—Å \"{course.name}\"</b>\n\n"
            f"–ü—Ä–µ–¥–ª–∞–≥–∞—é: –ú–æ–¥—É–ª—å {suggested_module}, –£—Ä–æ–∫ {suggested_lesson}\n\n"
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            f"<code>–ú.–£ –ù–∞–∑–≤–∞–Ω–∏–µ</code>\n\n"
            f"–ù–∞–ø—Ä–∏–º–µ—Ä: <code>{suggested_module}.{suggested_lesson} –í–≤–µ–¥–µ–Ω–∏–µ –≤ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—é</code>\n"
            f"–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ: <code>–í–≤–µ–¥–µ–Ω–∏–µ –≤ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—é</code> (–±—É–¥–µ—Ç –ú{suggested_module}.–£{suggested_lesson})",
            reply_markup=cancel_keyboard
        )
        
        await state.set_state(CourseManagement.waiting_for_lesson_title)
    
    finally:
        db.close()
    
    await callback.answer()


@router.message(CourseManagement.waiting_for_lesson_title)
async def add_lesson_title(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —É—Ä–æ–∫–∞"""
    if not is_admin(message.from_user.id):
        return
    
    data = await state.get_data()
    course_id = data['course_id']
    suggested_module = data['suggested_module']
    suggested_lesson = data['suggested_lesson']
    
    title_text = message.text.strip()
    
    # –ü–∞—Ä—Å–∏–º –º–æ–¥—É–ª—å –∏ —É—Ä–æ–∫, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã
    if '.' in title_text.split()[0]:
        try:
            module_lesson, *title_parts = title_text.split(maxsplit=1)
            module_num, lesson_num = map(int, module_lesson.split('.'))
            title = title_parts[0] if title_parts else "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
        except:
            module_num = suggested_module
            lesson_num = suggested_lesson
            title = title_text
    else:
        module_num = suggested_module
        lesson_num = suggested_lesson
        title = title_text
    
    await state.update_data(
        lesson_title=title,
        module_number=module_num,
        lesson_number=lesson_num
    )
    
    cancel_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"manage_course_{course_id}")]
    ])
    
    await message.answer(
        f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ: <b>{title}</b>\n"
        f"üìç –ü–æ–∑–∏—Ü–∏—è: –ú–æ–¥—É–ª—å {module_num}, –£—Ä–æ–∫ {lesson_num}\n\n"
        f"–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–∞:",
        reply_markup=cancel_keyboard
    )
    
    await state.set_state(CourseManagement.waiting_for_lesson_description)


@router.message(CourseManagement.waiting_for_lesson_description)
async def add_lesson_description(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —É—Ä–æ–∫–∞"""
    if not is_admin(message.from_user.id):
        return
    
    data = await state.get_data()
    course_id = data['course_id']
    
    await state.update_data(lesson_description=message.text.strip())
    
    cancel_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"manage_course_{course_id}")]
    ])
    
    await message.answer(
        "‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ\n\n"
        "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç —É—Ä–æ–∫–∞ (—Ç–µ–∫—Å—Ç —É—Ä–æ–∫–∞):",
        reply_markup=cancel_keyboard
    )
    
    await state.set_state(CourseManagement.waiting_for_lesson_content)


@router.message(CourseManagement.waiting_for_lesson_content)
async def add_lesson_content(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —É—Ä–æ–∫–∞"""
    if not is_admin(message.from_user.id):
        return
    
    data = await state.get_data()
    course_id = data['course_id']
    
    await state.update_data(lesson_content=message.text.strip())
    
    skip_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data=f"skip_video_{course_id}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"manage_course_{course_id}")]
    ])
    
    await message.answer(
        "‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ (YouTube, Vimeo –∏ —Ç.–¥.) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':",
        reply_markup=skip_keyboard
    )
    
    await state.set_state(CourseManagement.waiting_for_lesson_video)


@router.callback_query(F.data.startswith("skip_video_"))
async def skip_video(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∏–¥–µ–æ –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —É—Ä–æ–∫"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    await save_new_lesson(callback.message, state, video_url=None)
    await callback.answer()


@router.message(CourseManagement.waiting_for_lesson_video)
async def add_lesson_video(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∏–¥–µ–æ –¥–ª—è —É—Ä–æ–∫–∞"""
    if not is_admin(message.from_user.id):
        return
    
    video_url = message.text.strip()
    await save_new_lesson(message, state, video_url)


async def save_new_lesson(message: Message, state: FSMContext, video_url: str = None):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É—Ä–æ–∫–∞ –≤ –ë–î"""
    data = await state.get_data()
    
    db: Session = get_db()
    try:
        lesson = Lesson(
            course_id=data['course_id'],
            module_number=data['module_number'],
            lesson_number=data['lesson_number'],
            title=data['lesson_title'],
            description=data.get('lesson_description', ''),
            content=data.get('lesson_content', ''),
            video_url=video_url,
            order=(data['module_number'] * 100) + data['lesson_number']
        )
        
        db.add(lesson)
        db.commit()
        
        course = db.query(Course).filter(Course.id == data['course_id']).first()
        
        back_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∫—É—Ä—Å—É",
                callback_data=f"manage_course_{data['course_id']}"
            )]
        ])
        
        await message.answer(
            f"‚úÖ <b>–£—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n"
            f"üìñ –ö—É—Ä—Å: {course.name}\n"
            f"üìç –ú–æ–¥—É–ª—å {data['module_number']}, –£—Ä–æ–∫ {data['lesson_number']}\n"
            f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {data['lesson_title']}",
            reply_markup=back_keyboard
        )
    
    finally:
        db.close()
        await state.clear()


@router.callback_query(F.data.startswith("edit_lessons_"))
async def edit_lessons_list(callback: CallbackQuery):
    """–°–ø–∏—Å–æ–∫ —É—Ä–æ–∫–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    course_id = int(callback.data.split("_")[2])
    db: Session = get_db()
    
    try:
        course = db.query(Course).filter(Course.id == course_id).first()
        lessons = db.query(Lesson).filter(Lesson.course_id == course_id).order_by(
            Lesson.module_number, Lesson.lesson_number
        ).all()
        
        buttons = []
        for lesson in lessons:
            buttons.append([InlineKeyboardButton(
                text=f"–ú{lesson.module_number}.–£{lesson.lesson_number}: {lesson.title}",
                callback_data=f"edit_lesson_{lesson.id}"
            )])
        
        buttons.append([InlineKeyboardButton(
            text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∫—É—Ä—Å—É",
            callback_data=f"manage_course_{course_id}"
        )])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        
        await callback.message.edit_text(
            f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Ä–æ–∫–æ–≤ –∫—É—Ä—Å–∞ \"{course.name}\"</b>\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–∫:",
            reply_markup=keyboard
        )
    
    finally:
        db.close()
    
    await callback.answer()


@router.callback_query(F.data.startswith("edit_lesson_"))
async def edit_lesson_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Ä–æ–∫–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    lesson_id = int(callback.data.split("_")[2])
    db: Session = get_db()
    
    try:
        lesson = db.query(Lesson).filter(Lesson.id == lesson_id).first()
        
        if not lesson:
            await callback.answer("–£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        text = f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞</b>\n\n"
        text += f"üìç –ú–æ–¥—É–ª—å {lesson.module_number}, –£—Ä–æ–∫ {lesson.lesson_number}\n"
        text += f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {lesson.title}\n"
        text += f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {lesson.description[:100] if lesson.description else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}...\n"
        text += f"üìñ –ö–æ–Ω—Ç–µ–Ω—Ç: {'–ï—Å—Ç—å' if lesson.content else '–ù–µ—Ç'}\n"
        text += f"üé• –í–∏–¥–µ–æ: {'–ï—Å—Ç—å' if lesson.video_url else '–ù–µ—Ç'}\n"
        
        buttons = [
            [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"edit_title_{lesson_id}")],
            [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"edit_desc_{lesson_id}")],
            [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç", callback_data=f"edit_content_{lesson_id}")],
            [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –≤–∏–¥–µ–æ", callback_data=f"edit_video_{lesson_id}")],
            [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å —É—Ä–æ–∫", callback_data=f"delete_lesson_{lesson_id}")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"edit_lessons_{lesson.course_id}")]
        ]
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        
        await callback.message.edit_text(text, reply_markup=keyboard)
    
    finally:
        db.close()
    
    await callback.answer()


@router.callback_query(F.data.startswith("edit_title_"))
async def edit_lesson_title_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    lesson_id = int(callback.data.split("_")[2])
    await state.update_data(editing_lesson_id=lesson_id)
    
    db: Session = get_db()
    try:
        lesson = db.query(Lesson).filter(Lesson.id == lesson_id).first()
        
        cancel_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"edit_lesson_{lesson_id}")]
        ])
        
        await callback.message.edit_text(
            f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —É—Ä–æ–∫–∞</b>\n\n"
            f"–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: <b>{lesson.title}</b>\n\n"
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:",
            reply_markup=cancel_keyboard
        )
        
        await state.set_state(CourseManagement.editing_lesson_title)
    
    finally:
        db.close()
    
    await callback.answer()


@router.message(CourseManagement.editing_lesson_title)
async def edit_lesson_title_save(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è"""
    if not is_admin(message.from_user.id):
        return
    
    data = await state.get_data()
    lesson_id = data['editing_lesson_id']
    
    db: Session = get_db()
    try:
        lesson = db.query(Lesson).filter(Lesson.id == lesson_id).first()
        lesson.title = message.text.strip()
        db.commit()
        
        back_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —É—Ä–æ–∫—É", callback_data=f"edit_lesson_{lesson_id}")]
        ])
        
        await message.answer(
            f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!\n\n"
            f"–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: <b>{lesson.title}</b>",
            reply_markup=back_keyboard
        )
    
    finally:
        db.close()
        await state.clear()


@router.callback_query(F.data.startswith("edit_desc_"))
async def edit_lesson_desc_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    lesson_id = int(callback.data.split("_")[2])
    await state.update_data(editing_lesson_id=lesson_id)
    
    db: Session = get_db()
    try:
        lesson = db.query(Lesson).filter(Lesson.id == lesson_id).first()
        
        cancel_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"edit_lesson_{lesson_id}")]
        ])
        
        current_desc = lesson.description if lesson.description else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        
        await callback.message.edit_text(
            f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —É—Ä–æ–∫–∞</b>\n\n"
            f"–¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:\n{current_desc}\n\n"
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:",
            reply_markup=cancel_keyboard
        )
        
        await state.set_state(CourseManagement.editing_lesson_description)
    
    finally:
        db.close()
    
    await callback.answer()


@router.message(CourseManagement.editing_lesson_description)
async def edit_lesson_desc_save(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è"""
    if not is_admin(message.from_user.id):
        return
    
    data = await state.get_data()
    lesson_id = data['editing_lesson_id']
    
    db: Session = get_db()
    try:
        lesson = db.query(Lesson).filter(Lesson.id == lesson_id).first()
        lesson.description = message.text.strip()
        db.commit()
        
        back_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —É—Ä–æ–∫—É", callback_data=f"edit_lesson_{lesson_id}")]
        ])
        
        await message.answer(
            "‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!",
            reply_markup=back_keyboard
        )
    
    finally:
        db.close()
        await state.clear()


@router.callback_query(F.data.startswith("edit_content_"))
async def edit_lesson_content_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    lesson_id = int(callback.data.split("_")[2])
    await state.update_data(editing_lesson_id=lesson_id)
    
    db: Session = get_db()
    try:
        lesson = db.query(Lesson).filter(Lesson.id == lesson_id).first()
        
        cancel_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"edit_lesson_{lesson_id}")]
        ])
        
        await callback.message.edit_text(
            f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —É—Ä–æ–∫–∞</b>\n\n"
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —É—Ä–æ–∫–∞:",
            reply_markup=cancel_keyboard
        )
        
        await state.set_state(CourseManagement.editing_lesson_content)
    
    finally:
        db.close()
    
    await callback.answer()


@router.message(CourseManagement.editing_lesson_content)
async def edit_lesson_content_save(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    if not is_admin(message.from_user.id):
        return
    
    data = await state.get_data()
    lesson_id = data['editing_lesson_id']
    
    db: Session = get_db()
    try:
        lesson = db.query(Lesson).filter(Lesson.id == lesson_id).first()
        lesson.content = message.text.strip()
        db.commit()
        
        back_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —É—Ä–æ–∫—É", callback_data=f"edit_lesson_{lesson_id}")]
        ])
        
        await message.answer(
            "‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç —É—Ä–æ–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω!",
            reply_markup=back_keyboard
        )
    
    finally:
        db.close()
        await state.clear()


@router.callback_query(F.data.startswith("edit_video_"))
async def edit_lesson_video_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    lesson_id = int(callback.data.split("_")[2])
    await state.update_data(editing_lesson_id=lesson_id)
    
    db: Session = get_db()
    try:
        lesson = db.query(Lesson).filter(Lesson.id == lesson_id).first()
        
        cancel_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"edit_lesson_{lesson_id}")]
        ])
        
        current_video = lesson.video_url if lesson.video_url else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        
        await callback.message.edit_text(
            f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ —É—Ä–æ–∫–∞</b>\n\n"
            f"–¢–µ–∫—É—â–µ–µ –≤–∏–¥–µ–æ: {current_video}\n\n"
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ:",
            reply_markup=cancel_keyboard
        )
        
        await state.set_state(CourseManagement.editing_lesson_video)
    
    finally:
        db.close()
    
    await callback.answer()


@router.message(CourseManagement.editing_lesson_video)
async def edit_lesson_video_save(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≤–∏–¥–µ–æ"""
    if not is_admin(message.from_user.id):
        return
    
    data = await state.get_data()
    lesson_id = data['editing_lesson_id']
    
    db: Session = get_db()
    try:
        lesson = db.query(Lesson).filter(Lesson.id == lesson_id).first()
        lesson.video_url = message.text.strip()
        db.commit()
        
        back_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —É—Ä–æ–∫—É", callback_data=f"edit_lesson_{lesson_id}")]
        ])
        
        await message.answer(
            "‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!",
            reply_markup=back_keyboard
        )
    
    finally:
        db.close()
        await state.clear()


@router.callback_query(F.data.startswith("delete_lesson_"))
async def delete_lesson_confirm(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —É—Ä–æ–∫–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    lesson_id = int(callback.data.split("_")[2])
    
    db: Session = get_db()
    try:
        lesson = db.query(Lesson).filter(Lesson.id == lesson_id).first()
        
        buttons = [
            [InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_{lesson_id}")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"edit_lesson_{lesson_id}")]
        ]
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        
        await callback.message.edit_text(
            f"‚ö†Ô∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è</b>\n\n"
            f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —É—Ä–æ–∫?\n\n"
            f"üìç –ú{lesson.module_number}.–£{lesson.lesson_number}: {lesson.title}\n\n"
            f"–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
            reply_markup=keyboard
        )
    
    finally:
        db.close()
    
    await callback.answer()


@router.callback_query(F.data.startswith("confirm_delete_"))
async def delete_lesson(callback: CallbackQuery):
    """–£–¥–∞–ª–µ–Ω–∏–µ —É—Ä–æ–∫–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    lesson_id = int(callback.data.split("_")[2])
    
    db: Session = get_db()
    try:
        lesson = db.query(Lesson).filter(Lesson.id == lesson_id).first()
        course_id = lesson.course_id
        
        db.delete(lesson)
        db.commit()
        
        back_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∫—É—Ä—Å—É", callback_data=f"manage_course_{course_id}")]
        ])
        
        await callback.message.edit_text(
            "‚úÖ <b>–£—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!</b>",
            reply_markup=back_keyboard
        )
    
    finally:
        db.close()
    
    await callback.answer()


@router.callback_query(F.data == "download_analytics")
async def download_analytics(callback: CallbackQuery):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ Excel —Ñ–∞–π–ª–∞ —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    await callback.answer("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ñ–∞–π–ª...")
    
    db: Session = get_db()
    
    try:
        # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª
        wb = Workbook()
        
        # –õ–∏—Å—Ç 1: –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        ws_stats = wb.active
        ws_stats.title = "–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        header_fill = PatternFill(start_color="4472C4", end_color="4472C4", fill_type="solid")
        header_font = Font(bold=True, color="FFFFFF", size=12)
        
        ws_stats['A1'] = '–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞'
        ws_stats['A1'].font = Font(bold=True, size=14)
        ws_stats.merge_cells('A1:B1')
        
        row = 3
        ws_stats[f'A{row}'] = '–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å'
        ws_stats[f'B{row}'] = '–ó–Ω–∞—á–µ–Ω–∏–µ'
        ws_stats[f'A{row}'].fill = header_fill
        ws_stats[f'B{row}'].fill = header_fill
        ws_stats[f'A{row}'].font = header_font
        ws_stats[f'B{row}'].font = header_font
        
        # –î–∞–Ω–Ω—ã–µ
        total_users = db.query(User).count()
        week_ago = datetime.utcnow() - timedelta(days=7)
        month_ago = datetime.utcnow() - timedelta(days=30)
        
        active_week = db.query(User).filter(User.last_activity >= week_ago).count()
        active_month = db.query(User).filter(User.last_activity >= month_ago).count()
        new_week = db.query(User).filter(User.created_at >= week_ago).count()
        new_month = db.query(User).filter(User.created_at >= month_ago).count()
        
        total_payments = db.query(Payment).filter(Payment.status == 'succeeded').count()
        total_revenue = db.query(func.sum(Payment.amount)).filter(Payment.status == 'succeeded').scalar() or 0
        week_payments = db.query(Payment).filter(
            Payment.status == 'succeeded',
            Payment.created_at >= week_ago
        ).count()
        week_revenue = db.query(func.sum(Payment.amount)).filter(
            Payment.status == 'succeeded',
            Payment.created_at >= week_ago
        ).scalar() or 0
        month_payments = db.query(Payment).filter(
            Payment.status == 'succeeded',
            Payment.created_at >= month_ago
        ).count()
        month_revenue = db.query(func.sum(Payment.amount)).filter(
            Payment.status == 'succeeded',
            Payment.created_at >= month_ago
        ).scalar() or 0
        
        stats_data = [
            ('–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò', ''),
            ('–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', total_users),
            ('–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é', active_week),
            ('–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –º–µ—Å—è—Ü', active_month),
            ('–ù–æ–≤—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é', new_week),
            ('–ù–æ–≤—ã—Ö –∑–∞ –º–µ—Å—è—Ü', new_month),
            ('', ''),
            ('–§–ò–ù–ê–ù–°–´', ''),
            ('–í—Å–µ–≥–æ –ø–æ–∫—É–ø–æ–∫', total_payments),
            ('–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞, ‚ÇΩ', f'{total_revenue:,.2f}'),
            ('–ü–æ–∫—É–ø–æ–∫ –∑–∞ –Ω–µ–¥–µ–ª—é', week_payments),
            ('–í—ã—Ä—É—á–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é, ‚ÇΩ', f'{week_revenue:,.2f}'),
            ('–ü–æ–∫—É–ø–æ–∫ –∑–∞ –º–µ—Å—è—Ü', month_payments),
            ('–í—ã—Ä—É—á–∫–∞ –∑–∞ –º–µ—Å—è—Ü, ‚ÇΩ', f'{month_revenue:,.2f}'),
            ('', ''),
            ('–ö–û–ù–¢–ï–ù–¢', ''),
            ('–ö—É—Ä—Å–æ–≤', db.query(Course).count()),
            ('–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π', db.query(Consultation).count()),
            ('–£—Ä–æ–∫–æ–≤', db.query(Lesson).count()),
        ]
        
        row = 4
        for label, value in stats_data:
            ws_stats[f'A{row}'] = label
            ws_stats[f'B{row}'] = value
            if label and not value:
                ws_stats[f'A{row}'].font = Font(bold=True)
            row += 1
        
        # –ê–≤—Ç–æ—à–∏—Ä–∏–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫
        ws_stats.column_dimensions['A'].width = 30
        ws_stats.column_dimensions['B'].width = 20
        
        # –õ–∏—Å—Ç 2: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        ws_users = wb.create_sheet("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
        
        headers = ['ID', 'Telegram ID', 'Username', '–ò–º—è', '–§–∞–º–∏–ª–∏—è', '–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏', '–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å', '–ü–æ–∫—É–ø–æ–∫']
        for col, header in enumerate(headers, 1):
            cell = ws_users.cell(1, col, header)
            cell.fill = header_fill
            cell.font = header_font
            cell.alignment = Alignment(horizontal='center')
        
        users = db.query(User).order_by(User.created_at.desc()).all()
        
        for row, user in enumerate(users, 2):
            payments_count = db.query(Payment).filter(
                Payment.user_id == user.id,
                Payment.status == 'succeeded'
            ).count()
            
            ws_users.cell(row, 1, user.id)
            ws_users.cell(row, 2, user.telegram_id)
            ws_users.cell(row, 3, user.username or '-')
            ws_users.cell(row, 4, user.first_name or '-')
            ws_users.cell(row, 5, user.last_name or '-')
            ws_users.cell(row, 6, user.created_at.strftime('%d.%m.%Y %H:%M'))
            ws_users.cell(row, 7, user.last_activity.strftime('%d.%m.%Y %H:%M') if user.last_activity else '-')
            ws_users.cell(row, 8, payments_count)
        
        # –ê–≤—Ç–æ—à–∏—Ä–∏–Ω–∞
        for col in ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H']:
            ws_users.column_dimensions[col].width = 15
        
        # –õ–∏—Å—Ç 3: –ü–æ–∫—É–ø–∫–∏
        ws_payments = wb.create_sheet("–ü–æ–∫—É–ø–∫–∏")
        
        headers = ['ID', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', '–ü—Ä–æ–¥—É–∫—Ç', '–°—É–º–º–∞, ‚ÇΩ', '–°—Ç–∞—Ç—É—Å', '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è', '–î–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã']
        for col, header in enumerate(headers, 1):
            cell = ws_payments.cell(1, col, header)
            cell.fill = header_fill
            cell.font = header_font
            cell.alignment = Alignment(horizontal='center')
        
        payments = db.query(Payment).order_by(Payment.created_at.desc()).all()
        
        for row, payment in enumerate(payments, 2):
            user = payment.user
            username = user.username if user.username else f"{user.first_name or '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}"
            
            product_name = '-'
            if payment.course_id:
                course = db.query(Course).filter(Course.id == payment.course_id).first()
                product_name = f"–ö—É—Ä—Å: {course.name}" if course else "–ö—É—Ä—Å"
            elif payment.consultation_id:
                consultation = db.query(Consultation).filter(Consultation.id == payment.consultation_id).first()
                product_name = f"–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è: {consultation.name}" if consultation else "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è"
            
            ws_payments.cell(row, 1, payment.id)
            ws_payments.cell(row, 2, username)
            ws_payments.cell(row, 3, product_name)
            ws_payments.cell(row, 4, payment.amount)
            ws_payments.cell(row, 5, payment.status)
            ws_payments.cell(row, 6, payment.created_at.strftime('%d.%m.%Y %H:%M'))
            ws_payments.cell(row, 7, payment.paid_at.strftime('%d.%m.%Y %H:%M') if payment.paid_at else '-')
        
        # –ê–≤—Ç–æ—à–∏—Ä–∏–Ω–∞
        for col, width in zip(['A', 'B', 'C', 'D', 'E', 'F', 'G'], [8, 20, 30, 12, 12, 18, 18]):
            ws_payments.column_dimensions[col].width = width
        
        # –õ–∏—Å—Ç 4: –ö—É—Ä—Å—ã –∏ –∏—Ö –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å
        ws_courses = wb.create_sheet("–ö—É—Ä—Å—ã")
        
        headers = ['ID', '–ù–∞–∑–≤–∞–Ω–∏–µ', '–£—Ä–æ–∫–æ–≤', '–¢–∞—Ä–∏—Ñ–æ–≤', '–ü—Ä–æ–¥–∞–∂', '–í—ã—Ä—É—á–∫–∞, ‚ÇΩ', '–ê–∫—Ç–∏–≤–µ–Ω']
        for col, header in enumerate(headers, 1):
            cell = ws_courses.cell(1, col, header)
            cell.fill = header_fill
            cell.font = header_font
            cell.alignment = Alignment(horizontal='center')
        
        courses = db.query(Course).all()
        
        for row, course in enumerate(courses, 2):
            lessons_count = db.query(Lesson).filter(Lesson.course_id == course.id).count()
            tariffs_count = len(course.tariffs)
            
            sales_count = db.query(Payment).filter(
                Payment.course_id == course.id,
                Payment.status == 'succeeded'
            ).count()
            
            revenue = db.query(func.sum(Payment.amount)).filter(
                Payment.course_id == course.id,
                Payment.status == 'succeeded'
            ).scalar() or 0
            
            ws_courses.cell(row, 1, course.id)
            ws_courses.cell(row, 2, course.name)
            ws_courses.cell(row, 3, lessons_count)
            ws_courses.cell(row, 4, tariffs_count)
            ws_courses.cell(row, 5, sales_count)
            ws_courses.cell(row, 6, revenue)
            ws_courses.cell(row, 7, '–î–∞' if course.is_active else '–ù–µ—Ç')
        
        for col, width in zip(['A', 'B', 'C', 'D', 'E', 'F', 'G'], [8, 30, 10, 10, 10, 15, 10]):
            ws_courses.column_dimensions[col].width = width
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±—É—Ñ–µ—Ä
        buffer = BytesIO()
        wb.save(buffer)
        buffer.seek(0)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å –¥–∞—Ç–æ–π
        filename = f"analytics_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ
        temp_path = f"/tmp/{filename}"
        with open(temp_path, 'wb') as f:
            f.write(buffer.getvalue())
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        await callback.message.answer_document(
            document=FSInputFile(temp_path, filename=filename),
            caption="üìä <b>–î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞</b>\n\n"
                   "–§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç:\n"
                   "‚Ä¢ –û–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
                   "‚Ä¢ –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
                   "‚Ä¢ –í—Å–µ –ø–æ–∫—É–ø–∫–∏\n"
                   "‚Ä¢ –ê–Ω–∞–ª–∏—Ç–∏–∫—É –ø–æ –∫—É—Ä—Å–∞–º"
        )
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.remove(temp_path)
        
        await callback.answer("‚úÖ –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
    
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}", show_alert=True)
    
    finally:
        db.close()


@router.callback_query(F.data == "admin_consultations")
async def show_consultations_management(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è–º–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    db: Session = get_db()
    
    try:
        consultations = db.query(Consultation).order_by(Consultation.order).all()
        
        if not consultations:
            await callback.message.edit_text(
                "üîÆ <b>–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç</b>\n\n"
                "–°–æ–∑–¥–∞–π—Ç–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ utils/admin.py",
                reply_markup=get_back_to_admin_keyboard()
            )
        else:
            buttons = []
            for cons in consultations:
                status_emoji = "‚úÖ" if cons.is_active else "‚ùå"
                price_text = f"{cons.price:,.0f} ‚ÇΩ" if cons.price else "–í–∞—Ä–∏–∞–Ω—Ç—ã"
                buttons.append([InlineKeyboardButton(
                    text=f"{cons.emoji} {cons.name} ({price_text}) {status_emoji}",
                    callback_data=f"manage_consultation_{cons.id}"
                )])
            
            buttons.append([InlineKeyboardButton(
                text="‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é",
                callback_data="create_consultation"
            )])
            buttons.append([InlineKeyboardButton(
                text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å",
                callback_data="admin_panel"
            )])
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
            
            await callback.message.edit_text(
                "üîÆ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è–º–∏</b>\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é:",
                reply_markup=keyboard
            )
    
    finally:
        db.close()
    
    await callback.answer()


@router.callback_query(F.data.startswith("manage_consultation_"))
async def manage_consultation(callback: CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–µ–π"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    cons_id = int(callback.data.split("_")[2])
    db: Session = get_db()
    
    try:
        cons = db.query(Consultation).filter(Consultation.id == cons_id).first()
        
        if not cons:
            await callback.answer("–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        text = f"üîÆ <b>{cons.name}</b>\n\n"
        text += f"üìç Slug: <code>{cons.slug}</code>\n"
        text += f"üí∞ –¶–µ–Ω–∞: {cons.price:,.0f} ‚ÇΩ\n" if cons.price else "üí∞ –¶–µ–Ω–∞: –≤–∞—Ä–∏–∞–Ω—Ç—ã\n"
        text += f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {cons.duration}\n" if cons.duration else ""
        text += f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {cons.category}\n"
        text += f"üîÑ –ü–æ—Ä—è–¥–æ–∫: {cons.order}\n"
        text += f"‚úÖ –ê–∫—Ç–∏–≤–Ω–∞: {'–î–∞' if cons.is_active else '–ù–µ—Ç'}\n"
        
        if cons.options:
            text += f"\nüìã –í–∞—Ä–∏–∞–Ω—Ç–æ–≤: {len(cons.options)}\n"
            for opt in cons.options:
                text += f"  ‚Ä¢ {opt.name}: {opt.price:,.0f} ‚ÇΩ\n"
        
        buttons = [
            [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"edit_cons_name_{cons_id}")],
            [InlineKeyboardButton(text="üí∞ –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É", callback_data=f"edit_cons_price_{cons_id}")],
            [InlineKeyboardButton(text="‚è± –ò–∑–º–µ–Ω–∏—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", callback_data=f"edit_cons_duration_{cons_id}")],
            [InlineKeyboardButton(text="üìù –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"edit_cons_desc_{cons_id}")],
            [InlineKeyboardButton(
                text=f"{'‚ùå –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å' if cons.is_active else '‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å'}",
                callback_data=f"toggle_cons_{cons_id}"
            )],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è–º", callback_data="admin_consultations")]
        ]
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        
        await callback.message.edit_text(text, reply_markup=keyboard)
    
    finally:
        db.close()
    
    await callback.answer()


@router.callback_query(F.data.startswith("toggle_cons_"))
async def toggle_consultation(callback: CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    cons_id = int(callback.data.split("_")[2])
    db: Session = get_db()
    
    try:
        cons = db.query(Consultation).filter(Consultation.id == cons_id).first()
        cons.is_active = not cons.is_active
        db.commit()
        
        await callback.answer(f"‚úÖ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è {'–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞' if cons.is_active else '–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞'}!")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await manage_consultation(callback)
    
    finally:
        db.close()


@router.callback_query(F.data.startswith("edit_cons_name_"))
async def edit_consultation_name_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    cons_id = int(callback.data.split("_")[3])
    await state.update_data(editing_cons_id=cons_id)
    
    db: Session = get_db()
    try:
        cons = db.query(Consultation).filter(Consultation.id == cons_id).first()
        
        cancel_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"manage_consultation_{cons_id}")]
        ])
        
        await callback.message.edit_text(
            f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏</b>\n\n"
            f"–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: <b>{cons.name}</b>\n\n"
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:",
            reply_markup=cancel_keyboard
        )
        
        await state.set_state(ConsultationManagement.editing_name)
    
    finally:
        db.close()
    
    await callback.answer()


@router.message(ConsultationManagement.editing_name)
async def edit_consultation_name_save(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏"""
    if not is_admin(message.from_user.id):
        return
    
    data = await state.get_data()
    cons_id = data['editing_cons_id']
    
    db: Session = get_db()
    try:
        cons = db.query(Consultation).filter(Consultation.id == cons_id).first()
        cons.name = message.text.strip()
        db.commit()
        
        back_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏", callback_data=f"manage_consultation_{cons_id}")]
        ])
        
        await message.answer(
            f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!\n\n"
            f"–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: <b>{cons.name}</b>",
            reply_markup=back_keyboard
        )
    
    finally:
        db.close()
        await state.clear()


@router.callback_query(F.data.startswith("edit_cons_price_"))
async def edit_consultation_price_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–Ω—ã –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    cons_id = int(callback.data.split("_")[3])
    await state.update_data(editing_cons_id=cons_id)
    
    db: Session = get_db()
    try:
        cons = db.query(Consultation).filter(Consultation.id == cons_id).first()
        
        cancel_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"manage_consultation_{cons_id}")]
        ])
        
        current_price = f"{cons.price:,.0f} ‚ÇΩ" if cons.price else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
        
        await callback.message.edit_text(
            f"üí∞ <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏</b>\n\n"
            f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price}\n\n"
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):",
            reply_markup=cancel_keyboard
        )
        
        await state.set_state(ConsultationManagement.editing_price)
    
    finally:
        db.close()
    
    await callback.answer()


@router.message(ConsultationManagement.editing_price)
async def edit_consultation_price_save(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Ü–µ–Ω—ã –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏"""
    if not is_admin(message.from_user.id):
        return
    
    data = await state.get_data()
    cons_id = data['editing_cons_id']
    
    try:
        new_price = float(message.text.strip().replace(',', '.'))
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15000 –∏–ª–∏ 15000.50)")
        return
    
    db: Session = get_db()
    try:
        cons = db.query(Consultation).filter(Consultation.id == cons_id).first()
        cons.price = new_price
        db.commit()
        
        back_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏", callback_data=f"manage_consultation_{cons_id}")]
        ])
        
        await message.answer(
            f"‚úÖ –¶–µ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n\n"
            f"–ù–æ–≤–∞—è —Ü–µ–Ω–∞: {new_price:,.0f} ‚ÇΩ",
            reply_markup=back_keyboard
        )
    
    finally:
        db.close()
        await state.clear()


# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–∞–π–¥–∞–º–∏ –≤—ã–Ω–µ—Å–µ–Ω–æ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –º–æ–¥—É–ª—å handlers/admin_guides.py


@router.callback_query(F.data == "create_course")
async def create_course_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫—É—Ä—Å–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    cancel_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_courses")]
    ])
    
    await callback.message.edit_text(
        "‚ûï <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫—É—Ä—Å–∞</b>\n\n"
        "–®–∞–≥ 1/4: –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞:",
        reply_markup=cancel_keyboard
    )
    
    await state.set_state(CourseCreation.waiting_for_name)
    await callback.answer()


@router.message(CourseCreation.waiting_for_name)
async def create_course_name(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫—É—Ä—Å–∞"""
    if not is_admin(message.from_user.id):
        return
    
    await state.update_data(course_name=message.text.strip())
    
    cancel_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_courses")]
    ])
    
    await message.answer(
        f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ: <b>{message.text.strip()}</b>\n\n"
        f"–®–∞–≥ 2/4: –í–≤–µ–¥–∏—Ç–µ slug –∫—É—Ä—Å–∞ (–¥–ª—è URL, –Ω–∞–ø—Ä–∏–º–µ—Ä: astro-basics):",
        reply_markup=cancel_keyboard
    )
    
    await state.set_state(CourseCreation.waiting_for_slug)


@router.message(CourseCreation.waiting_for_slug)
async def create_course_slug(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ slug –∫—É—Ä—Å–∞"""
    if not is_admin(message.from_user.id):
        return
    
    slug = message.text.strip().lower().replace(' ', '-')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å slug
    db: Session = get_db()
    try:
        existing = db.query(Course).filter(Course.slug == slug).first()
        if existing:
            await message.answer("‚ùå –ö—É—Ä—Å —Å —Ç–∞–∫–∏–º slug —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π slug:")
            return
    finally:
        db.close()
    
    await state.update_data(course_slug=slug)
    
    cancel_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_courses")]
    ])
    
    await message.answer(
        f"‚úÖ Slug: <code>{slug}</code>\n\n"
        f"–®–∞–≥ 3/4: –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫—É—Ä—Å–∞:",
        reply_markup=cancel_keyboard
    )
    
    await state.set_state(CourseCreation.waiting_for_description)


@router.message(CourseCreation.waiting_for_description)
async def create_course_description(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –∫—É—Ä—Å–∞"""
    if not is_admin(message.from_user.id):
        return
    
    await state.update_data(course_description=message.text.strip())
    
    cancel_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_courses")]
    ])
    
    await message.answer(
        f"‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ\n\n"
        f"–®–∞–≥ 4/4: –í–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫—É—Ä—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 3 –º–µ—Å—è—Ü–∞):",
        reply_markup=cancel_keyboard
    )
    
    await state.set_state(CourseCreation.waiting_for_duration)


@router.message(CourseCreation.waiting_for_duration)
async def create_course_save(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫—É—Ä—Å–∞"""
    if not is_admin(message.from_user.id):
        return
    
    data = await state.get_data()
    
    db: Session = get_db()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π order
        max_order = db.query(func.max(Course.order)).scalar() or 0
        
        new_course = Course(
            name=data['course_name'],
            slug=data['course_slug'],
            description=data['course_description'],
            short_description=data['course_description'][:200],  # –ü–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤
            duration=message.text.strip(),
            is_active=True,
            order=max_order + 1
        )
        
        db.add(new_course)
        db.commit()
        db.refresh(new_course)
        
        back_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—Ä–æ–∫", callback_data=f"add_lesson_{new_course.id}")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ö —Å–ø–∏—Å–∫—É –∫—É—Ä—Å–æ–≤", callback_data="admin_courses")]
        ])
        
        await message.answer(
            f"‚úÖ <b>–ö—É—Ä—Å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!</b>\n\n"
            f"üìñ {new_course.name}\n"
            f"üîó Slug: <code>{new_course.slug}</code>\n"
            f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {new_course.duration}\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —É—Ä–æ–∫–∏ –≤ –∫—É—Ä—Å.",
            reply_markup=back_keyboard
        )
    
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫—É—Ä—Å–∞: {str(e)}")
    
    finally:
        db.close()
        await state.clear()


@router.callback_query(F.data == "create_consultation")
async def create_consultation_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    cancel_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_consultations")]
    ])
    
    await callback.message.edit_text(
        "‚ûï <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏</b>\n\n"
        "–®–∞–≥ 1/6: –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:",
        reply_markup=cancel_keyboard
    )
    
    await state.set_state(ConsultationManagement.creating_name)
    await callback.answer()


@router.message(ConsultationManagement.creating_name)
async def create_consultation_name(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏"""
    if not is_admin(message.from_user.id):
        return
    
    await state.update_data(cons_name=message.text.strip())
    
    cancel_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_consultations")]
    ])
    
    await message.answer(
        f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ: <b>{message.text.strip()}</b>\n\n"
        f"–®–∞–≥ 2/6: –í–≤–µ–¥–∏—Ç–µ slug (–¥–ª—è URL, –Ω–∞–ø—Ä–∏–º–µ—Ä: natal-chart):",
        reply_markup=cancel_keyboard
    )
    
    await state.set_state(ConsultationManagement.creating_slug)


@router.message(ConsultationManagement.creating_slug)
async def create_consultation_slug(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ slug –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏"""
    if not is_admin(message.from_user.id):
        return
    
    slug = message.text.strip().lower().replace(' ', '-')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
    db: Session = get_db()
    try:
        existing = db.query(Consultation).filter(Consultation.slug == slug).first()
        if existing:
            await message.answer("‚ùå –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å —Ç–∞–∫–∏–º slug —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π:")
            return
    finally:
        db.close()
    
    await state.update_data(cons_slug=slug)
    
    cancel_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_consultations")]
    ])
    
    await message.answer(
        f"‚úÖ Slug: <code>{slug}</code>\n\n"
        f"–®–∞–≥ 3/6: –í–≤–µ–¥–∏—Ç–µ —ç–º–æ–¥–∑–∏ (–æ–¥–∏–Ω —Å–∏–º–≤–æ–ª, –Ω–∞–ø—Ä–∏–º–µ—Ä: üåü):",
        reply_markup=cancel_keyboard
    )
    
    await state.set_state(ConsultationManagement.creating_emoji)


@router.message(ConsultationManagement.creating_emoji)
async def create_consultation_emoji(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏"""
    if not is_admin(message.from_user.id):
        return
    
    await state.update_data(cons_emoji=message.text.strip())
    
    cancel_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_consultations")]
    ])
    
    await message.answer(
        f"‚úÖ –≠–º–æ–¥–∑–∏: {message.text.strip()}\n\n"
        f"–®–∞–≥ 4/6: –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 15000):",
        reply_markup=cancel_keyboard
    )
    
    await state.set_state(ConsultationManagement.creating_price)


@router.message(ConsultationManagement.creating_price)
async def create_consultation_price(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏"""
    if not is_admin(message.from_user.id):
        return
    
    try:
        price = float(message.text.strip().replace(',', '.'))
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
        return
    
    await state.update_data(cons_price=price)
    
    cancel_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_consultations")]
    ])
    
    await message.answer(
        f"‚úÖ –¶–µ–Ω–∞: {price:,.0f} ‚ÇΩ\n\n"
        f"–®–∞–≥ 5/6: –í–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä: 90 –º–∏–Ω—É—Ç):",
        reply_markup=cancel_keyboard
    )
    
    await state.set_state(ConsultationManagement.creating_duration)


@router.message(ConsultationManagement.creating_duration)
async def create_consultation_duration(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏"""
    if not is_admin(message.from_user.id):
        return
    
    await state.update_data(cons_duration=message.text.strip())
    
    cancel_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_consultations")]
    ])
    
    await message.answer(
        f"‚úÖ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {message.text.strip()}\n\n"
        f"–®–∞–≥ 6/6: –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:",
        reply_markup=cancel_keyboard
    )
    
    await state.set_state(ConsultationManagement.creating_description)


@router.message(ConsultationManagement.creating_description)
async def create_consultation_save(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏"""
    if not is_admin(message.from_user.id):
        return
    
    data = await state.get_data()
    
    db: Session = get_db()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π order
        max_order = db.query(func.max(Consultation.order)).scalar() or 0
        
        new_cons = Consultation(
            name=data['cons_name'],
            slug=data['cons_slug'],
            emoji=data['cons_emoji'],
            description=message.text.strip(),
            short_description=message.text.strip()[:200],
            price=data['cons_price'],
            duration=data['cons_duration'],
            is_active=True,
            order=max_order + 1,
            category='consultation'
        )
        
        db.add(new_cons)
        db.commit()
        db.refresh(new_cons)
        
        back_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"manage_consultation_{new_cons.id}")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ö —Å–ø–∏—Å–∫—É –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π", callback_data="admin_consultations")]
        ])
        
        await message.answer(
            f"‚úÖ <b>–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n"
            f"{new_cons.emoji} {new_cons.name}\n"
            f"üí∞ {new_cons.price:,.0f} ‚ÇΩ\n"
            f"‚è± {new_cons.duration}\n"
            f"üîó Slug: <code>{new_cons.slug}</code>",
            reply_markup=back_keyboard
        )
    
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏: {str(e)}")
    
    finally:
        db.close()
        await state.clear()

