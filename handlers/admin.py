from datetime import datetime, timedelta
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, FSInputFile
from sqlalchemy.orm import Session
from sqlalchemy import func
from io import BytesIO
from openpyxl import Workbook
from openpyxl.styles import Font, PatternFill, Alignment

from config import config
from database import get_db, User, Payment
from data import get_all_courses, get_all_consultations, get_all_guides
from keyboards import get_admin_keyboard, get_back_to_admin_keyboard

router = Router()


def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return user_id == config.ADMIN_ID


@router.message(Command("admin"))
async def cmd_admin(message: Message):
    """–í—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –ø–æ –∫–æ–º–∞–Ω–¥–µ /admin"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
        return
    
    await message.answer(
        "üîê <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_keyboard()
    )


@router.callback_query(F.data == "admin_panel")
async def show_admin_panel(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    await callback.message.edit_text(
        "üîê <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data == "admin_stats")
async def show_stats(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è JSON)"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    db: Session = get_db()
    
    try:
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑ –ë–î
        total_users = db.query(User).count()
        active_users = db.query(User).filter(
            User.last_activity >= datetime.utcnow() - timedelta(days=30)
        ).count()
        total_payments = db.query(Payment).filter(Payment.status == 'succeeded').count()
        total_revenue = db.query(Payment).filter(Payment.status == 'succeeded').with_entities(
            func.sum(Payment.amount)
        ).scalar() or 0
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑ JSON
        courses = get_all_courses()
        consultations = get_all_consultations()
        guides = get_all_guides()
        
        # –ü–ª–∞—Ç–µ–∂–∏ –ø–æ —Ç–∏–ø–∞–º
        course_payments = db.query(Payment).filter(
            Payment.status == 'succeeded',
            Payment.product_type == 'course'
        ).count()
        consultation_payments = db.query(Payment).filter(
            Payment.status == 'succeeded',
            Payment.product_type == 'consultation'
        ).count()
        guide_payments = db.query(Payment).filter(
            Payment.status == 'succeeded',
            Payment.product_type == 'guide'
        ).count()
        
        text = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
        
        text += "üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n"
        text += f"  ‚Ä¢ –í—Å–µ–≥–æ: {total_users}\n"
        text += f"  ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö (30 –¥–Ω–µ–π): {active_users}\n\n"
        
        text += "üí∞ <b>–ü–ª–∞—Ç–µ–∂–∏:</b>\n"
        text += f"  ‚Ä¢ –í—Å–µ–≥–æ —É—Å–ø–µ—à–Ω—ã—Ö: {total_payments}\n"
        text += f"  ‚Ä¢ –ö—É—Ä—Å—ã: {course_payments}\n"
        text += f"  ‚Ä¢ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏: {consultation_payments}\n"
        text += f"  ‚Ä¢ –ì–∞–π–¥—ã: {guide_payments}\n"
        text += f"  ‚Ä¢ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: {total_revenue:,.0f} ‚ÇΩ\n\n"
        
        text += "üìö <b>–ö–æ–Ω—Ç–µ–Ω—Ç (JSON):</b>\n"
        text += f"  ‚Ä¢ –ö—É—Ä—Å–æ–≤: {len(courses)}\n"
        text += f"  ‚Ä¢ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π: {len(consultations)}\n"
        text += f"  ‚Ä¢ –ì–∞–π–¥–æ–≤: {len(guides)}\n"
        
        await callback.message.edit_text(
            text,
            reply_markup=get_back_to_admin_keyboard()
        )
        await callback.answer()
    
    finally:
        db.close()


@router.callback_query(F.data == "admin_export_users")
async def export_users(callback: CallbackQuery):
    """–≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ Excel"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    await callback.answer("‚è≥ –°–æ–∑–¥–∞—é —Ñ–∞–π–ª...", show_alert=True)
    
    db: Session = get_db()
    
    try:
        users = db.query(User).order_by(User.created_at.desc()).all()
        
        # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª
        wb = Workbook()
        ws = wb.active
        ws.title = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        headers = ['ID', 'Telegram ID', 'Username', '–ò–º—è', '–§–∞–º–∏–ª–∏—è', '–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏', '–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å']
        ws.append(headers)
        
        # –°—Ç–∏–ª—å –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        header_font = Font(bold=True, color="FFFFFF")
        header_fill = PatternFill(start_color="4472C4", end_color="4472C4", fill_type="solid")
        for col in range(1, len(headers) + 1):
            cell = ws.cell(row=1, column=col)
            cell.font = header_font
            cell.fill = header_fill
            cell.alignment = Alignment(horizontal='center')
        
        # –î–∞–Ω–Ω—ã–µ
        for user in users:
            ws.append([
                user.id,
                user.telegram_id,
                user.username or '-',
                user.first_name or '-',
                user.last_name or '-',
                user.created_at.strftime('%d.%m.%Y %H:%M') if user.created_at else '-',
                user.last_activity.strftime('%d.%m.%Y %H:%M') if user.last_activity else '-'
            ])
        
        # –ê–≤—Ç–æ—à–∏—Ä–∏–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫
        for column in ws.columns:
            max_length = 0
            column_letter = column[0].column_letter
            for cell in column:
                try:
                    if len(str(cell.value)) > max_length:
                        max_length = len(str(cell.value))
                except:
                    pass
            adjusted_width = min(max_length + 2, 50)
            ws.column_dimensions[column_letter].width = adjusted_width
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ BytesIO
        excel_file = BytesIO()
        wb.save(excel_file)
        excel_file.seek(0)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        filename = f"users_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
        
        await callback.message.answer_document(
            document=FSInputFile(path=excel_file, filename=filename),
            caption=f"üìä –≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}"
        )
        
        await callback.answer("‚úÖ –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
    
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)
    
    finally:
        db.close()


@router.callback_query(F.data == "admin_courses")
async def manage_courses_placeholder(callback: CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞–º–∏ (—Ç–µ–ø–µ—Ä—å —á–µ—Ä–µ–∑ JSON)"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    courses = get_all_courses()
    
    text = "üìö <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞–º–∏</b>\n\n"
    text += f"–í—Å–µ–≥–æ –∫—É—Ä—Å–æ–≤: {len(courses)}\n\n"
    
    for course in courses:
        emoji = course.get('emoji', 'üìö')
        status = "‚úÖ" if course.get('is_active', True) else "‚ùå"
        text += f"{status} {emoji} {course['name']}\n"
    
    text += "\nüí° <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—É—Ä—Å–æ–≤:</b>\n"
    text += "–ö—É—Ä—Å—ã —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ <code>data/courses.json</code>\n\n"
    text += "–î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n"
    text += "1. –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª –ª–æ–∫–∞–ª—å–Ω–æ\n"
    text += "2. –í–Ω–µ—Å–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è\n"
    text += "3. –ó–∞–∫–æ–º–º–∏—Ç—å—Ç–µ: <code>git commit -am \"Update courses\"</code>\n"
    text += "4. –ó–∞–¥–µ–ø–ª–æ–π—Ç–µ: <code>git push amvera main:master</code>"
    
    await callback.message.edit_text(
        text,
        reply_markup=get_back_to_admin_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data == "admin_consultations")
async def manage_consultations_placeholder(callback: CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è–º–∏ (—Ç–µ–ø–µ—Ä—å —á–µ—Ä–µ–∑ JSON)"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    consultations = get_all_consultations()
    
    text = "üîÆ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è–º–∏</b>\n\n"
    text += f"–í—Å–µ–≥–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π: {len(consultations)}\n\n"
    
    for consultation in consultations[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
        emoji = consultation.get('emoji', 'üîÆ')
        status = "‚úÖ" if consultation.get('is_active', True) else "‚ùå"
        text += f"{status} {emoji} {consultation['name']}\n"
    
    if len(consultations) > 5:
        text += f"\n... –∏ –µ—â–µ {len(consultations) - 5}\n"
    
    text += "\nüí° <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π:</b>\n"
    text += "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ <code>data/consultations.json</code>\n\n"
    text += "–î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n"
    text += "1. –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª –ª–æ–∫–∞–ª—å–Ω–æ\n"
    text += "2. –í–Ω–µ—Å–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è\n"
    text += "3. –ó–∞–∫–æ–º–º–∏—Ç—å—Ç–µ: <code>git commit -am \"Update consultations\"</code>\n"
    text += "4. –ó–∞–¥–µ–ø–ª–æ–π—Ç–µ: <code>git push amvera main:master</code>"
    
    await callback.message.edit_text(
        text,
        reply_markup=get_back_to_admin_keyboard()
    )
    await callback.answer()
