"""
–•—ç–Ω–¥–ª–µ—Ä—ã –¥–ª—è —É—á–µ–±–Ω–æ–≥–æ –±–æ—Ç–∞ - –¥–æ—Å—Ç—É–ø –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –∫—É—Ä—Å–æ–≤
"""
import logging
from datetime import datetime, timedelta
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton

from database import get_db, UserRepository, PaymentRepository
from data import (
    get_course_by_slug,
    get_course_modules,
    get_module_by_id,
    get_lesson_by_id,
    get_mini_course
)

logger = logging.getLogger(__name__)
learning_router = Router()


@learning_router.message(Command("start"))
async def cmd_start(message: Message):
    """–°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—á–µ–±–Ω–æ–≥–æ –±–æ—Ç–∞"""
    db = await get_db()
    user_repo = UserRepository(db)
    payment_repo = PaymentRepository(db)
    
    # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await user_repo.get_by_telegram_id(message.from_user.id)
    
    if not user:
        from database import User
        user = User(
            telegram_id=message.from_user.id,
            username=message.from_user.username,
            first_name=message.from_user.first_name,
            last_name=message.from_user.last_name
        )
        user = await user_repo.create(user)
        logger.info(f"New user created in learning bot: {user.telegram_id}")
    else:
        await user_repo.update_activity(message.from_user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ø–ª–µ–Ω–Ω—ã–µ –∫—É—Ä—Å—ã
    payments = await payment_repo.get_user_payments(user.id)
    purchased_courses = [p for p in payments if p.status == 'succeeded' and p.product_type in ['course', 'mini_course']]
    
    if not purchased_courses:
        text = "üéì <b>–£—á–µ–±–Ω—ã–π –±–æ—Ç</b>\n\n"
        text += "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—É—Ä—Å–æ–≤ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è.\n\n"
        text += "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫—É—Ä—Å–∞–º, –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –∏—Ö –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –±–æ—Ç–µ."
        
        await message.answer(text)
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—É—Ä—Å–æ–≤
    text = "üéì <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —É—á–µ–±–Ω—ã–π –±–æ—Ç!</b>\n\n"
    text += "üìö –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∏–∑—É—á–∞—Ç—å –∫—É–ø–ª–µ–Ω–Ω—ã–µ –∫—É—Ä—Å—ã –∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã.\n\n"
    text += f"<b>–î–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—É—Ä—Å–æ–≤:</b> {len(purchased_courses)}\n\n"
    text += "–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—É—á–µ–Ω–∏—è:"
    
    buttons = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫—É–ø–ª–µ–Ω–Ω–æ–≥–æ –∫—É—Ä—Å–∞
    for payment in purchased_courses:
        if payment.course_slug == "mini_course":
            mini_course = get_mini_course()
            if mini_course:
                course_name = mini_course.get('title', '–ú–∏–Ω–∏-–∫—É—Ä—Å')
                emoji = mini_course.get('emoji', 'üåå')
                buttons.append([InlineKeyboardButton(
                    text=f"{emoji} {course_name}",
                    callback_data=f"my_course_{payment.course_slug}"
                )])
        else:
            course = get_course_by_slug(payment.course_slug)
            if course:
                course_name = course.get('name', payment.course_slug)
                emoji = course.get('emoji', 'üìö')
                buttons.append([InlineKeyboardButton(
                    text=f"{emoji} {course_name}",
                    callback_data=f"my_course_{payment.course_slug}"
                )])
    
    # –ö–Ω–æ–ø–∫–∞ "–ú–æ–∏ –∫—É—Ä—Å—ã" (–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é)
    buttons.append([InlineKeyboardButton(text="üìö –ú–æ–∏ –∫—É—Ä—Å—ã", callback_data="my_courses")])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    await message.answer(text, reply_markup=keyboard)


@learning_router.callback_query(F.data == "my_courses")
async def show_my_courses(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –∫—É—Ä—Å–æ–≤"""
    db = await get_db()
    user_repo = UserRepository(db)
    payment_repo = PaymentRepository(db)
    
    try:
        user = await user_repo.get_by_telegram_id(callback.from_user.id)
        if user:
            await user_repo.update_activity(callback.from_user.id)
        
        if not user:
            await callback.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∫—É–ø–ª–µ–Ω–Ω—ã–µ –∫—É—Ä—Å—ã
        payments = await payment_repo.get_user_payments(user.id)
        purchased_courses = [p for p in payments if p.status == 'succeeded' and p.product_type in ['course', 'mini_course']]
        
        if not purchased_courses:
            text = "üìö –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –∫—É—Ä—Å–æ–≤.\n\n"
            text += "–ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –∫—É—Ä—Å—ã –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –±–æ—Ç–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—É—á–µ–Ω–∏—è."
            
            await callback.message.edit_text(text)
            await callback.answer()
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∫—É—Ä—Å–æ–≤
        text = "üìö <b>–ú–æ–∏ –∫—É—Ä—Å—ã</b>\n\n"
        text += f"–í—Å–µ–≥–æ –∫—É—Ä—Å–æ–≤: {len(purchased_courses)}\n\n"
        
        buttons = []
        
        for payment in purchased_courses:
            if payment.course_slug == "mini_course":
                mini_course = get_mini_course()
                if mini_course:
                    course_name = mini_course.get('title', '–ú–∏–Ω–∏-–∫—É—Ä—Å')
                    emoji = mini_course.get('emoji', 'üåå')
                    
                    paid_date = payment.paid_at.strftime('%d.%m.%Y') if payment.paid_at else "–Ω–µ–¥–∞–≤–Ω–æ"
                    text += f"{emoji} <b>{course_name}</b>\n"
                    text += f"–î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏: {paid_date}\n\n"
                    
                    buttons.append([InlineKeyboardButton(
                        text=f"{emoji} {course_name}",
                        callback_data=f"my_course_{payment.course_slug}"
                    )])
            else:
                course = get_course_by_slug(payment.course_slug)
                if course:
                    course_name = course.get('name', payment.course_slug)
                    emoji = course.get('emoji', 'üìö')
                    
                    paid_date = payment.paid_at.strftime('%d.%m.%Y') if payment.paid_at else "–Ω–µ–¥–∞–≤–Ω–æ"
                    text += f"{emoji} <b>{course_name}</b>\n"
                    text += f"–î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏: {paid_date}\n\n"
                    
                    buttons.append([InlineKeyboardButton(
                        text=f"{emoji} {course_name}",
                        callback_data=f"my_course_{payment.course_slug}"
                    )])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        
        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer()
    
    except Exception as e:
        logger.error(f"Error in show_my_courses: {e}", exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@learning_router.callback_query(F.data.startswith("my_course_"))
async def show_my_course(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫—É–ø–ª–µ–Ω–Ω—ã–π –∫—É—Ä—Å —Å –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏"""
    course_slug = callback.data.replace("my_course_", "")
    
    db = await get_db()
    user_repo = UserRepository(db)
    payment_repo = PaymentRepository(db)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫—É–ø–∏–ª —ç—Ç–æ—Ç –∫—É—Ä—Å
        user = await user_repo.get_by_telegram_id(callback.from_user.id)
        
        if not user:
            await callback.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –∑–∞ –∫—É—Ä—Å
        payments = await payment_repo.get_user_payments(user.id)
        payment = next((p for p in payments if p.course_slug == course_slug and p.status == 'succeeded' and p.product_type in ['course', 'mini_course']), None)
        
        if not payment:
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∫—É—Ä—Å—É", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É—Ä—Å–µ
        if course_slug == "mini_course":
            mini_course = get_mini_course()
            
            if not mini_course:
                await callback.answer("–ú–∏–Ω–∏-–∫—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏ –º–∏–Ω–∏-–∫—É—Ä—Å–∞
            emoji = mini_course.get('emoji', 'üåå')
            text = f"{emoji} <b>{mini_course.get('title', '–ú–∏–Ω–∏-–∫—É—Ä—Å')}</b>\n\n"
            
            subtitle = mini_course.get('subtitle', '')
            if subtitle:
                text += f"<i>{subtitle}</i>\n\n"
            
            if payment.paid_at:
                paid_date = payment.paid_at.strftime('%d.%m.%Y')
                text += f"üí≥ <b>–î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏:</b> {paid_date}\n"
            
            text += "\n‚úÖ <b>–£ –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º –º–∏–Ω–∏-–∫—É—Ä—Å–∞</b>\n\n"
            
            modules = mini_course.get('modules', [])
            
            if modules:
                # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–Ω—ã—Ö —Å—É—Ç–æ–∫ —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ–∫—É–ø–∫–∏
                if payment.paid_at:
                    time_since_purchase = datetime.utcnow() - payment.paid_at
                    days_passed = int(time_since_purchase.total_seconds() / 86400)
                else:
                    days_passed = 0
                
                text += "üìö <b>–ú–æ–¥—É–ª–∏ –∫—É—Ä—Å–∞:</b>\n\n"
                
                buttons = []
                
                for module in modules:
                    day_number = module.get('day_number', 999)
                    module_title = module.get('title', '–ú–æ–¥—É–ª—å')
                    module_emoji = module.get('emoji', 'üìñ')
                    
                    is_available = days_passed >= (day_number - 1)
                    
                    if is_available:
                        text += f"‚úÖ {module_emoji} {module_title}\n"
                        buttons.append([InlineKeyboardButton(
                            text=f"{module_emoji} {module_title}",
                            callback_data=f"mini_module_{module['id']}"
                        )])
                    else:
                        days_until_unlock = (day_number - 1) - days_passed
                        unlock_date = payment.paid_at + timedelta(days=(day_number - 1))
                        unlock_date_str = unlock_date.strftime('%d.%m.%Y %H:%M')
                        
                        time_until_unlock = unlock_date - datetime.utcnow()
                        hours_until_unlock = int(time_until_unlock.total_seconds() / 3600)
                        
                        if hours_until_unlock < 24:
                            time_str = f"—á–µ—Ä–µ–∑ {hours_until_unlock} —á."
                        else:
                            time_str = f"—á–µ—Ä–µ–∑ {days_until_unlock} –¥–Ω."
                        
                        text += f"üîí {module_emoji} {module_title}\n"
                        text += f"   –û—Ç–∫—Ä–æ–µ—Ç—Å—è: {unlock_date_str} ({time_str})\n"
                
                text += "\nüí° –ù–æ–≤—ã–π –º–æ–¥—É–ª—å –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å!"
                
                buttons.append([InlineKeyboardButton(text="‚óÄÔ∏è –ú–æ–∏ –∫—É—Ä—Å—ã", callback_data="my_courses")])
                
                keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
            else:
                text += "üîß <i>–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –º–∏–Ω–∏-–∫—É—Ä—Å–∞ —Å–∫–æ—Ä–æ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã.</i>"
                
                buttons = [[InlineKeyboardButton(text="‚óÄÔ∏è –ú–æ–∏ –∫—É—Ä—Å—ã", callback_data="my_courses")]]
                keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
            
            await callback.message.edit_text(text, reply_markup=keyboard)
            await callback.answer()
            return
        
        # –û–±—ã—á–Ω—ã–π –∫—É—Ä—Å
        course = get_course_by_slug(course_slug)
        
        if not course:
            await callback.answer("–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏ –∫—É—Ä—Å–∞
        emoji = course.get('emoji', 'üìö')
        text = f"{emoji} <b>{course['name']}</b>\n\n"
        
        duration = course.get('duration', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')
        text += f"‚è± <b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> {duration}\n"
        
        if payment.paid_at:
            paid_date = payment.paid_at.strftime('%d.%m.%Y')
            text += f"üìÖ <b>–î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏:</b> {paid_date}\n"
        
        text += "\n‚úÖ <b>–£ –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º –∫—É—Ä—Å–∞</b>\n\n"
        
        modules = get_course_modules(course_slug)
        
        if modules:
            text += "üìö <b>–ú–æ–¥—É–ª–∏ –∫—É—Ä—Å–∞:</b>\n\n"
            
            buttons = []
            
            for module in modules:
                module_title = module.get('title', '–ú–æ–¥—É–ª—å')
                text += f"‚ñ´Ô∏è {module_title}\n\n"
                
                buttons.append([InlineKeyboardButton(
                    text=f"üìö {module_title}",
                    callback_data=f"module_{course_slug}_{module['id']}"
                )])
            
            text += "\nüí° –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥—É–ª—å, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ!"
        else:
            text += "üîß <i>–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –∫—É—Ä—Å–∞ —Å–∫–æ—Ä–æ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã.</i>\n\n"
            
            buttons = []
        
        buttons.append([InlineKeyboardButton(text="‚óÄÔ∏è –ú–æ–∏ –∫—É—Ä—Å—ã", callback_data="my_courses")])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        
        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer()
    
    except Exception as e:
        logger.error(f"Error in show_my_course: {e}", exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫—É—Ä—Å–∞", show_alert=True)


@learning_router.callback_query(F.data.startswith("module_"))
async def show_module(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥—É–ª—å –∫—É—Ä—Å–∞ —Å —É—Ä–æ–∫–∞–º–∏"""
    parts = callback.data.split("_", 2)
    if len(parts) < 3:
        await callback.answer("–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return
    
    course_slug = parts[1]
    module_id = parts[2]
    
    db = await get_db()
    user_repo = UserRepository(db)
    payment_repo = PaymentRepository(db)
    
    try:
        user = await user_repo.get_by_telegram_id(callback.from_user.id)
        
        if not user:
            await callback.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        payments = await payment_repo.get_user_payments(user.id)
        payment = next((p for p in payments if p.course_slug == course_slug and p.status == 'succeeded' and p.product_type in ['course', 'mini_course']), None)
        
        if not payment:
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∫—É—Ä—Å—É", show_alert=True)
            return
        
        module = get_module_by_id(course_slug, module_id)
        
        if not module:
            await callback.answer("–ú–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        course = get_course_by_slug(course_slug)
        
        emoji = course.get('emoji', 'üìö') if course else 'üìö'
        text = f"{emoji} <b>{module['title']}</b>\n\n"
        
        description = module.get('description', '')
        if description:
            text += f"üìù {description}\n\n"
        
        lessons = module.get('lessons', [])
        
        if lessons:
            text += "üìñ <b>–£—Ä–æ–∫–∏ –º–æ–¥—É–ª—è:</b>\n\n"
            
            buttons = []
            
            for i, lesson in enumerate(lessons, 1):
                lesson_title = lesson.get('title', f'–£—Ä–æ–∫ {i}')
                lesson_type = lesson.get('type', 'video')
                
                type_emoji = {
                    'video': 'üé•',
                    'homework': 'üìù',
                    'test': '‚úÖ',
                    'material': 'üìÑ'
                }.get(lesson_type, 'üìñ')
                
                text += f"{i}. {type_emoji} {lesson_title}\n"
                
                buttons.append([InlineKeyboardButton(
                    text=f"{type_emoji} –£—Ä–æ–∫ {i}: {lesson_title[:30]}{'...' if len(lesson_title) > 30 else ''}",
                    callback_data=f"lesson_{course_slug}_{module_id}_{lesson['id']}"
                )])
            
            text += "\nüí° –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —É—Ä–æ–∫, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–∑—É—á–µ–Ω–∏–µ!"
            
            buttons.append([
                InlineKeyboardButton(text="‚óÄÔ∏è –ö –∫—É—Ä—Å—É", callback_data=f"my_course_{course_slug}"),
                InlineKeyboardButton(text="üìö –ú–æ–∏ –∫—É—Ä—Å—ã", callback_data="my_courses")
            ])
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        else:
            text += "üìö –£—Ä–æ–∫–∏ —Å–∫–æ—Ä–æ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã."
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –ö –∫—É—Ä—Å—É", callback_data=f"my_course_{course_slug}")]
            ])
        
        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer()
    
    except Exception as e:
        logger.error(f"Error in show_module: {e}", exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª—è", show_alert=True)


@learning_router.callback_query(F.data.startswith("lesson_"))
async def show_lesson(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —É—Ä–æ–∫"""
    parts = callback.data.split("_", 3)
    if len(parts) < 4:
        await callback.answer("–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return
    
    course_slug = parts[1]
    module_id = parts[2]
    lesson_id = parts[3]
    
    db = await get_db()
    user_repo = UserRepository(db)
    payment_repo = PaymentRepository(db)
    
    try:
        user = await user_repo.get_by_telegram_id(callback.from_user.id)
        
        if not user:
            await callback.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        payments = await payment_repo.get_user_payments(user.id)
        payment = next((p for p in payments if p.course_slug == course_slug and p.status == 'succeeded' and p.product_type in ['course', 'mini_course']), None)
        
        if not payment:
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∫—É—Ä—Å—É", show_alert=True)
            return
        
        lesson = get_lesson_by_id(course_slug, module_id, lesson_id)
        
        if not lesson:
            await callback.answer("–£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        lesson_type = lesson.get('type', 'video')
        type_emoji = {
            'video': 'üé•',
            'homework': 'üìù',
            'test': '‚úÖ',
            'material': 'üìÑ'
        }.get(lesson_type, 'üìñ')
        
        text = f"{type_emoji} <b>{lesson['title']}</b>\n\n"
        
        description = lesson.get('description', '')
        if description:
            text += f"üìù {description}\n\n"
        
        has_content = False
        
        video_url = lesson.get('video_url', '')
        if video_url:
            text += "üé¨ <b>–í–∏–¥–µ–æ —É—Ä–æ–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞</b>\n\n"
            has_content = True
        
        lecture_file_id = lesson.get('lecture_file_id', '')
        if lecture_file_id:
            text += "üìÑ <b>–õ–µ–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è</b>\n\n"
            has_content = True
        
        text_content = lesson.get('text_content', '')
        if text_content:
            text += f"üìù <b>–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —É—Ä–æ–∫–∞:</b>\n{text_content}\n\n"
            has_content = True
        
        if not has_content:
            if lesson_type == 'homework':
                text += "‚úçÔ∏è –≠—Ç–æ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã.\n\n"
            else:
                text += "üîß –ú–∞—Ç–µ—Ä–∏–∞–ª—ã —É—Ä–æ–∫–∞ —Å–∫–æ—Ä–æ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã.\n\n"
        
        materials = lesson.get('materials', [])
        if materials:
            text += "üìé <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã:</b>\n"
            for material in materials:
                material_title = material.get('title', '–ú–∞—Ç–µ—Ä–∏–∞–ª')
                material_file_id = material.get('file_id', '')
                
                if material_file_id:
                    text += f"‚ñ´Ô∏è {material_title}\n"
                    try:
                        await callback.message.answer_document(
                            document=material_file_id,
                            caption=material_title
                        )
                    except Exception as e:
                        logger.error(f"Error sending material: {e}")
                else:
                    text += f"‚ñ´Ô∏è {material_title} (—Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω)\n"
            text += "\n"
        
        buttons = []
        
        if video_url:
            buttons.append([InlineKeyboardButton(text="üé¨ –°–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æ", url=video_url)])
        
        if lecture_file_id:
            buttons.append([InlineKeyboardButton(text="üìÑ –°–∫–∞—á–∞—Ç—å –ª–µ–∫—Ü–∏—é", callback_data=f"download_lecture_{course_slug}_{module_id}_{lesson_id}")])
        
        buttons.extend([
            [InlineKeyboardButton(text="‚óÄÔ∏è –ö –º–æ–¥—É–ª—é", callback_data=f"module_{course_slug}_{module_id}")],
            [
                InlineKeyboardButton(text="üìö –ö –∫—É—Ä—Å—É", callback_data=f"my_course_{course_slug}"),
                InlineKeyboardButton(text="üè† –ú–æ–∏ –∫—É—Ä—Å—ã", callback_data="my_courses")
            ]
        ])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        
        await callback.message.edit_text(
            text,
            reply_markup=keyboard,
            disable_web_page_preview=False
        )
        await callback.answer()
    
    except Exception as e:
        logger.error(f"Error in show_lesson: {e}", exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —É—Ä–æ–∫–∞", show_alert=True)


@learning_router.callback_query(F.data.startswith("download_lecture_"))
async def download_lecture(callback: CallbackQuery):
    """–°–∫–∞—á–∞—Ç—å PDF –ª–µ–∫—Ü–∏—é —É—Ä–æ–∫–∞"""
    parts = callback.data.replace("download_lecture_", "").split("_", 2)
    
    if len(parts) < 3:
        await callback.answer("–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return
    
    course_slug = parts[0]
    module_id = parts[1]
    lesson_id = parts[2]
    
    db = await get_db()
    user_repo = UserRepository(db)
    payment_repo = PaymentRepository(db)
    
    try:
        user = await user_repo.get_by_telegram_id(callback.from_user.id)
        
        if not user:
            await callback.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        payments = await payment_repo.get_user_payments(user.id)
        payment = next((p for p in payments if p.course_slug == course_slug and p.status == 'succeeded' and p.product_type in ['course', 'mini_course']), None)
        
        if not payment:
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∫—É—Ä—Å—É", show_alert=True)
            return
        
        lesson = get_lesson_by_id(course_slug, module_id, lesson_id)
        
        if not lesson:
            await callback.answer("–£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        lecture_file_id = lesson.get('lecture_file_id', '')
        
        if not lecture_file_id:
            await callback.answer("–õ–µ–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", show_alert=True)
            return
        
        try:
            await callback.message.answer_document(
                document=lecture_file_id,
                caption=f"üìÑ –õ–µ–∫—Ü–∏—è: {lesson['title']}"
            )
            await callback.answer("‚úÖ –õ–µ–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
        except Exception as e:
            logger.error(f"Error sending lecture file: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ª–µ–∫—Ü–∏–∏", show_alert=True)
    
    except Exception as e:
        logger.error(f"Error in download_lecture: {e}", exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@learning_router.callback_query(F.data.startswith("mini_module_"))
async def show_mini_module(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥—É–ª—å –º–∏–Ω–∏-–∫—É—Ä—Å–∞ —Å —É—Ä–æ–∫–∞–º–∏"""
    module_id = callback.data.replace("mini_module_", "")
    
    db = await get_db()
    user_repo = UserRepository(db)
    payment_repo = PaymentRepository(db)
    
    try:
        user = await user_repo.get_by_telegram_id(callback.from_user.id)
        
        if not user:
            await callback.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        payments = await payment_repo.get_user_payments(user.id)
        payment = next((p for p in payments if p.course_slug == "mini_course" and p.status == 'succeeded' and p.product_type in ['course', 'mini_course']), None)
        
        if not payment:
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∏–Ω–∏-–∫—É—Ä—Å—É", show_alert=True)
            return
        
        mini_course = get_mini_course()
        
        if not mini_course:
            await callback.answer("–ú–∏–Ω–∏-–∫—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        modules = mini_course.get('modules', [])
        module = next((m for m in modules if m['id'] == module_id), None)
        
        if not module:
            await callback.answer("–ú–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –º–æ–¥—É–ª—é
        day_number = module.get('day_number', 999)
        if payment.paid_at:
            time_since_purchase = datetime.utcnow() - payment.paid_at
            days_passed = int(time_since_purchase.total_seconds() / 86400)
        else:
            days_passed = 0
        
        is_available = days_passed >= (day_number - 1)
        
        if not is_available:
            await callback.answer("–≠—Ç–æ—Ç –º–æ–¥—É–ª—å –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
            return
        
        emoji = module.get('emoji', 'üìñ')
        text = f"{emoji} <b>{module['title']}</b>\n\n"
        
        description = module.get('description', '')
        if description:
            text += f"üìù {description}\n\n"
        
        lessons = module.get('lessons', [])
        
        if lessons:
            text += "üìñ <b>–£—Ä–æ–∫–∏:</b>\n\n"
            
            buttons = []
            
            for i, lesson in enumerate(lessons, 1):
                lesson_title = lesson.get('title', f'–£—Ä–æ–∫ {i}')
                lesson_type = lesson.get('type', 'video')
                
                type_emoji = {
                    'video': 'üé•',
                    'homework': 'üìù',
                    'test': '‚úÖ',
                    'material': 'üìÑ'
                }.get(lesson_type, 'üìñ')
                
                text += f"{i}. {type_emoji} {lesson_title}\n"
                
                buttons.append([InlineKeyboardButton(
                    text=f"{type_emoji} –£—Ä–æ–∫ {i}: {lesson_title[:30]}{'...' if len(lesson_title) > 30 else ''}",
                    callback_data=f"mini_lesson_{module_id}_{lesson['id']}"
                )])
            
            text += "\nüí° –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —É—Ä–æ–∫, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!"
            
            buttons.append([
                InlineKeyboardButton(text="‚óÄÔ∏è –ö –º–∏–Ω–∏-–∫—É—Ä—Å—É", callback_data="my_course_mini_course"),
                InlineKeyboardButton(text="üìö –ú–æ–∏ –∫—É—Ä—Å—ã", callback_data="my_courses")
            ])
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        else:
            text += "üìö –£—Ä–æ–∫–∏ —Å–∫–æ—Ä–æ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã."
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –ö –º–∏–Ω–∏-–∫—É—Ä—Å—É", callback_data="my_course_mini_course")]
            ])
        
        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer()
    
    except Exception as e:
        logger.error(f"Error in show_mini_module: {e}", exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª—è", show_alert=True)


@learning_router.callback_query(F.data.startswith("mini_lesson_"))
async def show_mini_lesson(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —É—Ä–æ–∫ –º–∏–Ω–∏-–∫—É—Ä—Å–∞"""
    parts = callback.data.replace("mini_lesson_", "").split("_", 1)
    if len(parts) < 2:
        await callback.answer("–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return
    
    module_id = parts[0]
    lesson_id = parts[1]
    
    db = await get_db()
    user_repo = UserRepository(db)
    payment_repo = PaymentRepository(db)
    
    try:
        user = await user_repo.get_by_telegram_id(callback.from_user.id)
        
        if not user:
            await callback.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        payments = await payment_repo.get_user_payments(user.id)
        payment = next((p for p in payments if p.course_slug == "mini_course" and p.status == 'succeeded' and p.product_type in ['course', 'mini_course']), None)
        
        if not payment:
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∏–Ω–∏-–∫—É—Ä—Å—É", show_alert=True)
            return
        
        mini_course = get_mini_course()
        
        if not mini_course:
            await callback.answer("–ú–∏–Ω–∏-–∫—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        modules = mini_course.get('modules', [])
        module = next((m for m in modules if m['id'] == module_id), None)
        
        if not module:
            await callback.answer("–ú–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        lessons = module.get('lessons', [])
        lesson = next((l for l in lessons if l['id'] == lesson_id), None)
        
        if not lesson:
            await callback.answer("–£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –º–æ–¥—É–ª—é
        day_number = module.get('day_number', 999)
        if payment.paid_at:
            time_since_purchase = datetime.utcnow() - payment.paid_at
            days_passed = int(time_since_purchase.total_seconds() / 86400)
        else:
            days_passed = 0
        
        is_available = days_passed >= (day_number - 1)
        
        if not is_available:
            await callback.answer("–≠—Ç–æ—Ç —É—Ä–æ–∫ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
            return
        
        lesson_type = lesson.get('type', 'video')
        type_emoji = {
            'video': 'üé•',
            'homework': 'üìù',
            'test': '‚úÖ',
            'material': 'üìÑ'
        }.get(lesson_type, 'üìñ')
        
        text = f"{type_emoji} <b>{lesson['title']}</b>\n\n"
        
        description = lesson.get('description', '')
        if description:
            text += f"üìù {description}\n\n"
        
        has_content = False
        
        video_url = lesson.get('video_url', '')
        if video_url:
            text += f"üé¨ <a href='{video_url}'>–°–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æ</a>\n\n"
            has_content = True
        
        text_content = lesson.get('text_content', '')
        if text_content:
            text += f"üìù <b>–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —É—Ä–æ–∫–∞:</b>\n{text_content}\n\n"
            has_content = True
        
        if not has_content:
            if lesson_type == 'homework':
                text += "‚úçÔ∏è –≠—Ç–æ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã.\n\n"
            else:
                text += "üîß –ú–∞—Ç–µ—Ä–∏–∞–ª—ã —É—Ä–æ–∫–∞ —Å–∫–æ—Ä–æ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã.\n\n"
        
        buttons = [
            [InlineKeyboardButton(text="‚óÄÔ∏è –ö –º–æ–¥—É–ª—é", callback_data=f"mini_module_{module_id}")],
            [
                InlineKeyboardButton(text="üìö –ö –º–∏–Ω–∏-–∫—É—Ä—Å—É", callback_data="my_course_mini_course"),
                InlineKeyboardButton(text="üè† –ú–æ–∏ –∫—É—Ä—Å—ã", callback_data="my_courses")
            ]
        ]
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        
        await callback.message.edit_text(
            text,
            reply_markup=keyboard,
            disable_web_page_preview=False
        )
        await callback.answer()
    
    except Exception as e:
        logger.error(f"Error in show_mini_lesson: {e}", exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —É—Ä–æ–∫–∞", show_alert=True)

