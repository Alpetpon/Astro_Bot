"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–æ–≤ –æ—Ç YooKassa –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
"""
import logging
from datetime import datetime
from typing import Dict, Any

from aiogram import Bot
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from database import get_db, Payment
from data import get_course_by_slug, get_consultation_by_slug, get_guide_by_id, get_tariff_by_id
from payments import YooKassaPayment
from config import config

logger = logging.getLogger(__name__)


async def process_payment_webhook(
    notification_data: Dict[str, Any], 
    bot: Bot
) -> bool:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç YooKassa –æ —Å—Ç–∞—Ç—É—Å–µ –ø–ª–∞—Ç–µ–∂–∞
    
    Args:
        notification_data: –î–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç YooKassa
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        
    Returns:
        bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏
    """
    try:
        # –ü–∞—Ä—Å–∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        notification = YooKassaPayment.parse_webhook_notification(notification_data)
        
        if not notification:
            logger.error("Failed to parse webhook notification")
            return False
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–ª–∞—Ç–µ–∂–∞ –∏–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        payment_obj = notification.object
        payment_id = payment_obj.id
        payment_status = payment_obj.status
        
        logger.info(f"Processing webhook for payment {payment_id}, status: {payment_status}")
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–ª–∞—Ç–µ–∂ –≤ –Ω–∞—à–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db = get_db()
        try:
            payment = db.query(Payment).filter(Payment.payment_id == payment_id).first()
            
            if not payment:
                logger.warning(f"Payment {payment_id} not found in database")
                return False
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂
            if payment_status == 'succeeded' and payment.status != 'succeeded':
                payment.status = 'succeeded'
                payment.paid_at = datetime.utcnow()
                db.commit()
                
                logger.info(f"Payment {payment_id} marked as succeeded")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await notify_user_payment_success(bot, payment, db)
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
                await notify_admin_new_payment(bot, payment, db)
                
                return True
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–π/–Ω–µ—É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂
            elif payment_status in ['canceled', 'failed']:
                payment.status = payment_status
                db.commit()
                
                logger.info(f"Payment {payment_id} marked as {payment_status}")
                return True
            
            return True
            
        finally:
            db.close()
    
    except Exception as e:
        logger.error(f"Error processing webhook: {e}", exc_info=True)
        return False


async def notify_user_payment_success(bot: Bot, payment: Payment, db):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ
    
    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        payment: –û–±—ä–µ–∫—Ç –ø–ª–∞—Ç–µ–∂–∞ –∏–∑ –ë–î
        db: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    """
    try:
        user = payment.user
        
        if not user:
            logger.warning(f"User not found for payment {payment.id}")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø—Ä–æ–¥—É–∫—Ç–∞
        if payment.product_type == 'course':
            await notify_course_payment(bot, user, payment)
        elif payment.product_type == 'consultation':
            await notify_consultation_payment(bot, user, payment)
        elif payment.product_type == 'guide':
            await notify_guide_payment(bot, user, payment)
        else:
            # –û–±—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            await bot.send_message(
                chat_id=user.telegram_id,
                text="‚úÖ <b>–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–∞!</b>\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! üåü"
            )
    
    except Exception as e:
        logger.error(f"Error notifying user about payment: {e}", exc_info=True)


async def notify_course_payment(bot: Bot, user, payment: Payment):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ –∫—É—Ä—Å–∞"""
    course = get_course_by_slug(payment.course_slug)
    tariff = get_tariff_by_id(payment.course_slug, payment.tariff_id) if course else None
    
    if not course:
        logger.warning(f"Course {payment.course_slug} not found")
        return
    
    text = "‚úÖ <b>–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–∞!</b>\n\n"
    text += f"–í–∞–º –æ—Ç–∫—Ä—ã—Ç –¥–æ—Å—Ç—É–ø –∫ –∫—É—Ä—Å—É ¬´{course['name']}¬ª\n\n"
    
    if tariff and tariff.get('with_support'):
        text += "üë®‚Äçüè´ –í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –∫—É—Ä–∞—Ç–æ—Ä.\n\n"
    
    text += "üìö –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –∫—É—Ä—Å–∞ —Å–∫–æ—Ä–æ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –≤–∞—à–µ–º –∫–∞–±–∏–Ω–µ—Ç–µ!"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìö –ú–æ–∏ –∫—É—Ä—Å—ã", callback_data="cabinet")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    
    await bot.send_message(
        chat_id=user.telegram_id,
        text=text,
        reply_markup=keyboard
    )


async def notify_consultation_payment(bot: Bot, user, payment: Payment):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏"""
    consultation = get_consultation_by_slug(payment.consultation_slug)
    
    if not consultation:
        logger.warning(f"Consultation {payment.consultation_slug} not found")
        return
    
    text = "‚úÖ <b>–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–∞!</b>\n\n"
    text += f"{consultation.get('emoji', 'üîÆ')} –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è ¬´{consultation['name']}¬ª –æ–ø–ª–∞—á–µ–Ω–∞!\n\n"
    text += "üìû –í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –∞—Å—Ç—Ä–æ–ª–æ–≥ –¥–ª—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤—Å—Ç—Ä–µ—á–∏.\n\n"
    text += "–°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–≤–µ—Ä–∏–µ! üåü"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    
    await bot.send_message(
        chat_id=user.telegram_id,
        text=text,
        reply_markup=keyboard
    )


async def notify_guide_payment(bot: Bot, user, payment: Payment):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ –≥–∞–π–¥–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞"""
    guide = get_guide_by_id(payment.product_id)
    
    if not guide:
        logger.warning(f"Guide {payment.product_id} not found")
        await bot.send_message(
            chat_id=user.telegram_id,
            text="‚úÖ <b>–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–∞!</b>\n\n–ì–∞–π–¥ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤–∞–º –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–∏–Ω—É—Ç."
        )
        return
    
    file_id = guide.get('file_id')
    
    if file_id:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        await bot.send_document(
            chat_id=user.telegram_id,
            document=file_id,
            caption=f"‚úÖ <b>–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–∞!</b>\n\n{guide.get('emoji', 'üíù')} –í–∞—à {guide['name']} –≥–æ—Ç–æ–≤!\n\n–ñ–µ–ª–∞–µ–º –≤–∞–º —É—Å–ø–µ—Ö–æ–≤ –≤ –∏–∑—É—á–µ–Ω–∏–∏! üåü"
        )
        
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        buttons = []
        
        if guide.get('related_course_slug'):
            buttons.append([InlineKeyboardButton(
                text="üìö –ü–µ—Ä–µ–π—Ç–∏ –∫ –∫—É—Ä—Å—É",
                callback_data=f"course_{guide['related_course_slug']}"
            )])
        
        buttons.append([
            InlineKeyboardButton(text="‚óÄÔ∏è –ö –≥–∞–π–¥–∞–º", callback_data="guides_list"),
            InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="main_menu")
        ])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        
        await bot.send_message(
            chat_id=user.telegram_id,
            text="–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∏–∑—É—á–µ–Ω–∏—è! üìñ",
            reply_markup=keyboard
        )
    else:
        await bot.send_message(
            chat_id=user.telegram_id,
            text="‚úÖ <b>–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–∞!</b>\n\n–ì–∞–π–¥ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤–∞–º –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–∏–Ω—É—Ç."
        )


async def notify_admin_new_payment(bot: Bot, payment: Payment, db):
    """
    –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ –æ –Ω–æ–≤–æ–º –ø–ª–∞—Ç–µ–∂–µ
    
    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        payment: –û–±—ä–µ–∫—Ç –ø–ª–∞—Ç–µ–∂–∞
        db: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    """
    try:
        if not config.ADMIN_ID:
            return
        
        user = payment.user
        
        text = "üîî <b>–ù–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂!</b>\n\n"
        text += f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.full_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        text += f"üí∞ –°—É–º–º–∞: {payment.amount:,.0f} ‚ÇΩ\n"
        text += f"üì¶ –¢–∏–ø: {payment.product_type}\n"
        
        if payment.product_type == 'course':
            course = get_course_by_slug(payment.course_slug)
            if course:
                text += f"üìö –ö—É—Ä—Å: {course['name']}\n"
        elif payment.product_type == 'consultation':
            consultation = get_consultation_by_slug(payment.consultation_slug)
            if consultation:
                text += f"üîÆ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è: {consultation['name']}\n"
        elif payment.product_type == 'guide':
            guide = get_guide_by_id(payment.product_id)
            if guide:
                text += f"üìñ –ì–∞–π–¥: {guide['name']}\n"
        
        text += f"\nüÜî ID –ø–ª–∞—Ç–µ–∂–∞: <code>{payment.payment_id}</code>"
        
        await bot.send_message(
            chat_id=config.ADMIN_ID,
            text=text
        )
    
    except Exception as e:
        logger.error(f"Error notifying admin: {e}", exc_info=True)

