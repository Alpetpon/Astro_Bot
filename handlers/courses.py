import json
from datetime import datetime
from aiogram import Router, F
from aiogram.types import CallbackQuery
from aiogram.exceptions import TelegramBadRequest
from sqlalchemy.orm import Session

from database import get_db, Course, Tariff, User
from keyboards import (
    get_courses_keyboard,
    get_course_detail_keyboard,
    get_tariff_keyboard,
    get_back_keyboard
)

router = Router()


@router.callback_query(F.data == "courses")
async def show_courses_catalog(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥ –∫—É—Ä—Å–æ–≤"""
    db: Session = get_db()
    
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        user = db.query(User).filter(User.telegram_id == callback.from_user.id).first()
        if user:
            user.last_activity = datetime.utcnow()
            db.commit()
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫—É—Ä—Å—ã
        courses = db.query(Course).filter(Course.is_active == True).order_by(Course.order).all()
        
        if not courses:
            await callback.message.edit_text(
                "üìö –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—É—Ä—Å–æ–≤.",
                reply_markup=get_back_keyboard("main_menu")
            )
        else:
            await callback.message.edit_text(
                "üìö **–ö–∞—Ç–∞–ª–æ–≥ –∫—É—Ä—Å–æ–≤**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –∫—É—Ä—Å:",
                reply_markup=get_courses_keyboard(courses),
                parse_mode="Markdown"
            )
        
        await callback.answer()
    
    finally:
        db.close()


@router.callback_query(F.data.startswith("course_register_"))
async def show_tariff_selection(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä —Ç–∞—Ä–∏—Ñ–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏"""
    course_slug = callback.data.replace("course_register_", "")
    
    db: Session = get_db()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å –∏ –µ–≥–æ —Ç–∞—Ä–∏—Ñ—ã
        course = db.query(Course).filter(
            Course.slug == course_slug,
            Course.is_active == True
        ).first()
        
        if not course:
            await callback.answer("–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        tariffs = db.query(Tariff).filter(
            Tariff.course_id == course.id,
            Tariff.is_active == True
        ).order_by(Tariff.order).all()
        
        if not tariffs:
            await callback.answer("–¢–∞—Ä–∏—Ñ—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
            return
        
        text = f"üìù **–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ**\n\n"
        text += f"–ö—É—Ä—Å: {course.name}\n\n"
        text += "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞–º –≤–∞—Ä–∏–∞–Ω—Ç –æ–±—É—á–µ–Ω–∏—è:"
        
        await callback.message.edit_text(
            text,
            reply_markup=get_tariff_keyboard(course_slug, tariffs),
            parse_mode="Markdown"
        )
        await callback.answer()
    
    finally:
        db.close()


@router.callback_query(F.data.startswith("course_"))
async def show_course_detail(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É—Ä—Å–µ"""
    # –ò–∑–≤–ª–µ–∫–∞–µ–º slug –∫—É—Ä—Å–∞
    parts = callback.data.split("_")
    
    if len(parts) < 2:
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫—É—Ä—Å–∞", show_alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –Ω–∞–≤–∏–≥–∞—Ü–∏—è –∏–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä –∫—É—Ä—Å–∞
    if parts[1] == "about":
        course_slug = "_".join(parts[2:])
        show_about = True
    elif parts[1] == "price":
        course_slug = "_".join(parts[2:])
        show_about = False
    else:
        course_slug = "_".join(parts[1:])
        show_about = True
    
    db: Session = get_db()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å
        course = db.query(Course).filter(
            Course.slug == course_slug,
            Course.is_active == True
        ).first()
        
        if not course:
            await callback.answer("–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        if show_about:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É—Ä—Å–µ
            text = f"üìñ **{course.name}**\n\n"
            text += f"{course.description}\n\n"
            
            if course.duration:
                text += f"‚è± **–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** {course.duration}\n\n"
            
            if course.program:
                text += "üìã **–ü—Ä–æ–≥—Ä–∞–º–º–∞:**\n"
                try:
                    program = json.loads(course.program)
                    for module in program:
                        text += f"‚Ä¢ {module}\n"
                except:
                    text += course.program
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∞—Ä–∏—Ñ—ã
            text = f"üí∞ **–¢–∞—Ä–∏—Ñ—ã –∫—É—Ä—Å–∞ ¬´{course.name}¬ª**\n\n"
            
            tariffs = db.query(Tariff).filter(
                Tariff.course_id == course.id,
                Tariff.is_active == True
            ).order_by(Tariff.order).all()
            
            for tariff in tariffs:
                support_text = "‚úÖ –° —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ–º" if tariff.with_support else "üìö –°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ"
                text += f"**{tariff.name}** - {tariff.price} ‚ÇΩ\n"
                text += f"{support_text}\n"
                text += f"{tariff.description}\n"
                
                if tariff.features:
                    try:
                        features = json.loads(tariff.features)
                        for feature in features:
                            text += f"  ‚Ä¢ {feature}\n"
                    except:
                        pass
                
                text += "\n"
        
        try:
            await callback.message.edit_text(
                text,
                reply_markup=get_course_detail_keyboard(course_slug),
                parse_mode="Markdown"
            )
        except TelegramBadRequest:
            # –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
            pass
        
        await callback.answer()
    
    finally:
        db.close()

