from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.exceptions import TelegramBadRequest

from database import get_db, UserRepository
from data import get_active_courses, get_course_by_slug, get_tariff_by_id
from keyboards import (
    get_courses_keyboard,
    get_course_detail_keyboard,
    get_back_keyboard
)

router = Router()


@router.callback_query(F.data == "courses")
async def show_courses_catalog(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥ –∫—É—Ä—Å–æ–≤"""
    # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    db = await get_db()
    user_repo = UserRepository(db)
    await user_repo.update_activity(callback.from_user.id)
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫—É—Ä—Å—ã –∏–∑ JSON
    courses = get_active_courses()
    
    if not courses:
        text = "üìö –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—É—Ä—Å–æ–≤."
        markup = get_back_keyboard("main_menu")
    else:
        text = "üìö **–ö–∞—Ç–∞–ª–æ–≥ –∫—É—Ä—Å–æ–≤**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –∫—É—Ä—Å:"
        markup = get_courses_keyboard(courses)
    
    try:
        # –ï—Å–ª–∏ —ç—Ç–æ –≤–∏–¥–µ–æ - —É–¥–∞–ª—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if callback.message.video:
            await callback.message.delete()
            await callback.bot.send_message(
                chat_id=callback.message.chat.id,
                text=text,
                reply_markup=markup,
                parse_mode="Markdown"
            )
        else:
            # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç - —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º
            await callback.message.edit_text(
                text,
                reply_markup=markup,
                parse_mode="Markdown"
            )
    except Exception:
        # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å - —É–¥–∞–ª—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        try:
            await callback.message.delete()
        except Exception:
            pass
        
        await callback.bot.send_message(
            chat_id=callback.message.chat.id,
            text=text,
            reply_markup=markup,
            parse_mode="Markdown"
        )
    
    await callback.answer()


@router.callback_query(F.data.startswith("course_register_"))
async def show_tariff_selection(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä —Ç–∞—Ä–∏—Ñ–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å"""
    course_slug = callback.data.replace("course_register_", "")
    
    # –°–æ–∑–¥–∞–µ–º mock callback —Å –Ω—É–∂–Ω—ã–º data
    class CallbackDataWrapper:
        def __init__(self, original_callback, new_data):
            self._original = original_callback
            self.data = new_data
            
        def __getattr__(self, name):
            return getattr(self._original, name)
    
    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    wrapped_callback = CallbackDataWrapper(callback, f"course_price_{course_slug}")
    await show_course_price(wrapped_callback)


@router.callback_query(F.data.startswith("course_price_"))
async def show_course_price(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞—Ä–∏—Ñ—ã –∫—É—Ä—Å–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞"""
    course_slug = callback.data.replace("course_price_", "")
    
    # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å –∏–∑ JSON
    course = get_course_by_slug(course_slug)
    
    if not course:
        await callback.answer("–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    tariffs = course.get('tariffs', [])
    active_tariffs = [t for t in tariffs if t.get('is_active', True)]
    
    if not active_tariffs:
        await callback.answer("–¢–∞—Ä–∏—Ñ—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —Ç–∞—Ä–∏—Ñ–æ–≤
    emoji = course.get('emoji', 'üìö')
    text = f"üí∞ **–°—Ç–æ–∏–º–æ—Å—Ç—å –∫—É—Ä—Å–∞ ¬´{course['name']}¬ª**\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º —Ç–∞—Ä–∏—Ñ–µ
    for tariff in active_tariffs:
        support_text = "‚úÖ –° —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ–º" if tariff.get('with_support') else "üìö –°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ"
        text += f"**{tariff['name']}** ‚Äî {tariff['price']} ‚ÇΩ\n"
        text += f"{support_text}\n"
        if tariff.get('description'):
            text += f"{tariff['description']}\n"
        
        text += "\n–ß—Ç–æ –≤—Ö–æ–¥–∏—Ç:\n"
        if tariff.get('features'):
            for feature in tariff['features']:
                text += f"‚úîÔ∏è {feature}\n"
        
        text += "\n"
    
    text += "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞–º –≤–∞—Ä–∏–∞–Ω—Ç –æ–±—É—á–µ–Ω–∏—è:"
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å —Ç–∞—Ä–∏—Ñ–∞–º–∏
    buttons = []
    for tariff in active_tariffs:
        support_emoji = "üë®‚Äçüè´" if tariff.get('with_support') else "üìö"
        buttons.append([InlineKeyboardButton(
            text=f"{support_emoji} {tariff['name']} ‚Äî {tariff['price']} ‚ÇΩ",
            callback_data=f"tariff_{course_slug}_{tariff['id']}"
        )])
    
    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    buttons.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_navigation")])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    try:
        await callback.message.edit_text(
            text,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
    except Exception:
        # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
        try:
            await callback.message.delete()
        except Exception:
            pass
        
        await callback.bot.send_message(
            chat_id=callback.message.chat.id,
            text=text,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
    
    await callback.answer()


@router.callback_query(F.data.startswith("course_"))
async def show_course_detail(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É—Ä—Å–µ - –≤—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏"""
    # –ò–∑–≤–ª–µ–∫–∞–µ–º slug –∫—É—Ä—Å–∞
    parts = callback.data.split("_")
    
    if len(parts) < 2:
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫—É—Ä—Å–∞", show_alert=True)
        return
    
    course_slug = "_".join(parts[1:])
    
    # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å –∏–∑ JSON
    course = get_course_by_slug(course_slug)
    
    if not course:
        await callback.answer("–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É—Ä—Å–µ
    emoji = course.get('emoji', 'üìö')
    text = f"{emoji} **{course['name']}**\n\n"
    text += f"{course.get('description', '')}\n\n"
    
    if course.get('duration'):
        text += f"‚è± **–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** {course['duration']}\n\n"
    
    if course.get('program'):
        text += "üìã **–ü—Ä–æ–≥—Ä–∞–º–º–∞:**\n"
        for module in course['program']:
            text += f"‚Ä¢ {module}\n"
    
    try:
        await callback.message.edit_text(
            text,
            reply_markup=get_course_detail_keyboard(course_slug),
            parse_mode="Markdown"
        )
    except Exception:
        # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —ç—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç, –≤–∏–¥–µ–æ –∏–ª–∏ —Ñ–æ—Ç–æ)
        try:
            await callback.message.delete()
        except Exception:
            pass
        
        await callback.bot.send_message(
            chat_id=callback.message.chat.id,
            text=text,
            reply_markup=get_course_detail_keyboard(course_slug),
            parse_mode="Markdown"
        )
    
    await callback.answer()
