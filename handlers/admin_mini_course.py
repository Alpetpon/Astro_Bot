from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import StateFilter

from data import get_mini_course, save_mini_course
from utils.bot_settings import is_admin
from keyboards import get_bot_management_keyboard

router = Router()


@router.callback_query(F.data == "admin_bot_management")
async def show_bot_management(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await state.clear()
    
    await callback.message.edit_text(
        "ü§ñ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
        reply_markup=get_bot_management_keyboard()
    )
    await callback.answer()


class MiniCourseEdit(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–∏–Ω–∏-–∫—É—Ä—Å–∞"""
    editing_title = State()
    editing_subtitle = State()
    editing_start_date = State()
    editing_description = State()
    editing_format = State()
    editing_summary = State()
    editing_registration_text = State()
    editing_tariff_price = State()


def get_mini_course_admin_keyboard(is_active: bool = True) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∏–Ω–∏-–∫—É—Ä—Å–æ–º"""
    status_text = "‚úÖ –í—ã–∫–ª—é—á–∏—Ç—å" if is_active else "‚ùå –í–∫–ª—é—á–∏—Ç—å"
    status_callback = "mini_course_toggle_off" if is_active else "mini_course_toggle_on"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìù –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫", callback_data="mini_course_edit_title")],
        [InlineKeyboardButton(text="üìÖ –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É —Å—Ç–∞—Ä—Ç–∞", callback_data="mini_course_edit_date")],
        [InlineKeyboardButton(text="üìÑ –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data="mini_course_edit_description")],
        [InlineKeyboardButton(text="üìö –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç –æ–±—É—á–µ–Ω–∏—è", callback_data="mini_course_edit_format")],
        [InlineKeyboardButton(text="üí∞ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–∞—Ä–∏—Ñ—ã", callback_data="mini_course_edit_tariffs")],
        [InlineKeyboardButton(text=status_text, callback_data=status_callback)],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_bot_management")]
    ])
    return keyboard


def get_tariffs_admin_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∞—Ä–∏—Ñ–æ–≤"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìö –¢–∞—Ä–∏—Ñ '–°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–µ'", callback_data="mini_course_tariff_solo")],
        [InlineKeyboardButton(text="üë®‚Äçüè´ –¢–∞—Ä–∏—Ñ '–° —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ–º'", callback_data="mini_course_tariff_support")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_mini_course")]
    ])
    return keyboard


def get_tariff_edit_keyboard(tariff_id: str) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí∞ –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É", callback_data=f"mini_course_price_{tariff_id}")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="mini_course_edit_tariffs")]
    ])
    return keyboard


@router.callback_query(F.data == "admin_mini_course")
async def show_mini_course_admin(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∏–Ω–∏-–∫—É—Ä—Å–æ–º"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    mini_course = get_mini_course()
    
    if not mini_course:
        await callback.message.edit_text(
            "‚ùå –ú–∏–Ω–∏-–∫—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∞–Ω–Ω—ã—Ö",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_bot_management")]
            ])
        )
        return
    
    is_active = mini_course.get('is_active', False)
    status_emoji = "‚úÖ" if is_active else "‚ùå"
    
    text = f"üåå <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∏–Ω–∏-–∫—É—Ä—Å–æ–º</b>\n\n"
    text += f"<b>–°—Ç–∞—Ç—É—Å:</b> {status_emoji} {'–ê–∫—Ç–∏–≤–µ–Ω' if is_active else '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}\n\n"
    text += f"<b>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</b> {mini_course.get('title', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
    text += f"<b>–ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫:</b> {mini_course.get('subtitle', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
    text += f"<b>–î–∞—Ç–∞ —Å—Ç–∞—Ä—Ç–∞:</b> {mini_course.get('start_date', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n\n"
    
    # –¢–∞—Ä–∏—Ñ—ã
    text += "<b>–¢–∞—Ä–∏—Ñ—ã:</b>\n"
    for tariff in mini_course.get('tariffs', []):
        text += f"  {tariff['emoji']} {tariff['name']} - {tariff['price']} ‚ÇΩ\n"
    
    await callback.message.edit_text(
        text,
        reply_markup=get_mini_course_admin_keyboard(is_active)
    )
    await callback.answer()


@router.callback_query(F.data.in_(["mini_course_toggle_on", "mini_course_toggle_off"]))
async def toggle_mini_course(callback: CallbackQuery):
    """–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –º–∏–Ω–∏-–∫—É—Ä—Å"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    mini_course = get_mini_course()
    if not mini_course:
        await callback.answer("‚ùå –ú–∏–Ω–∏-–∫—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç—É—Å
    new_status = callback.data == "mini_course_toggle_on"
    mini_course['is_active'] = new_status
    save_mini_course(mini_course)
    
    status_text = "–≤–∫–ª—é—á–µ–Ω" if new_status else "–≤—ã–∫–ª—é—á–µ–Ω"
    await callback.answer(f"‚úÖ –ú–∏–Ω–∏-–∫—É—Ä—Å {status_text}")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await show_mini_course_admin(callback)


@router.callback_query(F.data == "mini_course_edit_title")
async def start_edit_title(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    await state.set_state(MiniCourseEdit.editing_title)
    await callback.message.edit_text(
        "üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –º–∏–Ω–∏-–∫—É—Ä—Å–∞:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_mini_course")]
        ])
    )
    await callback.answer()


@router.message(StateFilter(MiniCourseEdit.editing_title))
async def save_title(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫"""
    if not is_admin(message.from_user.id):
        return
    
    mini_course = get_mini_course()
    if not mini_course:
        await message.answer("‚ùå –ú–∏–Ω–∏-–∫—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await state.clear()
        return
    
    mini_course['title'] = message.text
    save_mini_course(mini_course)
    
    await message.answer("‚úÖ –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω!")
    await state.clear()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
    is_active = mini_course.get('is_active', False)
    status_emoji = "‚úÖ" if is_active else "‚ùå"
    
    text = f"üåå <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∏–Ω–∏-–∫—É—Ä—Å–æ–º</b>\n\n"
    text += f"<b>–°—Ç–∞—Ç—É—Å:</b> {status_emoji} {'–ê–∫—Ç–∏–≤–µ–Ω' if is_active else '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}\n\n"
    text += f"<b>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</b> {mini_course.get('title', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
    text += f"<b>–ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫:</b> {mini_course.get('subtitle', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
    text += f"<b>–î–∞—Ç–∞ —Å—Ç–∞—Ä—Ç–∞:</b> {mini_course.get('start_date', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n\n"
    
    text += "<b>–¢–∞—Ä–∏—Ñ—ã:</b>\n"
    for tariff in mini_course.get('tariffs', []):
        text += f"  {tariff['emoji']} {tariff['name']} - {tariff['price']} ‚ÇΩ\n"
    
    await message.answer(
        text,
        reply_markup=get_mini_course_admin_keyboard(is_active)
    )


@router.callback_query(F.data == "mini_course_edit_date")
async def start_edit_date(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã —Å—Ç–∞—Ä—Ç–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    await state.set_state(MiniCourseEdit.editing_start_date)
    await callback.message.edit_text(
        "üìÖ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É —Å—Ç–∞—Ä—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 13 –æ–∫—Ç—è–±—Ä—è):",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_mini_course")]
        ])
    )
    await callback.answer()


@router.message(StateFilter(MiniCourseEdit.editing_start_date))
async def save_date(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤—É—é –¥–∞—Ç—É —Å—Ç–∞—Ä—Ç–∞"""
    if not is_admin(message.from_user.id):
        return
    
    mini_course = get_mini_course()
    if not mini_course:
        await message.answer("‚ùå –ú–∏–Ω–∏-–∫—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await state.clear()
        return
    
    mini_course['start_date'] = message.text
    save_mini_course(mini_course)
    
    await message.answer("‚úÖ –î–∞—Ç–∞ —Å—Ç–∞—Ä—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
    await state.clear()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
    is_active = mini_course.get('is_active', False)
    status_emoji = "‚úÖ" if is_active else "‚ùå"
    
    text = f"üåå <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∏–Ω–∏-–∫—É—Ä—Å–æ–º</b>\n\n"
    text += f"<b>–°—Ç–∞—Ç—É—Å:</b> {status_emoji} {'–ê–∫—Ç–∏–≤–µ–Ω' if is_active else '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}\n\n"
    text += f"<b>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</b> {mini_course.get('title', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
    text += f"<b>–ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫:</b> {mini_course.get('subtitle', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
    text += f"<b>–î–∞—Ç–∞ —Å—Ç–∞—Ä—Ç–∞:</b> {mini_course.get('start_date', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n\n"
    
    text += "<b>–¢–∞—Ä–∏—Ñ—ã:</b>\n"
    for tariff in mini_course.get('tariffs', []):
        text += f"  {tariff['emoji']} {tariff['name']} - {tariff['price']} ‚ÇΩ\n"
    
    await message.answer(
        text,
        reply_markup=get_mini_course_admin_keyboard(is_active)
    )


@router.callback_query(F.data == "mini_course_edit_tariffs")
async def show_tariffs_admin(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–∞—Ä–∏—Ñ–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    mini_course = get_mini_course()
    if not mini_course:
        await callback.answer("‚ùå –ú–∏–Ω–∏-–∫—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    text = "üí∞ <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–æ–≤</b>\n\n"
    for tariff in mini_course.get('tariffs', []):
        text += f"{tariff['emoji']} <b>{tariff['name']}</b>\n"
        text += f"–¶–µ–Ω–∞: {tariff['price']} ‚ÇΩ\n\n"
    
    await callback.message.edit_text(
        text,
        reply_markup=get_tariffs_admin_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data.in_(["mini_course_tariff_solo", "mini_course_tariff_support"]))
async def show_tariff_edit(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    tariff_id = "mini-solo" if callback.data == "mini_course_tariff_solo" else "mini-support"
    
    mini_course = get_mini_course()
    if not mini_course:
        await callback.answer("‚ùå –ú–∏–Ω–∏-–∫—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # –ù–∞—Ö–æ–¥–∏–º —Ç–∞—Ä–∏—Ñ
    tariff = None
    for t in mini_course.get('tariffs', []):
        if t['id'] == tariff_id:
            tariff = t
            break
    
    if not tariff:
        await callback.answer("‚ùå –¢–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    text = f"{tariff['emoji']} <b>{tariff['name']}</b>\n\n"
    text += f"<b>–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞:</b> {tariff['price']} ‚ÇΩ\n\n"
    text += "<b>–ß—Ç–æ –≤—Ö–æ–¥–∏—Ç:</b>\n"
    for feature in tariff.get('features', []):
        text += f"‚úîÔ∏è {feature}\n"
    
    await callback.message.edit_text(
        text,
        reply_markup=get_tariff_edit_keyboard(tariff_id)
    )
    await callback.answer()


@router.callback_query(F.data.startswith("mini_course_price_"))
async def start_edit_price(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã —Ç–∞—Ä–∏—Ñ–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    tariff_id = callback.data.replace("mini_course_price_", "")
    await state.update_data(tariff_id=tariff_id)
    await state.set_state(MiniCourseEdit.editing_tariff_price)
    
    await callback.message.edit_text(
        "üí∞ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ, –±–µ–∑ –∑–Ω–∞–∫–∞ —Ä—É–±–ª—è):",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="mini_course_edit_tariffs")]
        ])
    )
    await callback.answer()


@router.message(StateFilter(MiniCourseEdit.editing_tariff_price))
async def save_price(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤—É—é —Ü–µ–Ω—É —Ç–∞—Ä–∏—Ñ–∞"""
    if not is_admin(message.from_user.id):
        return
    
    try:
        new_price = int(message.text.strip())
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5000)")
        return
    
    data = await state.get_data()
    tariff_id = data.get('tariff_id')
    
    mini_course = get_mini_course()
    if not mini_course:
        await message.answer("‚ùå –ú–∏–Ω–∏-–∫—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await state.clear()
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É
    updated = False
    for tariff in mini_course.get('tariffs', []):
        if tariff['id'] == tariff_id:
            tariff['price'] = new_price
            updated = True
            break
    
    if not updated:
        await message.answer("‚ùå –¢–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await state.clear()
        return
    
    save_mini_course(mini_course)
    await message.answer(f"‚úÖ –¶–µ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {new_price} ‚ÇΩ!")
    await state.clear()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∞—Ä–∏—Ñ–æ–≤
    text = "üí∞ <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–æ–≤</b>\n\n"
    for tariff in mini_course.get('tariffs', []):
        text += f"{tariff['emoji']} <b>{tariff['name']}</b>\n"
        text += f"–¶–µ–Ω–∞: {tariff['price']} ‚ÇΩ\n\n"
    
    await message.answer(
        text,
        reply_markup=get_tariffs_admin_keyboard()
    )

